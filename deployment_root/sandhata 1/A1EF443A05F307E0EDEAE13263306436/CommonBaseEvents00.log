<CommonBaseEvent creationTime="2024-07-17T12:59:45.193Z" globalInstanceId="A1EF443C7138A940C25DE53738343236" msg="RPXE0001W 1 users successfully added" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>4</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T12:59:49.227Z" msg="Unable to find an exact match for CDP version 126, so returning the closest version found: a no-op implementation" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>5</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>57</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>WARNING</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>900</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>org.openqa.selenium.devtools.CdpVersionFinder</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sourceClassName" type="string">
		<values>org.openqa.selenium.devtools.CdpVersionFinder</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sourceMethodName" type="string">
		<values>findNearestMatch</values>
	</extendedDataElements>
	<sourceComponentId component="Logging" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="Logger" componentType="Logging_Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T12:59:49.232Z" msg="Unable to find version of CDP to use for . You may need to include a dependency on a specific version of the CDP using something similar to `org.seleniumhq.selenium:selenium-devtools-v86:4.1.4` where the version (&quot;v86&quot;) matches the version of the chromium-based browser you&apos;re using and the version number of the artifact is the same as Selenium&apos;s." severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>6</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>57</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>WARNING</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>900</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>org.openqa.selenium.chromium.ChromiumDriver</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sourceClassName" type="string">
		<values>org.openqa.selenium.chromium.ChromiumDriver</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sourceMethodName" type="string">
		<values>lambda$new$3</values>
	</extendedDataElements>
	<sourceComponentId component="Logging" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="Logger" componentType="Logging_Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:08.064Z" globalInstanceId="A1EF443C7E5F8350C25DE53738343236" msg="HandleException {0}&#xA;org.openqa.selenium.TimeoutException: Expected condition failed: waiting for com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor$ScriptFunction@f650e65c (tried for 10 second(s) with 500 milliseconds interval)&#xA;Build info: version: &apos;4.1.4&apos;, revision: &apos;535d840ee2&apos;&#xA;System info: host: &apos;STLININF0256&apos;, ip: &apos;192.168.1.7&apos;, os.name: &apos;Windows 11&apos;, os.arch: &apos;amd64&apos;, os.version: &apos;10.0&apos;, java.version: &apos;1.8.0_382&apos;&#xA;Driver info: driver.version: unknown&#xD;&#xA;&#x9;at org.openqa.selenium.support.ui.FluentWait.timeoutException(FluentWait.java:263)&#xD;&#xA;&#x9;at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:231)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor.executeAction(WebDriverJavascriptExecutor.java:129)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.selenium.actions.BaseWebDriverAction.execute(BaseWebDriverAction.java:177)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.selenium.WebDriverPlayer.runScript(WebDriverPlayer.java:312)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:100)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:89)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.playback.js.actions.JSDefaultAction.execute(JSDefaultAction.java:31)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeActionInternal(HybridPlayer.java:121)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeAction(HybridPlayer.java:112)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.playback.AbstractWebPlayer.executeTestStep(AbstractWebPlayer.java:217)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestStep(PlaybackManager.java:347)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestSteps(PlaybackManager.java:250)&#xD;&#xA;&#x9;at com.ibm.rational.test.rtw.webgui.execution.DesktopBrowserExecution.executeSteps(DesktopBrowserExecution.java:122)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.execution.moeb.action.MoebStepBatchAction.execute(MoebStepBatchAction.java:300)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xD;&#xA;&#x9;at java.lang.Thread.run(Thread.java:826)&#xD;&#xA;" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>7</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:stackTrace" type="stringArray">
		<values>org.openqa.selenium.TimeoutException: Expected condition failed: waiting for com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor$ScriptFunction@f650e65c (tried for 10 second(s) with 500 milliseconds interval)&#xA;Build info: version: &apos;4.1.4&apos;, revision: &apos;535d840ee2&apos;&#xA;System info: host: &apos;STLININF0256&apos;, ip: &apos;192.168.1.7&apos;, os.name: &apos;Windows 11&apos;, os.arch: &apos;amd64&apos;, os.version: &apos;10.0&apos;, java.version: &apos;1.8.0_382&apos;&#xA;Driver info: driver.version: unknown</values>
		<values>org.openqa.selenium.support.ui.FluentWait.timeoutException(FluentWait.java:263)</values>
		<values>org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:231)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor.executeAction(WebDriverJavascriptExecutor.java:129)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.BaseWebDriverAction.execute(BaseWebDriverAction.java:177)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.WebDriverPlayer.runScript(WebDriverPlayer.java:312)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:100)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:89)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.JSDefaultAction.execute(JSDefaultAction.java:31)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeActionInternal(HybridPlayer.java:121)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeAction(HybridPlayer.java:112)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractWebPlayer.executeTestStep(AbstractWebPlayer.java:217)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestStep(PlaybackManager.java:347)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestSteps(PlaybackManager.java:250)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.DesktopBrowserExecution.executeSteps(DesktopBrowserExecution.java:122)</values>
		<values>com.ibm.rational.test.lt.execution.moeb.action.MoebStepBatchAction.execute(MoebStepBatchAction.java:300)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
		<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
		<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
		<values>java.lang.Thread.run(Thread.java:826)</values>
	</extendedDataElements>
	<sourceComponentId application="Test UI Web UI Tester" component="com.ibm.rational.test.rtw.webgui.execution" componentIdType="Functional test Execution" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.rtw.webgui.execution" componentType="Desktop Execution"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:08.155Z" globalInstanceId="A1EF443C7E6CA2B0C25DE53738343236" msg="RPXE0039W User [DefaultUserGroup][000001] experienced exception com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Playback of UI Action failed, &apos;Continuing&apos;&#xA;in Test Action:&#xA;&#x9;Enter value &apos;sachin.narang@sandhata.com&apos; in Edit text whose Label is Email or mobile number - www.netflix.com&#xA;&#x9;Netflix_WebUI2&#xA;&#x9;DefaultScenario&#xA;&#x9;[DefaultUserGroup][000001]&#xA;&#x9;DefaultUserGroup&#xA;&#x9;DefaultSchedule&#xA;&#x9;Engine&#xA;com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Playback of UI Action failed, &apos;Continuing&apos;&#xD;&#xA;&#x9;at test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:74)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xD;&#xA;&#x9;at java.lang.Thread.run(Thread.java:826)&#xD;&#xA;Caused by: com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Playback of UI Action failed&#xD;&#xA;&#x9;... 6 more&#xD;&#xA;" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>8</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:stackTrace" type="stringArray">
		<values>com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Playback of UI Action failed, &apos;Continuing&apos;</values>
		<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:74)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
		<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
		<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
		<values>java.lang.Thread.run(Thread.java:826)</values>
		<children name="Cause" type="stringArray">
			<values>com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Playback of UI Action failed</values>
			<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:74)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
			<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
			<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
			<values>java.lang.Thread.run(Thread.java:826)</values>
		</children>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:08.155Z" globalInstanceId="A1EF443C7E6CF0D0C25DE53738343236" msg="RPXE0039W User [DefaultUserGroup][000001] experienced exception com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Test verdict was set to fail, &apos;Continuing&apos;&#xA;in Test Action:&#xA;&#x9;Enter value &apos;sachin.narang@sandhata.com&apos; in Edit text whose Label is Email or mobile number - www.netflix.com&#xA;&#x9;Netflix_WebUI2&#xA;&#x9;DefaultScenario&#xA;&#x9;[DefaultUserGroup][000001]&#xA;&#x9;DefaultUserGroup&#xA;&#x9;DefaultSchedule&#xA;&#x9;Engine&#xA;com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Test verdict was set to fail, &apos;Continuing&apos;&#xD;&#xA;&#x9;at test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:66)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xD;&#xA;&#x9;at java.lang.Thread.run(Thread.java:826)&#xD;&#xA;Caused by: com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Test verdict was set to fail&#xD;&#xA;&#x9;... 6 more&#xD;&#xA;" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>9</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:stackTrace" type="stringArray">
		<values>com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Test verdict was set to fail, &apos;Continuing&apos;</values>
		<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:66)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
		<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
		<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
		<values>java.lang.Thread.run(Thread.java:826)</values>
		<children name="Cause" type="stringArray">
			<values>com.ibm.rational.test.lt.kernel.services.RPTContinueEvent: Test verdict was set to fail</values>
			<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:66)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
			<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
			<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
			<values>java.lang.Thread.run(Thread.java:826)</values>
		</children>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:12.630Z" globalInstanceId="A1EF443C811888D0C25DE53738343236" msg="HandleException {0}&#xA;org.openqa.selenium.NoSuchWindowException: no such window: target window already closed&#xA;from unknown error: web view not found&#xA;  (Session info: chrome=126.0.6478.127)&#xA;Build info: version: &apos;4.1.4&apos;, revision: &apos;535d840ee2&apos;&#xA;System info: host: &apos;STLININF0256&apos;, ip: &apos;192.168.1.7&apos;, os.name: &apos;Windows 11&apos;, os.arch: &apos;amd64&apos;, os.version: &apos;10.0&apos;, java.version: &apos;1.8.0_382&apos;&#xA;Driver info: org.openqa.selenium.chrome.ChromeDriver&#xA;Command: [2558454f5b9928e2e6593518bb4c72b5, executeScript {script=var isDesktopRun = true;&#xA;&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xD;&#xA; *  (C) Copyright HCL Technologies Ltd. 2017, 2021. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Recorder/Player version number&#xD;&#xA; */&#xD;&#xA;var RMOT_VERSION = &quot;10.2.3&quot;;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Touch events applied to all HTML5 elements.&#xD;&#xA; */&#xD;&#xA;var RMoTtouchEvents = [&#x9;&#x9;&quot;ontouchstart&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchend&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchmove&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchenter&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchleave&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchcancel&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;];&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * List of style properties we record&#xD;&#xA; */&#xD;&#xA;var RMoTstylesArray = [&quot;background-color&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;background-repeat&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;color&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-family&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-size&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-style&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-weight&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;line-height&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-bottom&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-left&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-right&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-top&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;opacity&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-bottom&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-left&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-right&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-top&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;text-align&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;text-decoration&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;visibility&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;z-index&quot;];&#xD;&#xA;&#xD;&#xA;var RMoTIgnoredAttrs = [&quot;data-changed&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;awmousedown&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;awmouseup&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;data-proxy-id&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;data-data-rendering-service-uid&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;xlink:href&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;d&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;points&quot;];&#xD;&#xA;&#x9;&#xD;&#xA;var RMoTeventPrefix = &quot;on&quot;;&#xD;&#xA;&#xD;&#xA;var RMoTclickEvent = &quot;onclick&quot;;&#xD;&#xA;var RMoTinputEvent = &quot;oninput&quot;;&#xD;&#xA;var RMoTchangeEvent = &quot;onchange&quot;;&#xD;&#xA;var RMoTstartEvent = &quot;onstartevent&quot;;&#xD;&#xA;&#xD;&#xA;var RMOT_SUCCESS = 1;&#xD;&#xA;var RMOT_INCONCLUSIVE = 2;&#xD;&#xA;var RMOT_FAILURE = 3;&#xD;&#xA;var RMOT_ERROR = 4;&#xD;&#xA;var RMOT_FATAL = 5;&#xD;&#xA;var RMOT_RECOVERY = 6;&#xD;&#xA;var RMOT_READ_ONLY_FAILURE = 7;&#xD;&#xA;&#xD;&#xA;var RMOT_GuidedHealing = false;&#xD;&#xA;&#xD;&#xA;var RMoTRectangleId = &quot;RMoTRect&quot;;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * JSON implementation if none available&#xD;&#xA; */&#xD;&#xA;if(!window.JSON){&#xD;&#xA;&#x9;window.JSON = {&#xD;&#xA;&#x9;&#x9;stringify: function (object) {&#xD;&#xA;&#x9;&#x9;&#x9;var t = typeof(object);&#xD;&#xA;&#x9;&#x9;&#x9;if (t != &quot;object&quot; || object === null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t == &quot;string&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;object = &apos;&quot;&apos; + object + &apos;&quot;&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return String(object);&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var n, v, json = [], isArray = (object &amp;&amp; object.constructor == Array);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (n in object) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;v = object[n];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t = typeof(v);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (t == &quot;string&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v = &apos;&quot;&apos; + v + &apos;&quot;&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (t == &quot;object&quot; &amp;&amp; v !== null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v = jSUtil.stringify(v);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;json.push((isArray ? &quot;&quot; : &apos;&quot;&apos; + n + &apos;&quot;:&apos;) + String(v));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return (isArray ? &quot;[&quot; : &quot;{&quot;) + String(json) + (isArray ? &quot;]&quot; : &quot;}&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;};&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;JSUtil = function(){&#xD;&#xA;&#x9;this.tagsIgnored = [&quot;option&quot;, &quot;head&quot;, &quot;script&quot;, &quot;link&quot;, &quot;noscript&quot;, &quot;style&quot;, &quot;meta&quot;, &quot;br&quot;, &quot;hr&quot;, &quot;line&quot;];&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;JSUtil.prototype={&#xD;&#xA;&#x9;&#x9;stringify:function(obj) {&#xD;&#xA;&#x9;&#x9;&#x9;const types = [String.prototype, Array.prototype];&#xD;&#xA;&#x9;&#x9;&#x9;for(let i = 0; i &lt; types.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;let t = types[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t.toJSON) {&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;t.originaltoJSON = t.toJSON;&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;delete t.toJSON;&#xD;&#xA;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;const jsonString = window.JSON.stringify(obj);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;for(let i = 0; i &lt; types.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;let t = types[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t.originaltoJSON) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.toJSON = t.originaltoJSON;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;delete t.originaltoJSON;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return jsonString;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getClickEvents:function() {&#xD;&#xA;&#x9;&#x9;&#x9;var clickEvents = [&quot;onclick&quot;,&quot;onmousedown&quot;,&quot;onmouseup&quot;,&quot;onfocus&quot;,&quot;onmouseover&quot;,&quot;ontap&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;if (this.isTouchEnabled()) { // Mobile only&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;clickEvents.push(&quot;ontouchstart&quot;, &quot;ontouchend&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return clickEvents;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getAlternateClickEvents:function() {" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>10</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:stackTrace" type="stringArray">
		<values>org.openqa.selenium.NoSuchWindowException: no such window: target window already closed&#xA;from unknown error: web view not found&#xA;  (Session info: chrome=126.0.6478.127)&#xA;Build info: version: &apos;4.1.4&apos;, revision: &apos;535d840ee2&apos;&#xA;System info: host: &apos;STLININF0256&apos;, ip: &apos;192.168.1.7&apos;, os.name: &apos;Windows 11&apos;, os.arch: &apos;amd64&apos;, os.version: &apos;10.0&apos;, java.version: &apos;1.8.0_382&apos;&#xA;Driver info: org.openqa.selenium.chrome.ChromeDriver&#xA;Command: [2558454f5b9928e2e6593518bb4c72b5, executeScript {script=var isDesktopRun = true;&#xA;&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xD;&#xA; *  (C) Copyright HCL Technologies Ltd. 2017, 2021. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Recorder/Player version number&#xD;&#xA; */&#xD;&#xA;var RMOT_VERSION = &quot;10.2.3&quot;;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Touch events applied to all</values>
		<values> HTML5 elements.&#xD;&#xA; */&#xD;&#xA;var RMoTtouchEvents = [&#x9;&#x9;&quot;ontouchstart&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchend&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchmove&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchenter&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchleave&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontouchcancel&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;];&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * List of style properties we record&#xD;&#xA; */&#xD;&#xA;var RMoTstylesArray = [&quot;background-color&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;background-repeat&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;color&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-family&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-size&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-style&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;font-weight&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;line-height&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-bottom&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-left&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-right&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;margin-top&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;opacity&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-bottom&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-left&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-right&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;padding-top&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;text-align&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;text-decoration&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;visibility&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;z-index&quot;];&#xD;&#xA;&#xD;&#xA;var RMoTIgnoredAttrs = [&quot;data-changed&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;awmousedown&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;awmouseup&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;data-proxy-id&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;data-data-rendering-service-uid&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;xlink:href&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;d&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;points&quot;];&#xD;&#xA;&#x9;&#xD;&#xA;var RMoTeventPrefix = &quot;on&quot;;&#xD;&#xA;&#xD;&#xA;var RMoTclickEvent = &quot;onclick&quot;;&#xD;&#xA;var RMoTinputEvent = &quot;oninput&quot;;&#xD;&#xA;var RMoTchan</values>
		<values>geEvent = &quot;onchange&quot;;&#xD;&#xA;var RMoTstartEvent = &quot;onstartevent&quot;;&#xD;&#xA;&#xD;&#xA;var RMOT_SUCCESS = 1;&#xD;&#xA;var RMOT_INCONCLUSIVE = 2;&#xD;&#xA;var RMOT_FAILURE = 3;&#xD;&#xA;var RMOT_ERROR = 4;&#xD;&#xA;var RMOT_FATAL = 5;&#xD;&#xA;var RMOT_RECOVERY = 6;&#xD;&#xA;var RMOT_READ_ONLY_FAILURE = 7;&#xD;&#xA;&#xD;&#xA;var RMOT_GuidedHealing = false;&#xD;&#xA;&#xD;&#xA;var RMoTRectangleId = &quot;RMoTRect&quot;;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * JSON implementation if none available&#xD;&#xA; */&#xD;&#xA;if(!window.JSON){&#xD;&#xA;&#x9;window.JSON = {&#xD;&#xA;&#x9;&#x9;stringify: function (object) {&#xD;&#xA;&#x9;&#x9;&#x9;var t = typeof(object);&#xD;&#xA;&#x9;&#x9;&#x9;if (t != &quot;object&quot; || object === null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t == &quot;string&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;object = &apos;&quot;&apos; + object + &apos;&quot;&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return String(object);&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var n, v, json = [], isArray = (object &amp;&amp; object.constructor == Array);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (n in object) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;v = object[n];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t = typeof(v);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (t == &quot;string&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v = &apos;&quot;&apos; + v + &apos;&quot;&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (t == &quot;object&quot; &amp;&amp; v !== null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;v = jSUtil.stringify(v);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;json.push((isArray ? &quot;&quot; : &apos;&quot;&apos; + n + &apos;&quot;:&apos;) + String(v));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return (isArray ? &quot;[&quot; : &quot;{&quot;) + String(json) + (isArr</values>
		<values>ay ? &quot;]&quot; : &quot;}&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;};&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;JSUtil = function(){&#xD;&#xA;&#x9;this.tagsIgnored = [&quot;option&quot;, &quot;head&quot;, &quot;script&quot;, &quot;link&quot;, &quot;noscript&quot;, &quot;style&quot;, &quot;meta&quot;, &quot;br&quot;, &quot;hr&quot;, &quot;line&quot;];&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;JSUtil.prototype={&#xD;&#xA;&#x9;&#x9;stringify:function(obj) {&#xD;&#xA;&#x9;&#x9;&#x9;const types = [String.prototype, Array.prototype];&#xD;&#xA;&#x9;&#x9;&#x9;for(let i = 0; i &lt; types.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;let t = types[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t.toJSON) {&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;t.originaltoJSON = t.toJSON;&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;delete t.toJSON;&#xD;&#xA;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;const jsonString = window.JSON.stringify(obj);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;for(let i = 0; i &lt; types.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;let t = types[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (t.originaltoJSON) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.toJSON = t.originaltoJSON;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;delete t.originaltoJSON;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return jsonString;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getClickEvents:function() {&#xD;&#xA;&#x9;&#x9;&#x9;var clickEvents = [&quot;onclick&quot;,&quot;onmousedown&quot;,&quot;onmouseup&quot;,&quot;onfocus&quot;,&quot;onmouseover&quot;,&quot;ontap&quot;];&#xD;&#xA;&#x9;&#x9;&#x9;if (this.isTouchEnabled()) { // Mobile only&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;clickEvents.push(&quot;ontouchstart&quot;, &quot;ontouchend&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return clickEvents;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getAlternateClickEvents:function() {</values>
		<values>&#xD;&#xA;&#x9;&#x9;&#x9;var clickEvents = this.getClickEvents();&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = clickEvents.length - 1; i &gt;= 0; i--) {&#xD;&#xA;&#x9;&#x9;&#x9;    if(clickEvents[i] === RMOT_TRIGGER_EVENT || clickEvents[i] === RMOT_DOWN_EVENT) {&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;clickEvents.splice(i, 1); // remove triggered events from the list&#xD;&#xA;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return clickEvents;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isDragEvent: function(event, eventName, triggeredEvent) {&#xD;&#xA;&#x9;&#x9;&#x9;var rmotDownEvent = jsUtil.getMainDocument().rmotDownEvent;&#xD;&#xA;&#x9;&#x9;&#x9;if (event &amp;&amp; eventName == triggeredEvent &amp;&amp; rmotDownEvent) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Compare event&apos;s coordinates to the previous down event&apos;s ones&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var upEvent = { x: event.clientX || event.changedTouches[0].clientX, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;y: event.clientY || event.changedTouches[0].clientY };&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var deviation = 5; // pixels&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (Math.abs(rmotDownEvent.x - upEvent.x) &gt; deviation&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| Math.abs(rmotDownEvent.y - upEvent.y) &gt; deviation) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Drag/Scroll detected&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isTrusted: function(event, eventName) {&#xD;&#xA;&#x9;&#x9;&#x9;var trusted = </values>
		<values>true;&#xD;&#xA;&#x9;&#x9;&#x9;if((eventName == RMOT_TRIGGER_EVENT)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; (event.pageX == undefined || event.pageY == undefined &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| event.clientX &lt;= 0 || event.clientY &lt;= 0) ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;trusted = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!jsUtil.isDesktop()) { // Mobile only&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var touch = event.changedTouches[0];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (touch &amp;&amp; touch.clientX &gt; 0 &amp;&amp; touch.clientY &gt; 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trusted = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return trusted;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Get browser dimensions, compatible with all browsers&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getWindowWidth:function(element) {//RMoTgetWindowWidth&#xD;&#xA;&#x9;&#x9;&#x9;try { return element.ownerDocument.defaultView.innerWidth; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try { return window.innerWidth; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.documentElement.clientWidth; } catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.body.clientWidth; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getWindowHeight:function(element) {//RMoTgetWindowWidth&#xD;&#xA;&#x9;&#x9;&#x9;try { return element.ownerDocument.defaultView.innerHeight; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try { return win</values>
		<values>dow.innerHeight; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.documentElement.clientHeight; } catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.body.clientHeight; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getScrollLeft:function(element) {//RMoTgetScrollLeft&#xD;&#xA;&#x9;&#x9;&#x9;try { return element.ownerDocument.documentElement.scrollLeft; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try { return window.pageXOffset; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.documentElement.scrollLeft; } catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.body.scrollLeft; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getScrollTop:function(element) {//RMoTgetScrollTop&#xD;&#xA;&#x9;&#x9;&#x9;try { return element.ownerDocument.documentElement.scrollTop; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try { return window.pageYOffset; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.documentElement.scrollTop; } catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try { return document.body.scrollTop; } catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;//Required functions for Web browser on Desktop&#xD;&#xA;&#x9;&#x9;/*getDocLe</values>
		<values>ft:function() {//RMoTgetDocLeft&#xD;&#xA;&#x9;&#x9;&#x9;return window.mozInnerScreenX || window.screenLeft || window.screenX || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getDocTop:function () {//RMoTgetDocTop&#xD;&#xA;&#x9;&#x9;&#x9;return window.mozInnerScreenY || window.screenTop || window.screenY || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getDocRight:function() {//RMoTgetDocRight&#xD;&#xA;&#x9;&#x9;&#x9;return this.getDocLeft() + this.getWindowWidth();&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getDocBottom:function () {//RMoTgetDocBottom&#xD;&#xA;&#x9;&#x9;&#x9;return this.getDocTop() + this.getWindowHeight();&#xD;&#xA;&#x9;&#x9;},*/&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getMainDocument:function(){&#xD;&#xA;&#x9;&#x9;&#x9;var mainDocument = document;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var frameElement = document.defaultView.frameElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while(frameElement != null){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mainDocument = frameElement.ownerDocument;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;frameElement = frameElement.ownerDocument.defaultView.frameElement;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;} catch(e) {}&#xD;&#xA;&#x9;&#x9;&#x9;return mainDocument;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getMainWindow:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return this.getMainDocument().defaultView;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getSnapShotRect:function () {//RMoTgetSnapShotRect&#xD;&#xA;&#x9;&#x9;&#x9;var mainDocument = this.getMainDocument();&#xD;&#xA;&#x9;&#x9;&#x9;return &quot;left:</values>
		<values>&quot; + BROWSER_ZOOM_FACT*this.getMainDocLeft(mainDocument.defaultView)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;;top:&quot;  + BROWSER_ZOOM_FACT*this.getMainDocTop(mainDocument.defaultView)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+&quot;;right:&quot; + BROWSER_ZOOM_FACT*this.getMainDocRight(mainDocument)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+ &quot;;bottom:&quot; + BROWSER_ZOOM_FACT*this.getMainDocBottom(mainDocument)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;+&quot;;&quot;;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Required functions for Web browser on Desktop&#xD;&#xA;&#x9;&#x9;getMainDocLeft:function(mainWindow) {//RMoTgetDocLeft&#xD;&#xA;&#x9;&#x9;&#x9;return mainWindow.mozInnerScreenX || mainWindow.screenLeft || mainWindow.screenX || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getMainDocTop:function (mainWindow) {//RMoTgetDocTop&#xD;&#xA;&#x9;&#x9;&#x9;return mainWindow.mozInnerScreenY || mainWindow.screenTop || mainWindow.screenY || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getMainDocRight:function(mainDocument) {//RMoTgetDocRight&#xD;&#xA;&#x9;&#x9;&#x9;return this.getMainDocLeft(mainDocument.defaultView) + this.getMainWindowWidth(mainDocument);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getMainDocBottom:function (mainDocument) {//RMoTgetDocBottom&#xD;&#xA;&#x9;&#x9;&#x9;return this.getMainDocTop(mainDocument.defaultView) + this.getMainWindowHeight(mainDocument);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;</values>
		<values>getMainWindowWidth:function(mainDocument) {//RMoTgetWindowWidth&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return mainDocument.defaultView.innerWidth || mainDocument.documentElement.clientWidth || mainDocument.body.clientWidth || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getMainWindowHeight:function(mainDocument) {//RMoTgetWindowHeight&#xD;&#xA;&#x9;&#x9;&#x9;return mainDocument.defaultView.innerHeight || mainDocument.documentElement.clientHeight || mainDocument.body.clientHeight || 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;//Trim the text for leading and trailing spaces&#xD;&#xA;&#x9;&#x9;getTrimText: function (element) {&#xD;&#xA;&#x9;&#x9;&#x9;var textContent = element.textContent;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(!textContent){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;textContent = element.innerText;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else{&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Remove ignored tags content&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;const tags = element.querySelectorAll(jsUtil.tagsIgnored);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for(let i = 0; i &lt; tags.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;textContent = textContent.replace(tags[i].textContent, &apos;&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} catch (e) {}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(textContent){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;textContent = textContent.trim();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return (textContent) ;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getInnerText: function (e</values>
		<values>lement) {&#xD;&#xA;&#x9;&#x9;&#x9;var textContent = element.innerText;&#xD;&#xA;&#x9;&#x9;&#x9;if(textContent){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return textContent.trim();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;//For few elements, element.textContent would contain the value. Hence when the element.innerText is empty, return the getTrimText()&#xD;&#xA;&#x9;&#x9;&#x9;return jsUtil.getTrimText(element);&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Check if the nodes textcontent is all whitepsace or special chars&#xD;&#xA;&#x9;&#x9;is_all_ws: function ( nod )&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;  // Use ECMA-262 Edition 3 String and RegExp features&#xD;&#xA;&#x9;&#x9;  return !(/[^\t\n\r ]/.test(nod.textContent)) || !(/[a-z0-9]+/i.test(nod.textContent));&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;//Check if language is RTL( right to left)&#xD;&#xA;&#x9;&#x9;isRTLLanguage: function () {&#xD;&#xA;&#x9;&#x9;&#x9;var lang = document.documentElement.lang;&#xD;&#xA;&#x9;&#x9;&#x9;if( lang == undefined || lang ==&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var meta = document.querySelector(&quot;meta[http-equiv=&apos;content-language&apos;]&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (meta)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lang = meta.content;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;switch(lang){&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;ar&quot; :&#x9;//Arabic&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;he&quot; : //Hebrew&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;iw&quot; : //Hebrew&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;ur&quot; : //Urdu&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;default:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false</values>
		<values>;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;trim: function (str) {&#xD;&#xA;&#x9;&#x9;&#x9;var val = (str &amp;&amp; (typeof(str) == &apos;string&apos;)) ? str : &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;if (val.length &gt; 1) val = val.replace(/\s/g, &apos; &apos;).replace(/ +/g, &apos; &apos;).replace(/^ /g, &apos;&apos;).replace(/ $/g, &apos;&apos;).replace(/&quot;/g, &apos;\\&quot;&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;return val;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;trimRegExp: function (str) {&#xD;&#xA;&#x9;&#x9;&#x9;var val = (str &amp;&amp; (typeof(str) == &apos;string&apos;)) ? str : &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;if (val.length &gt; 1) val = val.replace(/\[/g, &apos;\\[&apos;).replace(/\]/g, &apos;\\]&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;return val;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;trimAndFormat: function (type, property) {&#xD;&#xA;&#x9;&#x9;&#x9;var val;&#xD;&#xA;&#x9;&#x9;&#x9;switch (type) {&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TString&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TLocalizedString&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;val = this.trim((property != null) ? (property + &quot;&quot;) : &quot;&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TInteger&quot;: &#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TFloat&quot;: &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// get rid of &apos;px&apos; at the end of numeric values&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;val = property;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (typeof(property.replace) == &apos;function&apos;) val = property.replace(/px$/, &apos;&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TBoolean&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;val = property.toString();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;case &quot;TColor&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;val = this.getColor(property);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;defaul</values>
		<values>t :&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;val = (property != null) ? property : &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return val;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Convert java regular expression to JS format&#xD;&#xA;&#x9;&#x9;convertRegex: function(jRegex) {&#xD;&#xA;&#x9;&#x9;&#x9;const jsModifiers = [&apos;i&apos;, &apos;m&apos;]; // JS supported modifiers&#xD;&#xA;&#x9;&#x9;&#x9;let modifiers = &apos;g&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;// Java modifiers?&#xD;&#xA;&#x9;&#x9;&#x9;const jModifiersRegex = new RegExp(&apos;\\(\\?.*\\)&apos;, &apos;g&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;const match = jRegex.match(jModifiersRegex);&#xD;&#xA;&#x9;&#x9;&#x9;if (match) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (let i = 0; i &lt; jsModifiers.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;const m = jsModifiers[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (match[0].indexOf(m) &gt;= 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;modifiers += m;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;// TP-76025: replaceAll not supported on IE. replace is sufficient in that case since jModifiersRegex includes &apos;g&apos;&#xD;&#xA;&#x9;&#x9;&#x9;return new RegExp(jRegex.replace(jModifiersRegex, &apos;&apos;), modifiers);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;applySimpleOperator: function (p1, p2, op) {&#xD;&#xA;&#x9;&#x9;&#x9;var ret = null;&#xD;&#xA;&#x9;&#x9;&#x9;switch (op) {&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TEquals&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 == p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TNotEquals&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 != p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TGreater&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 &gt; </values>
		<values>p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TGreaterOrEquals&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 &gt;= p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TLess&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 &lt; p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TLessOrEquals&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (p1 &lt;= p2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TContains&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;.*&quot; + this.trimRegExp(p2) + &quot;.*&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TDoNotContains&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;.*&quot; + this.trimRegExp(p2) + &quot;.*&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = ( ! reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TEndWIth&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;.*&quot; + this.trimRegExp(p2) + &quot;$&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TDoNotEndWith&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;.*&quot; + this.trimRegExp(p2) + &quot;$&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = ( ! reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TStartWith&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;^&quot; + this.trimRegExp(p2) + &quot;.*&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = (reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TDoNotStartWith&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var reg=new RegExp(&quot;^&quot; + this.trimRegExp(p2) + &quot;.*&quot;, &quot;g&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = ( ! reg.test(p1));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TMatchRegEx&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret = this.co</values>
		<values>nvertRegex(p2).test(p1);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;case &apos;TDoNotMatchRegEx&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret = !this.convertRegex(p2).test(p1);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;default:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return ret;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * &#xD;&#xA;&#x9;&#x9; * @param element&#xD;&#xA;&#x9;&#x9; * @param rect&#xD;&#xA;&#x9;&#x9; * @returns {Boolean} Element is inside the viewport or not&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;isInViewPort:function (element, rect) {//RMoTisInViewPort&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if ( rect.right &lt; 0  // element on the left&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| rect.left &gt; this.getWindowWidth(element)  // element on the right&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| rect.bottom &lt; 0  // element above&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| rect.top &gt; this.getWindowHeight(element) )  // element below&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * &#xD;&#xA;&#x9;&#x9; * @param element&#xD;&#xA;&#x9;&#x9; * @param rect&#xD;&#xA;&#x9;&#x9; * @returns {Boolean} Element is on top, and thus visible or not&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;isOnTop:function (element) {//RMoTisOnTop&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;/* Must take into account the case where the element is bigger than the vi</values>
		<values>ewport&#xD;&#xA;&#x9;&#x9;&#x9; * &#x9;&#x9;a---------------b&#xD;&#xA;&#x9;&#x9;&#x9; *&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;|&#xD;&#xA;&#x9;&#x9;&#x9; *&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;|&#xD;&#xA;&#x9;&#x9;&#x9; *&#x9;&#x9;c---------------d&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var mainDoc = element.ownerDocument;&#xD;&#xA;&#x9;&#x9;&#x9;var rect = element.getBoundingClientRect();&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var a = { &#x9;relativeLeft: Math.max(rect.left, 0), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relativeTop: Math.max(rect.top, 0) };&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var b = {&#x9;relativeLeft: Math.min(rect.right - 1, this.getWindowWidth(element)  - 1), &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relativeTop: a.relativeTop };&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var c = {&#x9;relativeLeft: a.relativeLeft, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relativeTop:  Math.min(rect.bottom - 1, this.getWindowHeight(element) - 1) };&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var d = {&#x9;relativeLeft: b.relativeLeft, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relativeTop:  c.relativeTop };&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if ( ! ( mainDoc.elementFromPoint( a.relativeLeft, a.relativeTop ) === element  // upper left&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( b.relativeLeft, b.relativeTop ) === element  // upper right&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( c.relativeLeft, c.relativeTop ) === element  // lower left&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( d.relativeLeft, d.relativeTop ) === element ) )  // low</values>
		<values>er right&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// weird behavior in Edge browser, elementFromPoint sometimes returns the nearby object&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// so we check 1 pixel inside&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ( ! ( mainDoc.elementFromPoint( a.relativeLeft+1, a.relativeTop+1 ) === element&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( b.relativeLeft-1, b.relativeTop+1 ) === element&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( c.relativeLeft+1, c.relativeTop-1 ) === element&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| mainDoc.elementFromPoint( d.relativeLeft-1, d.relativeTop+1 ) === element ) )&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Then check the center : Last chance&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var center = {&#x9;relativeLeft: (b.relativeLeft - a.relativeLeft)/2 + a.relativeLeft, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relativeTop: (c.relativeTop - a.relativeTop)/2 + a.relativeTop };&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var topElement = mainDoc.elementFromPoint(center.relativeLeft, center.relativeTop);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( !(topElement === element) ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;getXPath:function (node) {//RMoTgetXPath (only used for debugging purposes)&#xD;&#xA;&#x9;&#x9;&#x9;var fullPath = [];&#x9;&#xD;&#xA;&#x9;</values>
		<values>&#x9;&#x9;var el = node;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;do {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var index = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (el.parentNode &amp;&amp; !el.id) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var siblings = el.parentNode.childNodes;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; siblings.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var sibling = siblings[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sibling === el)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (sibling.nodeType === 1 &amp;&amp; sibling.tagName === el.tagName)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;index++;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(el.nodeType != window.Node.DOCUMENT_NODE &amp;&amp; el.nodeType != window.Node.DOCUMENT_FRAGMENT_NODE) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let name = el.nodeName.toLowerCase();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (name === &apos;svg&apos;) return null;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;const nsRegex = new RegExp(&apos;.*:.*&apos;, &apos;g&apos;); // namespace&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (name.match(nsRegex)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;name = &apos;*[name()=\&apos;&apos;+ name +&apos;\&apos;]&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fullPath.unshift(name + (el.id ? &apos;[@id=\&apos;&apos; + el.id + &apos;\&apos;]&apos; : &apos;&apos;) + (index &gt; 1 ? &apos;[&apos; + index + &apos;]&apos; : &apos;&apos;));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;} while (!el.id &amp;&amp; ((name != &apos;body&apos;) &amp;&amp; el.parentNode &amp;&amp; (el = el.parentNode)));&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return &apos;//&apos; + fullPath.join(&apos;/&apos;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;isEvent:function (attributeName) {//RMoTisEvent&#xD;&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (attributeName.indexOf(RMoTeventPrefix) == 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Attach the ownerDocument (potentially iframe element) coordinates to the contentDocument&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;setOwnerDocumentCoordinates:function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;var ownerRect = this.getOwnerDocumentCoordinates(element);&#xD;&#xA;&#x9;&#x9;&#x9;var rect = element.getBoundingClientRect();&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var borderTopWidth = 0;&#xD;&#xA;&#x9;&#x9;&#x9;var borderLeftWidth = 0;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;borderTopWidth = parseInt(getComputedStyle(element).borderTopWidth.slice(0, -2));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;borderLeftWidth = parseInt(getComputedStyle(element).borderLeftWidth.slice(0, -2));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (err) {&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var innerCoords = {};&#xD;&#xA;&#x9;&#x9;&#x9;innerCoords.left = rect.left + ownerRect.left + borderLeftWidth;&#xD;&#xA;&#x9;&#x9;&#x9;innerCoords.top = rect.top + ownerRect.top + borderTopWidth;&#xD;&#xA;&#x9;&#x9;&#x9;innerCoords.right = rect.left + ownerRect.right + borderLeftWidth;&#xD;&#xA;&#x9;&#x9;&#x9;innerCoords.bottom = rect.top + ownerRect.bottom + borderTopWidth;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (element.contentDocument) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;element.co</values>
		<values>ntentDocument.innerCoords = innerCoords;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Read the attached coordinates of the ownerDocument&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getOwnerDocumentCoordinates:function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;var ownerDocument = element.ownerDocument;&#xD;&#xA;&#x9;&#x9;&#x9;if (ownerDocument &amp;&amp; ownerDocument.innerCoords) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return ownerDocument.innerCoords;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ownerDocument.defaultView.parent.document;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Cross-origin exception: Frame offset can not be retrieved from its parent&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Hence using the one computed by the message mechanism&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return {left: RMoTFrameOffsetLeft,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;top: RMoTFrameOffsetTop,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;right: RMoTFrameOffsetLeft,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bottom: RMoTFrameOffsetTop};&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return {left: 0,top: 0,right: 0,bottom: 0};&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9; * Keep this function for compatibility reasons&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getCoordinatesArray:function(proxy) {&#xD;&#xA;&#x9;&#x9;&#x9;var rect = proxy.getCoordinates();&#xD;&#xA;&#x9;&#x9;&#x9;var ratio = window.devicePixelRatio ? window.devicePixelRatio : 1;&#xD;&#xA;&#x9;&#x9;&#x9;if(typeof(BROWSER_ZOOM_FACT)==&apos;undefined&apos;</values>
		<values>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ratio = BROWSER_ZOOM_FACT;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return &quot;left:&quot; + (rect.left * ratio)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;;top:&quot; + (rect.top * ratio)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;;right:&quot; + (rect.right * ratio)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;;bottom:&quot; + (rect.bottom * ratio)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;+ &quot;;&quot;;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getFrames:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return document.documentElement.querySelectorAll(frameElements);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;containsFrames:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return this.getFrames().length !== 0;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;requestFrameOffset:function(win) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (win !== top) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var message = this.stringify({ msg : &apos;requestFrameOffset&apos; });&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;win.parent.postMessage(message, &apos;*&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Waiting to be at the top window before sending the coordinates&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;jsUtil.sendFrameOffset();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (err) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(err);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;sendFrameOffset:function() {&#xD;&#xA;&#x9;&#x9;&#x9;// Send their own coordinates to the children frames&#xD;&#xA;&#x9;&#x9;&#x9;var frames = this.getFrames();&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; frames.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var f = frames[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var rect = f.getBoundingClientRe</values>
		<values>ct();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var message = this.stringify({&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;msg : &apos;sendFrameOffset&apos;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left: rect.left + f.clientLeft + RMoTFrameOffsetLeft,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top: rect.top + f.clientTop + RMoTFrameOffsetTop&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;});&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;f.contentWindow.postMessage(message, &apos;*&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;onFrameOffsetMessage:function(e) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var data = JSON.parse(e.data);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (data.msg == &apos;requestFrameOffset&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;jsUtil.requestFrameOffset(e.source);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else if (data.msg == &apos;sendFrameOffset&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RMoTFrameOffsetLeft = data.left;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;RMoTFrameOffsetTop = data.top;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;jsUtil.sendFrameOffset();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;} catch(e) { /* NOPE */ }&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getColor:function(color) {&#xD;&#xA;&#x9;&#x9;&#x9;var regexp = /\d+/g;&#xD;&#xA;&#x9;&#x9;&#x9;var red = parseInt(regexp.exec(color)[0], 10).toString(16);&#xD;&#xA;&#x9;&#x9;&#x9;var green = parseInt(regexp.exec(color)[0], 10).toString(16);&#xD;&#xA;&#x9;&#x9;&#x9;var blue = parseInt(regexp.exec(color)[0], 10).toString(16);&#xD;&#xA;&#x9;&#x9;&#x9;var alpha;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;alpha = parseInt(regexp.exec(color)[0], 10).toString(16);&#xD;&#xA;&#x9;&#x9;&#x9;} catch(e) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;alpha = parseInt(&apos;255&apos;</values>
		<values>, 10).toString(16);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;var newColor = &quot;00&quot;.substr(0, 2 - red.length) + red +&#xD;&#xA;&#x9;&#x9;&#x9;&quot;00&quot;.substr(0, 2 - green.length) + green + &#xD;&#xA;&#x9;&#x9;&#x9;&quot;00&quot;.substr(0, 2 - blue.length) + blue + &#xD;&#xA;&#x9;&#x9;&#x9;&quot;00&quot;.substr(0, 2 - alpha.length) + alpha;&#xD;&#xA;&#x9;&#x9;&#x9;return newColor.toUpperCase();&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getComputedStyle: function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;   &#xD;&#xA;&#x9;&#x9;&#x9;var computedStyles = &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (window.getComputedStyle) {&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; RMoTstylesArray.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var prop = RMoTstylesArray[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var ret = jsUtil.getMainWindow().getComputedStyle(element);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (ret != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;computedStyles += prop + &quot;:&quot; + ret.getPropertyValue(prop) + &quot;;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return computedStyles;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// DOM element cloner&#xD;&#xA;&#x9;&#x9;cloneElement: function(element, visible) {&#xD;&#xA;&#x9;&#x9;&#x9;var clone = {};&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// Add attributes to the clone element&#xD;&#xA;&#x9;&#x9;&#x9;if (element.attributes) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for ( var i=0; i &lt; element.attributes.length; i++ ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var attr = element.attributes[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (attr != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var</values>
		<values> attrValue = element.attributes.item(i).value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var attrName = element.attributes.item(i).name;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (RMoTIgnoredAttrs.indexOf(attrName) &gt;= 0) continue;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (attrValue &amp;&amp; !this.isEvent(attrName) &amp;&amp; attrName!=&quot;style&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clone[attrName] = attrValue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;const proxy = domainManager.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (visible &amp;&amp; element.nodeType &amp;&amp; element.nodeType == window.Node.ELEMENT_NODE&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; proxy &amp;&amp; proxy.proxyClass !== &apos;HtmlSvgProxy&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;clone.Style$array$ = this.getComputedStyle(element);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;return clone;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Attribute copier&#xD;&#xA;&#x9;&#x9;copyIfDefined: function(element, clone, attrNames) {&#xD;&#xA;&#x9;&#x9;&#x9;for (var i in attrNames) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var attrName = attrNames[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var attrValue = element.getAttribute &amp;&amp; element.getAttribute(attrName);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (attrValue) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clone[attrName] = attrValue;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if (element[attrName]) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clone[attrName] = element[attrName];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getAttributeValue:function(element, attrName)</values>
		<values>{&#xD;&#xA;&#x9;&#x9;&#x9;var attrValue = element.getAttribute &amp;&amp; element.getAttribute(attrName);&#xD;&#xA;&#x9;&#x9;&#x9;if (!attrValue) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(element[attrName]) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;attrValue = element[attrName];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return attrValue;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;parse:function (jsonString) {//RMoTparse&#xD;&#xA;&#x9;&#x9;&#x9;// rmotJSInterface.log(&quot;JSONSTRING: &quot;+jsonString);&#xD;&#xA;&#x9;&#x9;&#x9;return eval(&quot;(function(){return &quot; + jsonString + &quot;;})()&quot;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;startsWith:function (str, prefix) {&#xD;&#xA;&#x9;&#x9;    return str.substring(0, prefix.length) === prefix;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;endsWith:function (str, suffix) {&#xD;&#xA;&#x9;&#x9;    return str.indexOf(suffix, str.length - suffix.length) !== -1;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;contains:function(str, key) {&#xD;&#xA;&#x9;&#x9;&#x9;return str.indexOf &amp;&amp; str.indexOf( key ) !== -1;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * @returns The element whose attribute is equal to value&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getElementByAttribute:function(attr, values, root) {&#xD;&#xA;&#x9;&#x9;&#x9;root = root || document.body;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (root.hasAttribute(attr) &amp;&amp; values.indexOf(root.getAttribute(attr)) &gt;=0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return root;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = root.children.length; i--; )</values>
		<values> {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;element = this.getElementByAttribute(attr, values, root.children[i]);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (element) return element;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;findElementAll: function(tagName,attrName,attrValue){&#xD;&#xA;&#x9;&#x9;&#x9;var results =[];&#xD;&#xA;&#x9;&#x9;&#x9;if(attrValue){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;results = document.querySelectorAll(tagName+&quot;[&quot;+attrName+&quot;=&apos;&quot;+attrValue+&quot;&apos;]&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return results;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;findElementsInOwnerDoc: function(element,tagName,attrName,attrValue){&#xD;&#xA;&#x9;&#x9;&#x9;var results =[];&#xD;&#xA;&#x9;&#x9;&#x9;if(attrValue){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(element.ownerDocument){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;results = element.ownerDocument.querySelectorAll(tagName+&quot;[&quot;+attrName+&quot;=&apos;&quot;+attrValue+&quot;&apos;]&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return results;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isTouchEnabled:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return !this.isDesktop() &amp;&amp; ((&apos;ontouchstart&apos; in window) || window.DocumentTouch &amp;&amp; document instanceof DocumentTouch);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Returns true when recording is enabled&#xD;&#xA;&#x9;&#x9;isRecordingMode:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return !(typeof(WebGuiRecorder)==&apos;undefined&apos;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isDesktop:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return (typeof(isDesktopRun) !== &apos;undefine</values>
		<values>d&apos; &amp;&amp; isDesktopRun == true);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isDocReady:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return document.readyState === &apos;complete&apos;;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isRunningInsideIEBrowser:function(){&#xD;&#xA;&#x9;&#x9;&#x9;var bRunningInsideIE = false;&#xD;&#xA;&#x9;&#x9;&#x9;if(this.isDesktop()){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var navAgent = navigator.userAgent;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ( (navAgent.indexOf(&quot;MSIE&quot;)!=-1) || (navAgent.indexOf(&quot;Trident&quot;)!=-1) ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bRunningInsideIE = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return bRunningInsideIE;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Returns a string with Dojo and JQuery versions if one of the framework is loaded. Internal use only.&#xD;&#xA;&#x9;&#x9;getVersions:function() {&#xD;&#xA;&#x9;&#x9;&#x9;var _version = &apos;&apos;;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; domainManager.domains.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var domainObj = domainManager.domains[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var version = domainObj.getDomainVersion();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (version) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;_version += &apos; &apos; + domainObj.getDomainName() + &apos;: &apos; + version;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return _version.substring(1, _version.length);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;escapeCSS : function(str) {&#xD;&#xA;&#x9;&#x9;&#x9;str = str || &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;var len = str.length, i = 0, newStr = &apos;&apos;, ch, newChar;&#xD;&#xA;&#x9;</values>
		<values>&#x9;&#x9;while (i &lt; len) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ch = str.charAt(i);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;newChar = ch;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;uCode = ch.charCodeAt();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (/[ !&quot;#$%&amp;&apos;()*+,./:;&lt;=&gt;?@\[\\\]^`{|}~]/.test(ch)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newChar = &apos;\\&apos; + ch;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else if (/[\t\n\v\f\r]/.test(ch)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newChar = &apos;\\&apos; + uCode.toString(16).toUpperCase() + &apos; &apos;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;newStr += newChar;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;i++;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;var firstChar = str.charAt(0);&#xD;&#xA;&#x9;&#x9;&#x9;if (/\d/.test(firstChar)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;newStr = &apos;\\&apos; + firstChar.charCodeAt().toString(16) + &apos; &apos; + newStr.slice(1);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return newStr;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getBrowserCompatibilityDetails: function() {&#xD;&#xA;&#x9;&#x9;&#x9;var ret = {userAgent: &quot;&quot;, status: true, name: &quot;&quot;, version: 1, documentMode:&quot;&quot;, compatMode: &quot;Standards&quot;, tracemode: true, pixelRatio: 1};&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var navAgent = navigator.userAgent;&#xD;&#xA;&#x9;&#x9;&#x9;ret.userAgent = navAgent;&#xD;&#xA;&#x9;&#x9;&#x9;var Version;&#xD;&#xA;&#x9;&#x9;&#x9;var platform = navigator.platform;&#xD;&#xA;&#x9;&#x9;&#x9;if (!this.isDesktop()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ((Version = navAgent.indexOf(&quot;Android&quot;))!=-1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Android&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = parseFl</values>
		<values>oat(navAgent.substring(Version+8));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;iOS&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = /OS .[0-9]+_[0-9]+/.exec(navAgent)[0];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} catch(e) {}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.pixelRatio = window.devicePixelRatio;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else if ((Version = navAgent.indexOf(&quot;MSIE&quot;))!=-1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Microsoft Internet Explorer&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.documentMode = parseFloat(navAgent.substring(Version+5));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.version = ret.documentMode;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ((Version = navAgent.indexOf(&quot;Trident&quot;))!=-1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(navAgent.substring(Version+8)) + 4;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(ret.version == 9)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ret.tracemode = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(ret.documentMode &lt; 9) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.status = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.tracemode = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if (document.compatMode!==&apos;CSS1Compat&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.status = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.tracemode = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.compatMode = &quot;Quircks&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BROWSER_ZOOM_FACT = screen.deviceXDPI/screen.logicalXDPI;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} catch (e) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;</values>
		<values>&#x9;BROWSER_ZOOM_FACT = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else if ((Version = navAgent.indexOf(&quot;Trident&quot;))!=-1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Microsoft Internet explorer&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ((verOffset=navAgent.indexOf(&quot;rv:&quot;))!=-1)  {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(navAgent.substring(verOffset+3));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else if (document.compatMode!==&apos;CSS1Compat&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.status = false&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.compatMode = &quot;Quircks&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BROWSER_ZOOM_FACT = screen.deviceXDPI/screen.logicalXDPI;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} catch (e) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BROWSER_ZOOM_FACT = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;// Do not rely on the user Agent as you can emulate an Apple device&#xD;&#xA;&#x9;&#x9;&#x9;else if (typeof window.chrome !== &quot;undefined&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Chrome&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// In Chrome, the true version is after &quot;Chrome&quot; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(navAgent.substring(navAgent.indexOf(&quot;Chrome&quot;) + 7));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BROWSER_ZOOM_FACT = window.devicePixelRatio;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (/Mobile/.test(navAgent) &amp;&amp; platform === &quot;Win32&quot;) { // Device mode on W</values>
		<values>indows&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.pixelRatio = window.devicePixelRatio * window.innerWidth / window.outerWidth;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;else if (typeof window.safari !== &quot;undefined&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Safari&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// In Safari, the true version is after &quot;Safari&quot; or after &quot;Version&quot; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Version = navAgent.substring(navAgent.indexOf(&quot;Safari&quot;)+7);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ((verOffset=navAgent.indexOf(&quot;Version&quot;))!=-1) &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(navAgent.substring(verOffset+8));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(Version);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// for retina displays its 2, otherwise it is 1&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BROWSER_ZOOM_FACT = window.devicePixelRatio;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!/Mobile/.test(navAgent)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.pixelRatio = window.innerWidth / window.outerWidth;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else if (typeof InstallTrigger !== &apos;undefined&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;postXHRThroughCustomEventFlag = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.name = &quot;Firefox&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// In Firefox, the true version is after &quot;Firefox&quot; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.version = parseFloat(navAgent.substring(navAgent.indexOf(&quot;Firefox&quot;)+8)</values>
		<values>);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (/Mobile/.test(navAgent)) { // Device mode&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.pixelRatio = Math.min(window.devicePixelRatio, 2);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.status = false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;return ret;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Compute a weight according to the string comparison&#xD;&#xA;&#x9;&#x9; * the more the strings look like the more the weight is close to 10&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;computeStringSimilarity : function(st1, st2) {&#xD;&#xA;&#x9;&#x9;&#x9;if ((st1 == null) || (st2 == null)) return 0;&#xD;&#xA;&#x9;&#x9;&#x9;var str1 = this.trim(st1);&#xD;&#xA;&#x9;&#x9;&#x9;var str2 = this.trim(st2);&#xD;&#xA;&#x9;&#x9;&#x9;var lengthMax = Math.max(str1.length, str2.length);&#xD;&#xA;&#x9;&#x9;&#x9;var lengthMin = Math.min(str1.length, str2.length);&#xD;&#xA;&#x9;&#x9;&#x9;if (lengthMax &gt; (lengthMin * 3)) return 0;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var strMin = (str1.length &lt; str2.length) ? str1 : str2;&#xD;&#xA;&#x9;&#x9;&#x9;var strMax = (str1.length &gt;= str2.length) ? str1 : str2;&#xD;&#xA;&#x9;&#x9;&#x9;var cur = 0;&#xD;&#xA;&#x9;&#x9;&#x9;var W = 0;&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; lengthMin; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var j = cur++; j &lt; lengthMax; j++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (strMin[i] == strMax[j]) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;W += 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;W = Math.floor((W / lengt</values>
		<values>hMax) * 10);&#xD;&#xA;&#x9;&#x9;&#x9;if (W == 10) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//st1, st2 are original values and str1, str2 are trimmed values&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;W = (str1 === str2) &amp;&amp; (st1.replace(/\s/g, &apos; &apos;) === st2.replace(/\s/g, &apos; &apos;)) ? 10 : 9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return W;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;querySelector : function(doc, selector) {&#xD;&#xA;&#x9;&#x9;&#x9;var elt = null;&#xD;&#xA;&#x9;&#x9;&#x9;var frames = doc.querySelectorAll(&apos;iframe, frame&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; frames.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (isFrameElement(frames[i])) { // Cross origin?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elt = this.querySelector(frames[i].contentWindow.document, selector);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (elt != null) return elt;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return doc.querySelector(selector);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;setDownEventRecorded: function(eventName) {&#xD;&#xA;&#x9;&#x9;&#x9;if (eventName === RMOT_DOWN_EVENT) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getMainDocument().rmotDownEventRecorded = true;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isDownEventRecorded: function(eventName) {&#xD;&#xA;&#x9;&#x9;&#x9;var mainDoc = this.getMainDocument();&#xD;&#xA;&#x9;&#x9;&#x9;if (eventName === RMOT_TRIGGER_EVENT &amp;&amp; mainDoc.rmotDownEventRecorded) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;mainDoc.rmotDownEventRecorded = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;</values>
		<values>&#x9;return false;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;fnCompare: function(fn1, fn2) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!fn1 &amp;&amp; !fn2) return true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!fn1 || !fn2) return false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return fn1.toString() === fn2.toString();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isDijitControl: function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;return this.contains(element.className, &quot;dijit&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| this.contains(element.className, &quot;dojox&quot;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isSapLS: function() {&#xD;&#xA;&#x9;&#x9;&#x9;return window.sap &amp;&amp; window.sap.ls;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var jsUtil = new JSUtil();&#xD;&#xA;var browserDetails = jsUtil.getBrowserCompatibilityDetails();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTdebug(element, xpath, msg) {&#xD;&#xA;&#x9;if (jsUtil.getXPath(element)==xpath) {&#xD;&#xA;//&#x9;&#x9;rmotJSInterface.log(&quot;RMoTdebug &quot; + arguments.callee.caller + &quot; &gt;&gt; &quot; + msg);&#xD;&#xA;&#x9;&#x9;rmotRecorder.log(&quot;RMoTdebug &gt;&gt; &quot; + msg);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/// Nitin Extension Framework Implementation/////&#xD;&#xA;&#xD;&#xA;var WebGuiConstants ={&#xD;&#xA;&#x9;&#x9;TAGNAME_PROP:&quot;tagName&quot;,&#xD;&#xA;&#x9;&#x9;CONTENT_PROP:&quot;content&quot;,&#xD;&#xA;&#x9;&#x9;VALUE_PROP:&quot;value&quot;,&#xD;&#xA;&#x9;&#x9;LABEL_PROP:&quot;label&quot;,&#xD;&#xA;&#x9;&#x9;CLASS_PROP:&quot;class&quot;,&#xD;&#xA;&#x9;&#x9;WGROLE_PROP:&quot;wgrole&quot;,&#xD;&#xA;&#x9;</values>
		<values>&#x9;OPTIONS_PROP:&quot;options&quot;,&#xD;&#xA;&#x9;&#x9;OPTIONSLENGTH_PROP:&quot;length&quot;,&#xD;&#xA;&#x9;&#x9;CHECKED_PROP:&quot;checked&quot;,&#xD;&#xA;&#x9;&#x9;TABHEADER_PROP: &quot;tabheader&quot;,&#x9;&#xD;&#xA;&#x9;&#x9;TOOL_TIP: &#x9;&quot;tooltip&quot;,&#xD;&#xA;&#x9;&#x9;CHECKSUM_PROP:&quot;checksum&quot;,&#xD;&#xA;&#x9;&#x9;ENABLED_PROP: &quot;enabled&quot;,&#xD;&#xA;&#x9;&#x9;DEVICEPIXELRATIO_PROP: &quot;devicePixelRatio&quot;,&#xD;&#xA;&#x9;&#x9;WIDTH_PROP: &quot;width&quot;,&#xD;&#xA;&#x9;&#x9;HEIGHT_PROP: &quot;height&quot;,&#xD;&#xA;&#x9;&#x9;SCROLLABLE_PROP: &quot;scrollable&quot;,&#xD;&#xA;&#x9;&#x9;COLLAPSED_PROP: &quot;collapsed&quot;,&#xD;&#xA;&#x9;&#x9;XPATH_PROP: &quot;xpathProp&quot;,&#xD;&#xA;&#x9;&#x9;URL_PROP: &quot;url&quot;,&#xD;&#xA;&#x9;&#x9;TITLE_PROP: &quot;title&quot;,&#xD;&#xA;&#x9;&#x9;EXIST_PROP: &quot;exist&quot;&#xD;&#xA;&#x9;&#x9;}; &#xD;&#xA;&#xD;&#xA;WebGuiUtil = function(){&#xD;&#xA;&#x9;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;WebGuiUtil.prototype={&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Call the jQuery function of the element&apos;s defaultView&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;jQuery:function(element) { // 49062&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var defaultView = (element.ownerDocument) ? element.ownerDocument.defaultView : window;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return defaultView.jQuery(element);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var webGuiUtil = new WebGuiUtil();&#xD;&#xA;&#xD;&#xA;JSReflection = function(){&#xD;&#xA;&#x9;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * creates the object of the proxy class&#xD;&#xA; * domainObj and element will be passed as the parameters to proxy constructor.&#xD;&#xA; */&#xD;&#xA;JSReflection.prototype.create</values>
		<values>Object = function(domainObj, element, proxyClassName, proxyName) {&#xD;&#xA;    var args = Array.prototype.slice.call(arguments);&#xD;&#xA;    var proxyClass = eval(proxyClassName);&#xD;&#xA;    if (!proxyClass) return null;&#xD;&#xA;    function F() {&#xD;&#xA;        return proxyClass.apply(this, args);&#xD;&#xA;    }&#xD;&#xA;    F.prototype = proxyClass.prototype;&#xD;&#xA;    F.prototype.toJSON = function() {}&#xD;&#xA;    return new F();&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;JSReflection.prototype.callMethod = function(proxyObject, methodName) {&#xD;&#xA;&#x9;var args = Array.prototype.slice.call(arguments, 2);&#xD;&#xA;&#x9;proxyObject[methodName](args);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;JSReflection.prototype.getPropertyNames = function(htmlelement) {&#xD;&#xA;&#x9;var properties = [];&#xD;&#xA;&#x9;for(var key in obj) {&#xD;&#xA;&#x9;    if(obj.hasOwnProperty(key) &amp;&amp; typeof obj[key] !== &apos;function&apos;) {&#xD;&#xA;&#x9;        properties.push(key);&#xD;&#xA;&#x9;    }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return properties;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;JSReflection.prototype.getPropertyValue = function(htmlelement, propertyName) {&#xD;&#xA;&#x9;return this.callMethod(htmlelement, propertyName);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var jsReflect = new JSReflection(); &#xD;&#xA;&#xD;&#xA;var BASE_DOMAIN_NAME = &quot;base&quot;;&#xD;&#xA;Bas</values>
		<values>eDomain = function() {&#xD;&#xA;&#x9;domainManager.addDomain(this);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;BaseDomain.prototype={&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Extension Writers need to implement this method&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getProxy:function(element){&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Returns the name of the domain&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getDomainName:function(){&#xD;&#xA;&#x9;&#x9;&#x9;return BASE_DOMAIN_NAME;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Returns the version of the domain&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getDomainVersion:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getWidgets:function() {&#xD;&#xA;&#x9;&#x9;&#x9;return [];&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * This function tries to determine if the given element belongs to the domain.&#xD;&#xA;&#x9;&#x9; * &#xD;&#xA;&#x9;&#x9; * @param element the DOM node to test&#xD;&#xA;&#x9;&#x9; * @returns name (grammar id object) of the identified widget, null otherwise.&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;getEnclosingObject:function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;if(!element || !element.tagName&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| jsUtil.tagsIgnored.indexOf(element.tagName.toLowerCase()) &gt;=0) return null;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;var objName = null;&#xD;&#xA;&#x9;&#x9;&#x9;var widgets = this.getWidgets();&#xD;&#xA;&#x9;&#x9;&#x9;for (var i in widgets) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var keyValue = element.getAttribut</values>
		<values>e(widgets[i].key);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (keyValue &amp;&amp; typeof(keyValue) == &quot;string&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var keyValueArray = keyValue.split(&quot; &quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (var j in keyValueArray) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (keyValueArray[j] === widgets[i].value) { // Strict comparison&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return widgets[i].name;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else { // Try regular expression&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var regexp = new RegExp(widgets[i].value);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (regexp.test(keyValueArray[j])) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;objName = widgets[i].name;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return objName;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;_parseDocument:function(){&#xD;&#xA;&#x9;&#x9;&#x9;if(webGuiRecorderInterfaceObj){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.parseDocument();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;_updateHierarchy:function(){&#xD;&#xA;&#x9;&#x9;&#x9;if(webGuiRecorderInterfaceObj){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return webGuiRecorderInterfaceObj.updateHierarchy();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return null;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;_recordEvent:function(event, eventName, tagName, element, parameters){&#xD;&#xA;&#x9;&#x9;&#x9;if(webGuiRecorderInterfaceObj){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.recordEvent(event, eventName, tagName, element, paramet</values>
		<values>ers);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;_captureScreenshot:function(){&#xD;&#xA;&#x9;&#x9;&#x9;var screenshotId = null;&#xD;&#xA;&#x9;&#x9;&#x9;if(webGuiRecorderInterfaceObj){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;screenshotId = webGuiRecorderInterfaceObj.captureScreenshot();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return screenshotId;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;_recordEventWithExistingScreenshot:function(eventName, tagName, element,hierarchy,parameters,screenshotId){&#xD;&#xA;&#x9;&#x9;&#x9;if(webGuiRecorderInterfaceObj){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.recordEventWithExistingScreenshot(eventName, tagName, element,hierarchy,parameters,screenshotId);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;IProxy = function(){&#xD;&#xA;&#x9;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;IProxy.prototype={&#xD;&#xA;&#x9;&#x9;installWrappers:function(){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;applyDecoratedProps: function(targetElement){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isVisible: function(){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getProperty: function(propName){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getParent: function(){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;DomainManager = function(){&#xD;&#xA;&#x9;this.registeredDomains = [];&#xD;&#xA;&#x9;this.domainMap = {};&#xD;&#xA;&#x9;this.domains = [];&#xD;&#xA;//&#x9;this.proxyUID = 0;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;DomainManager.prototype={&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;init: function() {&#xD;&#xA;&#x9;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;&#x9; * Reini</values>
		<values>tialize proxies on window hashchange event (53472)&#xD;&#xA;&#x9;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;&#x9;this.addProxyConstructorListener();&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;// Initialize known domains&#xD;&#xA;&#x9;&#x9;&#x9;if (!this.isRegistered(HTML_DOMAIN_NAME)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; this.domains.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.domains[i].init();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;isRegistered: function(domainName) {&#xD;&#xA;&#x9;&#x9;&#x9;return domainName in this.domainMap;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;addDomain: function (domainObj){&#xD;&#xA;&#x9;&#x9;&#x9;this.domains.push(domainObj);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;registerDomain: function (domainObj){&#xD;&#xA;&#x9;&#x9;&#x9;this.registeredDomains.push(domainObj);&#xD;&#xA;&#x9;&#x9;&#x9;this.domainMap[domainObj.getDomainName()] = domainObj;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getDomainObj: function(domainName){&#xD;&#xA;&#x9;&#x9;&#x9;return this.domainMap[domainName];&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getProxy: function(element){&#xD;&#xA;&#x9;&#x9;&#x9;// Determine proxy only if: not already done or className has changed&#xD;&#xA;&#x9;&#x9;&#x9;if ((typeof element.registeredClassName === &quot;undefined&quot;) || element.registeredClassName != element.className&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| element.registeredDomain != this.registeredDomains.length || (typeof element.registeredClassN</values>
		<values>ame != &quot;undefined&quot; &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; jsUtil.contains(element.registeredClassName.toString(),&quot;SVG&quot;)))  {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for(var i=this.registeredDomains.length-1;i&gt;=0;i--) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var domainObj = this.registeredDomains[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var proxyObj = domainObj.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (proxyObj!=null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.registeredDomain = this.registeredDomains.length;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Create the proxy or update it in case a new domain has been registered&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (element.domainName != this.registeredDomains[i].getDomainName()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.domainName = domainObj.getDomainName();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.registeredClassName = element.className;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.proxy = proxyObj;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (typeof element.registeredClassName != &quot;undefined&quot; &amp;&amp;  jsUtil.contains(element.registeredClassName.toString(),&quot;SVG&quot;)){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.proxy.isWidgetChild = proxyObj.isWidgetChild;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return element.proxy;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;installWrappers: function(element){&#xD;&#xA;&#x9;&#x9;&#x9;var proxy = this.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (proxy</values>
		<values>) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;proxy.installWrappers();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;installDownWrapper: function(element){&#xD;&#xA;&#x9;&#x9;&#x9;var proxy = this.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (proxy) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;proxy.installDownEventWrapper(RMOT_DOWN_EVENT);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;installMutationObserver: function(element){&#xD;&#xA;&#x9;&#x9;&#x9;var proxy = this.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (proxy) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;proxy.installMutationObserver();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;installGhostClickWrapper: function(element){&#xD;&#xA;&#x9;&#x9;&#x9;var proxy = this.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (proxy) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;proxy.installGhostClickWrapper();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;applyDecoratedProps: function(sourceElement, targetElement){&#xD;&#xA;&#x9;&#x9;&#x9;this.getProxy(sourceElement).applyDecoratedProps(targetElement);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;getProperty:function(element, propName){&#xD;&#xA;&#x9;&#x9;&#x9;var propValue = this.getProxy(element).getProperty(propName);&#xD;&#xA;&#x9;&#x9;&#x9;return propValue;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;addProxyConstructorListener: function() {&#xD;&#xA;&#x9;&#x9;&#x9;var win = window;&#xD;&#xA;&#x9;&#x9;&#x9;if (!win.onhashchange || win.onhashchange.toString().indexOf(&quot;rmotHa</values>
		<values>shChange&quot;) &lt; 0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;win.rmotHashChange = win.onhashchange;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;win.onhashchange = function() {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (win.rmotHashChange) win.rmotHashChange.apply(this, arguments);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var elts = jsUtil.getMainDocument().body.getElementsByTagName(&quot;*&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; elts.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elts[i].registeredDomain = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;};&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var domainManager = new DomainManager();&#xD;&#xA;&#xD;&#xA;var WebGuiStorage = function(){};&#xD;&#xA;WebGuiStorage.prototype={&#xD;&#xA;&#x9;&#x9;get: function(key) {&#xD;&#xA;&#x9;&#x9;&#x9;let value = null;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;value = localStorage.getItem(key);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return value;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;exists: function(key) {&#xD;&#xA;&#x9;&#x9;&#x9;let value = &apos;&apos;;&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;value = localStorage.getItem(key);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return value !== null;&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;set: function(key, value) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;localStorage.setItem(key, value);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;remove: function(key) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;localStorage.removeItem(key);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var webGuiStorage = ne</values>
		<values>w WebGuiStorage();&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; *&#x9;Create and display a rectangle around an element&#xD;&#xA;*/&#xD;&#xA;RMoTRectangle = function(element) {&#xD;&#xA;&#x9;this.RMoTRect = undefined;&#xD;&#xA;&#x9;if (element) {&#xD;&#xA;&#x9;&#x9;var rect = element.getBoundingClientRect();&#xD;&#xA;&#x9;&#x9;if (rect) {&#xD;&#xA;&#x9;&#x9;&#x9;var coords = this.getCoords(element);&#xD;&#xA;&#x9;&#x9;&#x9;// cf WI 44766 --------------------------------------------------------------------&#xD;&#xA;&#x9;&#x9;&#x9;if ((rect.top &gt; coords.top) &amp;&amp; (jsUtil.isInViewPort(element, rect))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;coords = rect;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;// --------------------------------------------------------------------------------&#xD;&#xA;&#x9;&#x9;&#x9;var top = Math.round(coords.top);&#xD;&#xA;&#x9;&#x9;&#x9;var left = Math.round(coords.left);&#xD;&#xA;&#x9;&#x9;&#x9;var right = coords.right - coords.left;&#xD;&#xA;&#x9;&#x9;&#x9;var bottom = coords.bottom - coords.top;&#xD;&#xA;&#x9;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;&#x9;this.drawRectangle(element.ownerDocument, top, left, right, bottom);&#xD;&#xA;&#x9;&#x9;&#x9;// LoggerService.logMsg(RMoTDebug, &quot;---&gt; &quot; + top + &quot;, &quot; + left + &quot;, &quot; + right + &quot;, &quot; + bottom);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;// handle rectangle area coordinates&#xD;&#xA;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(element);&#xD;&#xA;&#x9;&#x9;&#x9;if (proxy.getCoords) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;rec</values>
		<values>t = (proxy.isRectArea()) ? proxy.getCoords() : rect;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (!jsUtil.isInViewPort(element, rect)) {&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var scrollX = (coords.right &gt; jsUtil.getWindowWidth(element)) ? coords.right - jsUtil.getWindowWidth(element) + 100 : 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var scrollY = (coords.bottom &gt; jsUtil.getWindowHeight(element)) ? coords.bottom - jsUtil.getWindowHeight(element) + 100 : 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;window.scrollTo(scrollX, scrollY) ;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;RMoTRectangle.prototype.computeAbsolute = function(element, absolute) {&#xD;&#xA;&#x9;absolute.absoluteLeft += element.offsetLeft ? element.offsetLeft : 0;&#xD;&#xA;&#x9;absolute.absoluteTop += element.offsetTop ? element.offsetTop : 0;&#xD;&#xA;&#xD;&#xA;&#x9;if (element.offsetParent) {&#xD;&#xA;&#x9;&#x9;this.computeAbsolute(element.offsetParent, absolute);&#xD;&#xA;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;RMoTRectangle.prototype.getCoords = function(element) {&#xD;&#xA;&#x9;var ret = {top : 0, left : 0, bottom : 0, right : 0 };&#xD;&#xA;&#x9;if (element != null) {&#xD;&#xA;&#x9;&#x9;element.absolute = { absoluteLeft: 0, absoluteTop: 0 };&#xD;&#xA;&#x9;&#x9;this.computeAbsolute(element, element.absolute);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;ret.top = element.absolu</values>
		<values>te.absoluteTop;&#xD;&#xA;&#x9;&#x9;ret.left = element.absolute.absoluteLeft; &#xD;&#xA;&#x9;&#x9;ret.bottom = ret.top + element.offsetHeight;&#xD;&#xA;&#x9;&#x9;ret.right = ret.left + element.offsetWidth;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// handle rectangle area coordinates&#xD;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(element);&#xD;&#xA;&#x9;&#x9;if (proxy.getCoords) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = (proxy.isRectArea()) ? proxy.getCoords() : ret;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return ret;&#xD;&#xA;&#x9;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Draw a rectangle thanks to the element coordinates&#xD;&#xA;*/&#xD;&#xA;RMoTRectangle.prototype.drawRectangle = function(top, left, width, height, color) {&#xD;&#xA;&#x9;this.drawRectangle(document, top, left, width, height, color);&#xD;&#xA;};&#xD;&#xA;/**&#xD;&#xA; * Draw a rectangle thanks to the element coordinates&#xD;&#xA;*/&#xD;&#xA;RMoTRectangle.prototype.drawRectangle = function(doc, top, left, width, height, color) {&#xD;&#xA;&#x9;var RMoTBorderWidth = 2;&#xD;&#xA;&#x9;if(color == undefined)&#xD;&#xA;&#x9;&#x9;color = &apos;solid red&apos;;&#xD;&#xA;&#x9;width = width - 2 * RMoTBorderWidth;&#xD;&#xA;&#x9;height = height - 2 * RMoTBorderWidth;&#xD;&#xA;&#x9;this.RMoTRect = doc.createElement(&apos;div&apos;, RMoTRectangleId);&#xD;&#xA;&#x9;var rectStyle = &apos;border:&apos;+RMoTBorderWidth+&apos;px &apos;+ color +&apos;;position:abs</values>
		<values>olute;background:none;top:&apos;+top+&apos;px;left:&apos;+left+&apos;px;width:&apos;+width+&apos;px;height:&apos;+height+&apos;px;z-index:1000000;pointer-events: none;&apos;;&#xD;&#xA;&#x9;this.RMoTRect.setAttribute( &quot;style&quot;, rectStyle );&#xD;&#xA;//&#x9;document.body.insertBefore makes the page shift down in some websites&#xD;&#xA;&#x9;doc.body.appendChild(this.RMoTRect);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;window.setTimeout(function() { &#xD;&#xA;&#x9;&#x9;this.removeRectangle();&#xD;&#xA;&#x9;}.bind(this), 1000);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Remove the rectangle drawn by RMoTDrawRectangle&#xD;&#xA;**/&#xD;&#xA;RMoTRectangle.prototype.removeRectangle = function() {&#xD;&#xA;&#x9;if (this.RMoTRect &amp;&amp; this.RMoTRect.ownerDocument.body) {&#xD;&#xA;&#x9;&#x9;this.RMoTRect.ownerDocument.body.removeChild(this.RMoTRect);&#xD;&#xA;&#x9;&#x9;this.RMoTRect = null;&#xD;&#xA;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * If any, remove the rectangle drawn by the browser extension&#xD;&#xA; * Useful when multiple extensions are running at the same time.&#xD;&#xA;**/&#xD;&#xA;RMoTRectangle.prototype.removeBodyRectangle = function() {&#xD;&#xA;&#x9;setTimeout(function() {&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;let bs = document.body.style;&#xD;&#xA;&#x9;&#x9;&#x9;if (bs.border === &apos;3px solid blue&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;bs.border = &apos;none&apos;;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;catch (</values>
		<values>e) { /* Nope */&#x9;}&#xD;&#xA;&#x9;}, 3000);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xD;&#xA; *  Copyright HCL Technologies Ltd. 2018, 2019.  All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * List of form elements type&#xD;&#xA; */&#xD;&#xA;var inputTypes = [&quot;button&quot;, &quot;checkbox&quot;, &quot;radio&quot;, &quot;email&quot;, &quot;file&quot;, &quot;image&quot;,&#xD;&#xA;                  &quot;password&quot;, &quot;reset&quot;, &quot;submit&quot;, &quot;text&quot;, &quot;url&quot;];&#xD;&#xA;&#xD;&#xA;var inputTypesHTML5 =  [&quot;color&quot;, &quot;date&quot;, &quot;datetime-local&quot;, &quot;month&quot;, &quot;time&quot;,&#xD;&#xA;                        &quot;week&quot;, &quot;number&quot;];&#xD;&#xA;&#xD;&#xA;var inputAttrsHTML5 = [&quot;list&quot;];&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * List of frame elements&#xD;&#xA; */&#xD;&#xA;var frameElements =  [&quot;frame&quot;, &quot;iframe&quot;];&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Click event that is listened&#xD;&#xA; */&#xD;&#xA;var RMOT_TRIGGER_EVENT=&quot;onmouseup&quot;; //Changed from &quot;onclick&quot; to take care of missing statements&#xD;&#xA;var RMOT_DOWN_EVENT=&quot;onmousedown</values>
		<values>&quot;; // 50088&#xD;&#xA;if (jsUtil.isTouchEnabled()) { // Mobile only&#xD;&#xA;&#x9;RMOT_TRIGGER_EVENT = &quot;ontouchend&quot;;&#xD;&#xA;&#x9;RMOT_DOWN_EVENT=&quot;ontouchstart&quot;;&#xD;&#xA;}&#xD;&#xA;var RMOT_DBLCLICK_EVENT = &quot;ondblclick&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Events applied to the body element. &#xD;&#xA; */&#xD;&#xA;var bodyEvents = [ &#x9;&#x9;&quot;onafterprint&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onbeforeprint&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onbeforeonload&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onerror&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onhashchange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onload&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmessage&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onoffline&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ononline&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onpagehide&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onpageshow&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onpopstate&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onredo&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onresize&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onstorage&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onundo&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onunload&quot; ];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;/**&#xD;&#xA; * Events applied to all HTML5 elements, but is most common in form elements.&#xD;&#xA; */&#xD;&#xA;var formEvents = [  &#x9;&#x9;&quot;onblur&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onchange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;oncontextmenu&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onfocus&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onformchange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onforminput&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;oninput&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;oninvalid&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onreset&quot;, // HTML4 only&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onselect&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onsubmit&quot; ];&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Keyboard events applied to all HTML5 elements.&#xD;&#xA; */&#xD;&#xA;</values>
		<values>var keyboardEvents = [&#x9;&#x9;&quot;onkeydown&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onkeypress&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onkeyup&quot; ];&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Mouse events applied to all HTML5 elements.&#xD;&#xA; */&#xD;&#xA;var mouseEvents = [&#x9;&#x9;&#x9;&quot;onclick&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondblclick&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondrag&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondragend&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondragenter&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondragleave&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondragover&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondragstart&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondrop&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmousedown&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmousemove&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmouseout&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmouseover&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmouseup&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onmousewheel&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onscroll&quot; ];&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Media events applied to all HTML5 elements, but is most common &#xD;&#xA; * in media elements.&#xD;&#xA; */&#xD;&#xA;var mediaEvents = [&#x9;&#x9;&#x9;&quot;onabort&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;oncanplay&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;oncanplaythrough&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ondurationchange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onemptied&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onended&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onerror&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onloadeddata&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onloadedmetadata&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onloadstart&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onpause&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onplay&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onplaying&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onprogress&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onratechange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onreadystatechange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onseeked&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onseeking&quot;,</values>
		<values>&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onstalled&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onsuspend&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ontimeupdate&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onvolumechange&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;onwaiting&quot;&#x9;];&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * htmlProxyMap is the crux of HTML recording. Key=TagName / Value=Proxy&#xD;&#xA; * Proxies handle events to register, event handlers, specific properties, action parameters...&#xD;&#xA; * If the HTML element doesnt find an entry in this map, it will be handled in a generic (default) way.&#xD;&#xA; */&#xD;&#xA;var htmlProxyMap = {&#xD;&#xA;&#x9;&#x9;&quot;default&quot;:&quot;HtmlElementProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;editable&quot;:&quot;HtmlEditableProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;body&quot;:&quot;HtmlBodyProxy&quot;,&#xD;&#xA;&#x9;    &quot;a&quot;:&quot;HtmlAProxy&quot;,&#xD;&#xA;&#x9;    &quot;summary&quot;:&quot;HtmlAProxy&quot;,&#xD;&#xA;&#x9;    &quot;area&quot;:&quot;HtmlAreaProxy&quot;,&#x9;&#xD;&#xA;&#x9;&#x9;&quot;button&quot;:&quot;HtmlSubmitProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;custom&quot;:&quot;HtmlCustomProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;audio&quot;:&quot;HtmlMediaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;video&quot;:&quot;HtmlMediaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;input&quot;:&quot;HtmlTextInputProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputtext&quot;:&quot;HtmlTextInputProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputpassword&quot;:&quot;HtmlTextInputProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputsearch&quot;:&quot;HtmlTextSearchInputProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputfile&quot;:&quot;HtmlInputFileProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;textarea&quot;:&quot;HtmlTextAreaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputradio&quot;:&quot;HtmlCheckBoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputcheckbox&quot;:&quot;HtmlChe</values>
		<values>ckBoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5color&quot;:&quot;HtmlInput5ColorProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5date&quot;:&quot;HtmlInput5DateProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5datetime-local&quot;:&quot;HtmlInput5DateProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5month&quot;:&quot;HtmlInput5DateProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5time&quot;:&quot;HtmlInput5DateProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5week&quot;:&quot;HtmlInput5DateProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5number&quot;:&quot;HtmlInput5Proxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputHTML5list&quot;:&quot;HtmlInput5Proxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputrange&quot;:&quot;HtmlInput5Proxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputsubmit&quot;:&quot;HtmlSubmitProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;inputreset&quot;:&quot;HtmlSubmitProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;select&quot;:&quot;HtmlSelectProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;option&quot;:&quot;HtmlOptionProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;canvas&quot;:&quot;HtmlCanvasProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;iframe&quot;:&quot;HtmlFrameProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;frame&quot;:&quot;HtmlFrameProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;svg&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;defs&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;path&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;rect&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;circle&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;ellipse&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;line&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;polygon&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;polyline&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;text&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;g&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;tspan&quot;:&quot;HtmlSvgProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;td&quot;:&quot;HtmlTableCellProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;th&quot;:&quot;HtmlTableHeaderProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uilink&quot;:&quot;H</values>
		<values>tmlAProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uibutton&quot;:&quot;HtmlSubmitProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uiinputtextfield&quot;:&quot;HtmlTextInputProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uichekbox&quot;: &quot;HtmlCheckBoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uiradiobutton&quot;: &quot;HtmlCheckBoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uidropdown&quot;: &quot;HtmlSelectProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uilist&quot;: &quot;HtmlSelectProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uilistitem&quot;: &quot;HtmlOptionProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;uitextarea&quot;: &quot;HtmlTextAreaProxy&quot;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;function isFrameElement(element) {&#xD;&#xA;&#x9;if (element &amp;&amp; element.tagName &amp;&amp; &#xD;&#xA;&#x9;&#x9;&#x9;frameElements.indexOf(element.tagName.toLowerCase()) &gt;= 0) {&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;var access = element.contentDocument || element.contentWindow.document;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;catch (e) {}&#xD;&#xA;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;var accessed = (access != undefined);&#xD;&#xA;&#x9;&#x9;&#x9;if (!accessed) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Security issue: frame&apos;s document is not in the current domain.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(typeof(crossScriptIFrames) != &apos;undefined&apos; &amp;&amp; crossScriptIFrames != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;crossScriptIFrames.push(jsUtil.getXPath(element)); //collecting the cross scripting frames/iframes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return accessed;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function HtmlRecordEvent(element, eventName, event, dont</values>
		<values>UseEventTarget) {&#xD;&#xA;&#x9;if (typeof dontUseEventTarget === &apos;undefined&apos; || dontUseEventTarget === false) {&#xD;&#xA;&#x9;&#x9;element = event.target; // 43579&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xD;&#xA;&#xD;&#xA;&#x9;webGuiRecorderInterfaceObj.recordEvent(event, eventName,&#xD;&#xA;&#x9;&#x9;&#x9;proxy.getProperty(WebGuiConstants.TAGNAME_PROP),&#xD;&#xA;&#x9;&#x9;&#x9;element, &#xD;&#xA;&#x9;&#x9;&#x9;proxy.getParameters());&#xD;&#xA;&#x9;event.recorded = true;&#xD;&#xA;}&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xA; *  Copyright HCL Technologies Ltd. 2018, 2019.  All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;var HTML_DOMAIN_NAME = &quot;html&quot;;&#xA;&#xA;HTMLDomain = function() {&#xA;&#x9;BaseDomain.apply(this,arguments);&#xA;};&#xA;&#xA;HTMLDomain.prototype = new BaseDomain();&#xA;&#xA;HTMLDomain.prototype.init=function() {&#xA;&#x9;domainManager.registerDomain(this);&#xA;}&#xA;&#xA;/*&#xA; * Returns the proxy object for the element passed&#xA; */&#xA;</values>
		<values>HTMLDomain.prototype.getProxy = function(element) {&#xA;&#x9;if (element == undefined || element == null) {&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;var tagName = (element.tagName) ? element.tagName.toLowerCase() : &quot;&quot;;&#xA;&#x9;var proxy = null, proxyClass = null;&#xA;&#x9;switch (tagName) {&#xA;&#x9;&#x9;case &quot;input&quot; :&#xA;&#x9;&#x9;&#x9;if (inputTypesHTML5.indexOf(element.type) &gt;= 0) { &#xA;&#x9;&#x9;&#x9;&#x9;tagName = &quot;inputHTML5&quot; + element.type.toLowerCase();&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// check for supported HTML 5 attributes for input element&#xA;&#x9;&#x9;&#x9;if (inputAttrsHTML5 != null &amp;&amp; inputAttrsHTML5.length &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; inputAttrsHTML5.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (element[inputAttrsHTML5[i]] != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tagName = &quot;inputHTML5&quot; + inputAttrsHTML5[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if (jsUtil.startsWith(tagName, &quot;inputHTML5&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;tagName += element.type;&#xA;&#x9;&#x9;&#x9;if (!htmlProxyMap[tagName]) {&#xA;&#x9;&#x9;&#x9;&#x9;tagName = &quot;input&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (jsUtil.applySimpleOperator(tagName, &apos;-&apos;, &apos;TContains&apos;)) {&#xA;&#x9;&#x9;tagName = &apos;custom&apos;;&#xA;&#x9;}&#xA;&#x9;if (htmlProxyMap[tagName]) {&#xA;&#x9;&#x9;proxyClass = htmlProxyMap</values>
		<values>[tagName];&#xA;&#x9;} else {&#xA;&#x9;&#x9;proxyClass = (element.isContentEditable) ? htmlProxyMap[&quot;editable&quot;] : htmlProxyMap[&quot;default&quot;];&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (proxyClass != null) {&#xA;&#x9;&#x9;proxy = jsReflect.createObject(this, element, proxyClass, tagName);&#xA;&#x9;}&#xA;&#x9;return proxy;&#xA;};&#xA;&#xA;/*&#xA; * Returns the name of the domain =&quot;html&quot;&#xA; */&#xA;HTMLDomain.prototype.getDomainName=function() {&#xA;&#x9;return HTML_DOMAIN_NAME;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2016, 2019. All Rights Reserved. &#xA; *  Copyright HCL Technologies Ltd. 2018, 2021.  All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;var HTML_INPUT = &quot;input&quot;;&#xA;var HTML_INPUTRADIO = &quot;inputradio&quot;;&#xA;var HTML_TEXTAREA = &quot;textarea&quot;;&#xA;var HTML_DEFAULT = &quot;default&quot;;&#xA;var HTML_EVENT = &quot;Event&quot;;&#xA;var HTML_MOUSE_EVENT = &quot;MouseEvents&quot;;&#xA;var HTML_KEYBOARD_EVENT = &quot;KeyboardEvent&quot;;&#xA;var HTML_TEXT_EVENT = &quot;TextEvent&quot;;&#xA;var HTML_SELECT</values>
		<values> = &quot;select&quot;;&#xA;var HTML_BUTTON = &quot;button&quot;;&#xA;var HTML_ANCHOR =&quot;a&quot;;&#xA;var HTML_IMAGE = &quot;img&quot;;&#xA;var HTML_OBJECT = &quot;object&quot;;&#xA;var HTML_EMBED = &quot;embed&quot;;&#xA;var HTML_BODY = &quot;body&quot;;&#xA;/* apparently the following constants are not useful since not used! */&#xA;&#xA;var HTML_INPUTTEXT = &quot;inputtext&quot;;&#xA;var HTML_INPUTSUBMIT = &quot;inputsubmit&quot;;&#xA;&#xA;&#xA;var traversal = {&#xA;&#x9;&#x9;LEFT : 0, /* search previous sibling*/&#xA;&#x9;&#x9;RIGHT : 1, /* search next sibling*/&#xA;&#x9;&#x9;TOP : 2,&#xA;&#x9;&#x9;BOTTOM : 3&#xA;};&#xA;&#xA;var PADDING = 14;&#xA;var TEXTNODE = 3;&#xA;var ELEMENTNODE = 1;&#xA;var labelNodes = [ELEMENTNODE ,TEXTNODE];&#xA;//the following tags act as label terminators&#xA;var labelTerminators = [HTML_BUTTON,&#xA;                        HTML_SELECT,&#xA;                        HTML_TEXTAREA,&#xA;                        HTML_INPUT,&#xA;                        HTML_IMAGE,&#xA;                        HTML_OBJECT,&#xA;                        HTML_ANCHOR,&#xA;                        HTML_EMBED,&#xA;                        HTML_BODY];&#xA;&#xA;var labelSkippers = [&quot;script&quot;];&#xA;&#xA;var HtmlElementProxy = function(domainObj, element, proxyClass, proxyName) {&#xA;</values>
		<values>&#x9;if (arguments.length == 0) {&#xA;&#x9;&#x9;return; // don&apos;t do anything&#xA;&#x9;}&#xA;&#xA;&#x9;this.element = element;&#xA;&#x9;this.target = null;&#xA;&#x9;this.domainObj = domainObj;&#xA;&#x9;this.proxyClass = proxyClass;&#xA;&#x9;this.proxyName = proxyName;&#xA;&#x9;this.curParent = null;&#xA;&#x9;this.stopTraversing = false;&#xA;&#x9;&#xA;&#x9;// 56670: Save original event handlers by attaching them to the element&#xA;&#x9;if (!this.element.rmotOriginalHandler) this.element.rmotOriginalHandler = new Array ();&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.applyDecoratedProps = function (targetElement) {&#xA;&#xA;&#x9;targetElement.tagname = this.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#xA;&#x9;targetElement.content = this.element.content;&#xA;&#xA;&#x9;// TODO: could be replaced by targetElement.content = this.element.content&#xA;&#x9;// Let these lines as they may be used by Dojo/Jquery UI proxies.&#xA;&#x9;targetElement.content = (this.element.RMoTcontent!= undefined) ? &#xA;&#x9;&#x9;&#x9;this.element.RMoTcontent : (this.element.content) ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.content : &quot;&quot;; &#xA;&#xA;&#x9;targetElement.enabled = this.getProperty(WebGuiConstants.ENABLED_PROP);&#xA;&#x9;targetElement.exist = this.ge</values>
		<values>tProperty(WebGuiConstants.EXIST_PROP);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getLabel = function (trav,direction) {&#xA;&#x9;var label=&quot;&quot;;&#xA;&#x9;var results = jsUtil.findElementAll(&quot;*&quot;, &quot;for&quot;, this.element.id);&#xA;&#x9;if(results == null || results.length &lt;= 0){&#xA;&#x9;&#x9;results = jsUtil.findElementsInOwnerDoc(this.element,&quot;*&quot;, &quot;for&quot;, this.element.id);&#xA;&#x9;}&#xA;&#x9;if(results!= null &amp;&amp; results.length &gt; 0){&#xA;&#x9;&#x9;if( typeof(trav)!=&apos;undefined&apos; &amp;&amp; trav ){&#xA;&#x9;&#x9;&#x9;this.isValidLabel(results[0],direction);&#xA;&#x9;&#x9;&#x9;label =  this.bestComputedLabel();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;label = results[0].textContent;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;return label;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.computeLabel = function (direction) {&#xA;&#xA;&#x9;var textContent = jsUtil.getTrimText(this.element);&#xA;&#x9;this.curParent = this.element;&#xA;&#x9;var maxParent = this.computeParent(textContent,this.element);&#xA; var label = this.bestComputedLabel();&#xA; while( maxParent &amp;&amp; (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) &amp;&amp; !this.stopTraversing){&#xA;&#x9; while(this.curParent != maxParent){&#xA;&#x9;&#x9; var curElement = this.curParent;&#xA;&#xA;&#x9;&#x9; while(curElement </values>
		<values>){&#xA;&#x9;&#x9;&#x9; if(curElement.nodeType == ELEMENTNODE &amp;&amp; (curElement != this.element) &amp;&amp; (labelTerminators.indexOf(curElement.tagName.toLowerCase())&gt;=0) ){&#xA;&#x9;&#x9;&#x9;&#x9; this.stopTraversing = true;&#xA;&#x9;&#x9;&#x9;&#x9; return ;&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; var sibText = jsUtil.getTrimText(curElement);&#xA;&#x9;&#x9;&#x9; if (textContent != sibText &amp;&amp; !jsUtil.is_all_ws(curElement)){&#xA;&#x9;&#x9;&#x9;&#x9; this.isValidLabel(curElement,direction);&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; var temp = null;&#xA;&#x9;&#x9;&#x9; if(direction == traversal.LEFT){&#xA;&#x9;&#x9;&#x9;&#x9; temp = curElement.previousSibling;&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; else{&#xA;&#x9;&#x9;&#x9;&#x9; temp = curElement.nextSibling;&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; //WI 54448: PreviousElemntSibling and nextElemntSibling support for text nodes is unavailable in IE browser.&#xA;&#x9;&#x9;&#x9; while(temp &amp;&amp; labelNodes.indexOf(temp.nodeType)&lt;0){&#xA;&#x9;&#x9;&#x9;&#x9; if(direction == traversal.LEFT){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; temp = temp.previousSibling;&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9;&#x9; else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; temp = temp.nextSibling;&#xA;&#x9;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; }&#xA;&#x9;&#x9;&#x9; curElement = temp;&#xA;&#x9;&#x9;&#x9; if(curElement &amp;&amp; curElement.nodeType == ELEMENTNODE){&#xA;&#x9;&#x9;&#x9;&#x9; if(this.containsTerminator(curElement)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; this.stopTraversing = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; return this.bestComputedLabel</values>
		<values>();&#xA;&#x9;&#x9;&#x9;&#x9; }&#x9;&#xA;&#x9;&#x9;&#x9; }&#xA;&#xA;&#x9;&#x9; }&#x9;&#x9;&#xA;&#x9;&#x9; // go to parent until max parent&#xA;&#x9;&#x9; this.curParent = this.curParent.parentElement;&#xA;&#x9; }&#xA;&#x9; this.isValidLabel(maxParent,direction);&#xA;&#x9; label = this.bestComputedLabel();&#xA;&#x9; textContent = jsUtil.getTrimText(maxParent);&#xA;&#x9; maxParent = this.computeParent(textContent,maxParent);&#xA; }&#xA; return label;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.containsTerminator = function (curElement) {&#xA;&#x9;if(curElement.hidden){&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#xA;&#x9;var inputs = curElement.querySelectorAll([tagName =&quot;INPUT&quot;]);&#xA;&#x9;if(inputs.length &gt; 0 &amp;&amp; inputs[0] != this.element){&#xA;&#x9;&#x9;return true ;&#xA;&#x9;}&#xA;&#x9;return false;&#xA;}&#xA;//Find a parent whose text Content is diff than the input text&#xA;HtmlElementProxy.prototype.computeParent = function (textContent,current) {&#xA;&#x9;if(current)&#xA;&#x9;{&#xA;&#x9;&#x9;var parent = current.parentElement;&#xA;&#x9;&#x9;this.curParent = current;&#xA;&#x9;&#x9;var parText = parent?jsUtil.getTrimText(parent):null;&#xA;&#x9;&#x9;while (parent &amp;&amp; (textContent == parText || jsUtil.is_all_ws(parent))) {&#xA;&#x9;&#x9;&#x9;parent = this.computeParent(textContent,parent);&#xA;&#x9;&#x9;&#x9;if(parent){&#xA;&#x9;&#x9;&#x9;&#x9;parText = jsUt</values>
		<values>il.getTrimText(parent);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return parent;&#xA;&#x9;}&#xA;&#x9;return null;&#xA;};&#xA;&#xA;//Check if the label is alligned properly to the input text&#xA;HtmlElementProxy.prototype.isValidLabel = function (tentativeLabel,direction) {&#xA;&#x9;&#xA;&#x9;if(tentativeLabel.nodeType == TEXTNODE){&#xA;&#x9;&#x9;if(!this.leftLabel)&#xA;&#x9;&#x9;&#x9;this.leftLabel = jsUtil.getTrimText(tentativeLabel);&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// only for tentativeLabel object of type &apos;LABEL&apos;&#xA;&#x9;&#x9;// since its obvious that they contain some text node within&#xA;&#x9;&#x9;// otherwise continue the search for label&#xA;&#x9;&#x9;// the text content could have newline markers with lot of white spaces in between&#xA;&#x9;&#x9;// so its trimmed for best visual representation&#xA;&#x9;&#x9;var _label = (tentativeLabel.tagName == &quot;LABEL&quot; &amp;&amp; tentativeLabel.textContent) ? tentativeLabel.textContent.trim().replace(/\n/g, &apos; &apos;).replace(/\s\s+/g,&apos; &apos;) : &quot;&quot; ;&#xA;&#xA;&#x9;&#x9;if (_label &amp;&amp; _label != &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;this.leftLabel = this.topLabel = this.bottomLabel = _label;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var elemCoords = this.getCoordinates();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var labelCoords = domainManager.getProxy(tentativeLabel).getCoordi</values>
		<values>nates();&#xA;&#x9;&#x9;//WI 53982: Check if the label falls within the below category&#xA;&#x9;&#x9;// a) Smaller than the control or&#xA;&#x9;&#x9;// b) Not larger than the PADDING value&#xA;&#x9;&#x9;if(this.isSmallerLabel(labelCoords,elemCoords) || this.isBiggerLabel(labelCoords,elemCoords))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(direction == traversal.LEFT &amp;&amp; elemCoords.left &gt; labelCoords.left){&#xA;&#x9;&#x9;&#x9;&#x9;if(!this.leftLabel){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.leftLabel = this.getLabelText(tentativeLabel,&quot;&quot;,traversal.LEFT);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if(direction == traversal.RIGHT &amp;&amp; elemCoords.left &lt; labelCoords.left){&#xA;&#x9;&#x9;&#x9;&#x9;if(!this.leftLabel){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.leftLabel = this.getLabelText(tentativeLabel,&quot;&quot;,traversal.RIGHT);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if( Math.abs(labelCoords.left - elemCoords.left)  &lt;= PADDING )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(direction == traversal.LEFT &amp;&amp; elemCoords.top &gt; labelCoords.top){&#xA;&#x9;&#x9;&#x9;&#x9;if(!this.topLabel){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.topLabel =  this.getLabelText(tentativeLabel,&quot;&quot;,traversal.TOP);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if(direction == traversal.RIGHT &amp;&amp; elemCoords.top &lt; labelCoords.top){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(!this.bottomLabel){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.bottomLabel = this</values>
		<values>.getLabelText(tentativeLabel,&quot;&quot;,traversal.BOTTOM);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;//Check for child element to get exact alligned text&#xA;//while start not == null start.prevSibling&#xA;&#x9;//if text node append to label else get previousElemntSibling make sure its not  a special char . trim it&#xA;&#x9;// if non label candidates stop loop and return&#xA;&#x9;//if hidden or labelSkipCandidates go to previous &#xA;&#x9;//else check alignment and add to label accordingly&#xA;HtmlElementProxy.prototype.getLabelText = function (tentativeLabel,lbl,trav) {&#xA;&#x9;//single node so its a valid label&#xA;&#x9;if(tentativeLabel.hidden){&#xA;&#x9;&#x9;return lbl;&#xA;&#x9;}&#xA;&#x9;if(tentativeLabel.childElementCount == 0){&#xA;&#x9;&#x9;return&#x9;jsUtil.is_all_ws(tentativeLabel)?lbl:jsUtil.getTrimText(tentativeLabel) + lbl;&#xA;&#x9;}&#xA;&#x9;//traverse from end&#xA;&#x9;var start = tentativeLabel.lastChild;&#xA;&#x9;if(tentativeLabel.contains &amp;&amp; tentativeLabel.contains(this.element)){&#xA;&#x9;&#x9;var temp = this.element;&#xA;&#x9;&#x9;if(trav == traversal.LEFT || trav == traversal.TOP){&#xA;&#x9;&#x9;&#x9;start = temp.previousSibling;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;start = temp.nextSibling;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;whil</values>
		<values>e(!start){&#xA;&#x9;&#x9;&#x9;temp = temp.parentElement;&#xA;&#x9;&#x9;&#x9;if(trav == traversal.LEFT || trav == traversal.TOP){&#xA;&#x9;&#x9;&#x9;&#x9;start = temp.previousSibling;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;start = temp.nextSibling;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;while(start &amp;&amp; !this.stopTraversing){&#xA;&#x9;&#x9;if(start.nodeType == TEXTNODE){&#xA;&#x9;&#x9;&#x9;lbl = &#x9;jsUtil.is_all_ws(start)?lbl:jsUtil.getTrimText(start) + lbl;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(start.nodeType == ELEMENTNODE &amp;&amp; labelTerminators.indexOf(start.tagName.toLowerCase())&gt;=0){&#xA;&#x9;&#x9;&#x9;this.stopTraversing = true;&#xA;&#x9;&#x9;&#x9;return lbl;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(start.nodeType == ELEMENTNODE &amp;&amp; labelSkippers.indexOf(start.tagName.toLowerCase())&lt; 0 &amp;&amp; !this.isHidden(start,trav)){&#xA;&#x9;&#x9;&#x9;if(start.childElementCount &gt;0){&#xA;&#x9;&#x9;&#x9;&#x9;lbl = this.getLabelText(start,lbl,trav);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;lbl = &#x9;jsUtil.is_all_ws(start)?lbl:jsUtil.getTrimText(start) + lbl;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(trav == traversal.LEFT || trav == traversal.TOP){&#xA;&#x9;&#x9;&#x9;start = start.previousSibling;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;start = start.nextSibling;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;return lbl;&#xA;}&#xA;&#xA;HtmlElementProxy.prototype.isHidden = function (start,trav) {&#xA;&#x9;if(start.hidd</values>
		<values>en){&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#x9;var elemCoords = this.getCoordinates();&#xA;&#x9;var labelCoords = domainManager.getProxy(start).getCoordinates();&#xA;&#x9;if(traversal.LEFT == trav || traversal.RIGHT == trav){&#xA;&#x9;&#x9;if(this.isSmallerLabel(labelCoords,elemCoords) || this.isBiggerLabel(labelCoords,elemCoords))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(traversal.LEFT == trav &amp;&amp; elemCoords.left &gt; labelCoords.left){&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if(traversal.RIGHT == trav &amp;&amp; elemCoords.left &lt; labelCoords.left){&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else if(Math.abs(labelCoords.left - elemCoords.left)  &lt;= PADDING ){&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;return true;&#xA;}&#xA;HtmlElementProxy.prototype.isSmallerLabel = function (labelCoords,elemCoords) {&#xA;&#x9;if((labelCoords.top &gt; elemCoords.top) &amp;&amp; (labelCoords.bottom &lt;elemCoords.bottom))&#xA;&#x9;&#x9;return true;&#xA;&#x9;return false;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.isBiggerLabel = function (labelCoords,elemCoords) {&#xA;&#x9;if (( Math.abs(labelCoords.top - elemCoords.top)  &lt;= PADDING) &amp;&amp; ( Math.abs(labelCoords.bottom - elemCoords.bottom)  &lt;= PADDING) )&#xA;&#x9;&#x9;return true;&#xA;&#x9;return false</values>
		<values>;&#xA;};&#xA;HtmlElementProxy.prototype.installWrappers = function () {&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;// for all defined events install the HTML wrapper&#xA;&#x9;&#x9;for (var i=0; i &lt; events.length; i++) {&#xA;&#x9;&#x9;&#x9;this.installEventWrapper(events[i], this.handleEvent);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#x9;return false;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.installMutationObserver = function (eventName) {&#xA;&#x9;if (!this.element[&quot;$mutationObserverInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[&quot;$mutationObserverInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;rmotObserver.observe(this.element, {&#xA;&#x9;&#x9;&#x9;attributes: true&#xA;&#x9;&#x9;});&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;this.element.addEventListener(&quot;scroll&quot;, function() { rmotRecorder.cacheScreenshot(); }, false);&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.shouldWrapEvent = function (eventName, element) {&#xA;&#x9;// Wrap RMOT_DOWN_EVENT (if needed) or RMOT_TRIGGER_EVENT, not both&#xA;&#x9;if (eventName === RMOT_DOWN_EVENT) {&#xA;&#x9;&#x9;if (element[eventName] || jsUtil.isDijitControl(element) || jsUtil.isSapLS()) {&#xA;&#x9;&#x9;&#x9;// Flag the element </values>
		<values>and its descendants&#xA;&#x9;&#x9;&#x9;element.rmotMouseDownRequired = true;&#xA;&#x9;&#x9;&#x9;var descendants = element.querySelectorAll(&quot;*&quot;);&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; descendants.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;descendants[i].rmotMouseDownRequired = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (!element.rmotMouseDownRequired) return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (eventName === RMOT_TRIGGER_EVENT &amp;&amp; element.rmotMouseDownRequired) {&#xA;&#x9;&#x9;// Do not wrap RMOT_TRIGGER_EVENT if RMOT_DOWN_EVENT is already wrapped&#xA;&#x9;&#x9;return false;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return true;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.removeCallPrototype = function (eventName, element) {&#xA;&#x9;if (eventName === RMOT_DOWN_EVENT&#xA;&#x9;&#x9;&#x9;&amp;&amp; element.rmotOriginalHandler[eventName] === null) {&#xA;&#x9;&#x9;element[eventName].call = null; // TP-66936&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.eventHandler = function(event) {&#xA;&#x9;&#xA;&#x9;var eventName = RMoTeventPrefix + event.type;&#xA;&#x9;event.recorded = event.recorded || jsUtil.isDownEventRecorded(eventName);&#xA;&#xA;&#x9;// if already handled then ignore the event&#xA;&#x9;&#xA;&#x9;if (jsUtil.isTrusted(event, eventName) &amp;&amp; !event.recorded &amp;&amp; !event.corrected) {&#xA;&#x9;&#x9;// Get proxy</values>
		<values> for both element and event.target then call the appropriate event handler&#xA;&#x9;&#x9;var checkedElts = [this, event.target];&#xA;&#x9;&#x9;for (var j = 0; j &lt; checkedElts.length; j++) {&#xA;&#x9;&#x9;&#x9;var elt = checkedElts[j];&#xA;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(elt);&#xA;&#x9;&#x9;&#x9;// Only record events that are listed in htmlMap for the target element&#xA;&#x9;&#x9;&#x9;var targProxy = domainManager.getProxy(event.target);&#xA;&#x9;&#x9;&#x9;if ((targProxy &amp;&amp; targProxy.getEventsToRegister().indexOf(eventName) &gt;= 0) &amp;&amp; !proxy.isWidgetChild) {&#xA;&#x9;&#x9;&#x9;&#x9;proxy.handleEvent(this, eventName, event);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (event.recorded) {&#xA;&#x9;&#x9;&#x9;&#x9;jsUtil.setDownEventRecorded(eventName);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;var ret = true;&#xA;&#x9;if (this.rmotOriginalHandler[eventName] != null) {&#xA;&#x9;&#x9;ret = this.rmotOriginalHandler[eventName].apply(this, arguments);&#xA;&#x9;}&#xA;&#x9;this.proxy.domainObj._parseDocument();&#xA;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#x9;&#xA;&#x9;if (!this.shouldWrapEvent(eventName, this.element)) return;&#xA;&#x9;&#xA;&#x9;if (!jsUtil.fnCompare(this.element[eventName], HtmlElemen</values>
		<values>tProxy.prototype.eventHandler)) {&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventName];&#xA;&#x9;&#x9;this.element[eventName] = HtmlElementProxy.prototype.eventHandler;&#xA;&#x9;&#x9;this.removeCallPrototype(eventName, this.element); // TP-66936&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [RMOT_DOWN_EVENT, RMOT_TRIGGER_EVENT, RMOT_DBLCLICK_EVENT];&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;if (eventName == RMOT_TRIGGER_EVENT) {&#xA;&#x9;&#x9;this.clickRecorded = true;&#xA;&#x9;}&#xA;&#x9;else if (eventName == RMOT_DBLCLICK_EVENT) {&#xA;&#x9;&#x9;if (this.clickRecorded) {&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;HtmlRecordEvent(element, eventName, event, false);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getComputedStyle = function(propName) {&#xA;&#x9;var computedStyle = &quot;&quot;;&#xA;&#x9;var mainWindow = jsUtil.getMainWindow();&#xA;&#x9;if (mainWindow &amp;&amp; mainWindow.getComputedStyle) {&#xA;&#x9;&#x9;var ret = mainWindow.getComputedStyle(this.element);&#xA;&#x9;&#x9;if (ret != null) {&#xA;&#x9;&#x9;&#x9;computedStyle = ret.getPropertyValue(propName);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return computedStyle;&#xA;</values>
		<values>&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = &quot;&quot;;&#xA;&#x9;if (propName == WebGuiConstants.TAGNAME_PROP) {&#xA;&#x9;&#x9;propValue = this.getTagName();&#xA;&#x9;} &#xA;&#x9;else if (propName == WebGuiConstants.CONTENT_PROP) {&#xA;&#x9;&#x9;propValue = jsUtil.getInnerText(this.element);&#xA;&#x9;}&#xA;&#x9;else if (propName == WebGuiConstants.ENABLED_PROP) {&#xA;&#x9;&#x9;var disabled = this.element.disabled;&#xA;&#x9;&#x9;propValue = (disabled) ? !disabled : true;&#xA;&#x9;} &#xA;&#x9;else if (propName == WebGuiConstants.XPATH_PROP) {&#xA;&#x9;&#x9;propValue = jsUtil.getXPath(this.element);&#xA;&#x9;}  &#xA;&#x9;else if (propName == WebGuiConstants.LABEL_PROP) {&#xA;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;}  &#xA;&#x9;else if (RMoTstylesArray.indexOf(propName) &gt;= 0) {&#xA;&#x9;&#x9;propValue = this.getComputedStyle(propName);&#xA;&#x9;} &#xA;&#x9;else if ((propName == &quot;top&quot;) || (propName == &quot;right&quot;) || &#xA;&#x9;&#x9;&#x9;(propName == &quot;bottom&quot;) || (propName == &quot;left&quot;)) {&#xA;&#x9;&#x9;var rect = this.element.getBoundingClientRect();&#xA;&#x9;&#x9;if (rect) {&#xA;&#x9;&#x9;&#x9;if (propName == &quot;left&quot;) propValue = &quot;&quot; + rect.left;&#xA;&#x9;&#x9;&#x9;if (propName == &quot;right&quot;) propValue = &quot;&quot; + rect.right;&#xA;&#x9;&#x9;&#x9;if (propName ==</values>
		<values> &quot;bottom&quot;) propValue = &quot;&quot; + rect.bottom;&#xA;&#x9;&#x9;&#x9;if (propName == &quot;top&quot;) propValue = &quot;&quot; + rect.top;&#xA;&#x9;&#x9;}&#xA;&#x9;} &#xA;&#x9;else if (propName == &quot;visible&quot;) {&#xA;&#x9;&#x9;propValue = &quot;&quot; + this.isVisible().visibility;&#xA;&#x9;}&#xA;&#x9;else if (propName == WebGuiConstants.EXIST_PROP) {&#xA;&#x9;&#x9;propValue = true;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;if (this.element &amp;&amp; this.element.attributes) {&#xA;&#x9;&#x9;&#x9;for (var i=0; i &lt; this.element.attributes.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;var attr = this.element.attributes[i];&#xA;&#x9;&#x9;&#x9;&#x9;if (attr != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (attr.name == propName) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;propValue = attr.value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getTagName =  function() {&#xA;&#x9;var tagName = this.element.tagName;&#xA;&#x9;return (tagName) ? tagName.toLowerCase() : null;&#xA;}&#xA;&#xA;HtmlElementProxy.prototype.getProxyName =  function() {&#xA;&#x9;if (this.proxyName)&#xA;&#x9;&#x9;return this.proxyName;&#xA;&#xA;&#x9;var elementTagName = this.getTagName();&#xA;&#x9;return (elementTagName) ? elementTagName : null;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getUID = function(id) {&#xA;&#x9;this.UID = (id) ? id : this.UID;&#xA;&#x9;return &quot;&quot; + this.UID;&#xA;};</values>
		<values>&#xA;&#xA;HtmlElementProxy.prototype.getCoordinates =  function() {&#xA;&#x9;var element = this.element;&#xA;&#x9;if (element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var rect = element.getBoundingClientRect();&#xA;&#x9;&#x9;if (rect &amp;&amp; element.nodeType) {&#xA;&#x9;&#x9;&#x9;var ownerRect = jsUtil.getOwnerDocumentCoordinates(element);&#xA;&#x9;&#x9;&#x9;var ratio = browserDetails.pixelRatio;&#xA;&#x9;&#x9;&#x9;return {left:(ownerRect.left + rect.left) / ratio,&#xA;&#x9;&#x9;&#x9;&#x9;top:(ownerRect.top + rect.top) / ratio,&#xA;&#x9;&#x9;&#x9;&#x9;right:(ownerRect.right + rect.right) / ratio,&#xA;&#x9;&#x9;&#x9;&#x9;bottom:(ownerRect.bottom + rect.bottom) / ratio};&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;}&#xA;&#xA;&#x9;return {left:0,top:0,right:0,bottom:0};&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = { visibility: true, propagation: false, reachable: true };&#xA;&#xA;&#x9;if (this.element != this.element.ownerDocument.body) {&#xA;&#x9;&#x9;// Check whether the element is displayed&#xA;&#x9;&#x9;if (this.getComputedStyle(&apos;display&apos;) == &apos;none&apos;) { &#xA;&#x9;&#x9;&#x9;ret.visibility = false;&#xA;&#x9;&#x9;&#x9;ret.propagation = true;&#xA;&#x9;&#x9;&#x9;ret.reachable = false;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;// Check whether the element is hidden&#xA;&#x9;&#x9;&#x9;if (this.getComputedStyle</values>
		<values>(&apos;visibility&apos;) == &apos;hidden&apos;) {&#xA;&#x9;&#x9;&#x9;&#x9;ret.visibility = false;&#xA;&#x9;&#x9;&#x9;&#x9;ret.reachable = false;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;// Check whether the element has an area &gt; 0 &#xA;&#x9;&#x9;&#x9;&#x9;if (this.element.offsetWidth === 0 ||&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.element.offsetHeight === 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.visibility = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ret.reachable = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!jsUtil.isInViewPort(this.element, this.element.getBoundingClientRect())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| !jsUtil.isOnTop(this.element)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Check whether the element is in the viewport and underneath another element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ret.visibility = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;// Make the Drop-down options not reachable for desktop to &#xA;&#x9;// bring the recorder output in sync with Mobile webgui drop down&#xA;&#x9;if (ret.reachable &amp;&amp; this.element.tagName &amp;&amp; &#xA;&#x9;&#x9;&#x9;this.element.tagName.toLowerCase() == &quot;option&quot;) {&#xA;&#x9;&#x9;ret.reachable = false;&#xA;&#x9;}&#xA;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.isContainer =  function() {&#xA;&#x9;//TODO: create a proxy for the Dojo scrollbar and overload the isContainer method&#xA;&#x9;if (this.getProperty(&apos;class&apos;) == &apos;mbl</values>
		<values>ScrollBarWrapper&apos;)&#xA;&#x9;&#x9;return false;&#xA;&#x9;else&#xA;&#x9;&#x9;return true;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.setWidgetChild = function(children){&#xA;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xA;&#x9;&#x9;var child = children[i];&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(child);&#xA;&#x9;&#x9;proxy.isWidgetChild=true;&#xA;&#x9;}&#xA;}&#xA;&#xA;HtmlElementProxy.prototype.getParameters =  function() {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;//List of properties that needs to be saved in case the listened event comes too late.&#xA;//e.g. : checked prop for checkboxes or content for selects&#xA;HtmlElementProxy.prototype.getPropertiesToSave =  function() {&#xA;&#x9;return [];&#xA;};&#xA;&#xA;// Chromium Hack to override which and keyCode event properties&#xA;HtmlElementProxy.prototype.overrideKeyboardProps = function(event) {&#xA;&#x9;Object.defineProperty(event, &apos;keyCode&apos;, {&#xA;&#x9;&#x9;&#x9;&#x9;get : function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return this.keyCodeVal;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;});     &#xA;&#x9;Object.defineProperty(event, &apos;which&apos;, {&#xA;&#x9;&#x9;&#x9;&#x9;get : function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return this.keyCodeVal;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;});&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.di</values>
		<values>spatchEvent = function(event) {&#xA;&#x9;var e = this.target.ownerDocument.createEvent(event);&#xA;&#x9;if (event == HTML_KEYBOARD_EVENT) {&#xA;&#x9;&#x9;if (e.initKeyboardEvent) {&#xA;&#x9;&#x9;&#x9;if (this.target.autocomplete != &apos;&apos;)&#x9;this.overrideKeyboardProps(e);&#xA;&#x9;&#x9;&#x9;e.initKeyboardEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;e.initKeyEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;&#x9;}&#xA;&#x9;} else if(event == HTML_MOUSE_EVENT) {&#xA;&#x9;&#x9;if (jsUtil.isRunningInsideIEBrowser()) {&#xA;&#x9;&#x9;&#x9;e.initEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;e.initMouseEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;&#x9;}&#xA;&#x9;} else if (event == HTML_TEXT_EVENT) {&#xA;&#x9;&#x9;e.initTextEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;} else {&#xA;&#x9;&#x9;e.initEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;}&#xA;&#x9;this.target.dispatchEvent(e);&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.setTarget = function(thisTarget) {&#xA;&#x9;this.target = thisTarget;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.getTarget = function() {&#xA;&#x9;return (this.target != null) ? th</values>
		<values>is.target : this.element;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.click = function() {&#xA;&#x9;// 52634 it would seem that Android 5.1 tries to implment the &quot;_blank&quot; value of &quot;target&quot; html attribute&#xA;&#x9;// means that the target of the link must be opened in another window&#xA;&#x9;if ( ! jsUtil.isDesktop()) {&#xA;&#x9;&#x9;var _target = this.target.getAttribute(&apos;target&apos;);&#xA;&#x9;&#x9;if (typeof(_target) == &quot;string&quot;) {&#xA;&#x9;&#x9;&#x9;if (_target == &quot;_blank&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;this.target.target = &quot;_self&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;this.hover();&#xA;&#x9;if (jsUtil.isTouchEnabled()) this.touch(); // 51146&#xA;&#x9;this.mouseClick();&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.mouseClick = function() {&#xA;&#x9;var ownerDoc = this.target.ownerDocument;&#xA;&#x9;var ownerWin = ownerDoc.defaultView;&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;mousedown&apos;, true, true, ownerWin,&#xA;&#x9;&#x9;&#x9;0, 0, 0, 0, 0, false, false, false, false, 0, null);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;mouseup&apos;, true, true, ownerWin,&#xA;&#x9;&#x9;&#x9;0, 0, 0, 0, 0, false, false, false, false, 0, null);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;click&apos;, true, true, ownerWin,&#xA;&#x9;</values>
		<values>&#x9;&#x9;0, 0, 0, 0, 0, false, false, false, false, 0, null);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.dblclick = function() {&#xA;&#x9;var ownerDoc = this.target.ownerDocument;&#xA;&#x9;var ownerWin = ownerDoc.defaultView;&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;dblclick&apos;, true, true, ownerWin, 0, 0, 0, 0, 0, false, false, false, false, 0, null);&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.rightclick = function() {&#xA;&#x9;var ownerDoc = this.target.ownerDocument;&#xA;&#x9;var ownerWin = ownerDoc.defaultView;&#xA;&#x9;var elmRect = this.getCoordinates();&#xA;&#x9;var ptX = elmRect.left + ((elmRect.right - elmRect.left)/2);&#xA;&#x9;var ptY = elmRect.top + ((elmRect.bottom - elmRect.top)/2);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;contextmenu&apos;, true, true, ownerWin,&#xA;&#x9;&#x9;&#x9;1, 0, 0, ptX, ptY, false, false, false, false, 2, null);&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.hover = function() {&#xA;&#x9;var ownerDoc = this.target.ownerDocument;&#xA;&#x9;var ownerWin = ownerDoc.defaultView;&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;mouseover&apos;, true, true, ownerWin,&#xA;&#x9;&#x9;&#x9;0, 0, 0, this.getCoor</values>
		<values>dinates().left, this.getCoordinates().top, false, false, false, false, 0, null);&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.tap = function() {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.tap()&apos;);&#xA;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;var jquery = jQuery(this.getTarget());&#xA;&#x9;&#x9;if (jquery != undefined &amp;&amp; jquery != null) {&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;jquery.trigger(&apos;tap&apos;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch(e) {&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.tap() cannot be performed&apos;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.touch = function() {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.touch()&apos;);&#xA;&#x9;try {&#xA;&#x9;&#x9;if (!domainManager.getDomainObj(&apos;dojo&apos;)) {&#xA;&#x9;&#x9;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;touchstart&apos;, true, true);&#xA;&#x9;&#x9;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;touchend&apos;, true, true);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch(e) {&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.touch() cannot be performed&apos;);&#xA;&#x9;}&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.addCharacterToContent = function(</values>
		<values>character) {&#xA;&#x9;this.target.value += character;&#xA;&#x9;this.dispatchInputEvent(&apos;input&apos;);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.enterKey = function(character) {&#xA;&#x9;var char = character.charCodeAt(0);&#xA;&#x9;this.dispatchEvent(HTML_KEYBOARD_EVENT, &apos;keydown&apos;, true, true, null, 0, 0, 0, 0, 0, char);&#xA;&#x9;this.dispatchEvent(HTML_KEYBOARD_EVENT, &apos;keypress&apos;, true, true, null, 0, 0, 0, 0, 0, char);&#xA;&#x9;this.addCharacterToContent(character);&#xA;&#x9;this.dispatchEvent(HTML_KEYBOARD_EVENT, &apos;keyup&apos;, true, true, null, 0, 0, 0, 0, 0, char);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.deleteProperty = function(property) {&#xA;    var propertyDescriptor = Object.getOwnPropertyDescriptor(this.target, property);&#xA;    if (propertyDescriptor &amp;&amp; propertyDescriptor.configurable) {&#xA;      try{&#xA;    &#x9;  delete this.target[property];&#xA;      } catch(e) {}&#xA;    }&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.clearElementContent = function() {&#xA;&#x9;this.deleteProperty(&apos;value&apos;);&#xA;&#x9;this.target.value = &apos;&apos;;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.enterText = function(text) {&#xA;&#x9;if(this.target.readOnly || this.target.disabled){&#x9;&#xA;</values>
		<values>&#x9;&#x9;return RMOT_READ_ONLY_FAILURE;&#xA;&#x9;}else{&#xA;&#x9;&#x9;this.clearElementContent();&#xA;&#x9;&#x9;for (var i = 0; i &lt; text.length; i++) {&#xA;&#x9;&#x9;&#x9;this.enterKey(text[i]);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.hasChanged = true; // Will dispatch a change event when next action is executed&#xA;&#x9;&#x9;return RMOT_SUCCESS;&#xA;&#xA;&#x9;}&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.pressEnter = function() {&#xA;&#x9;if (!this.target) return RMOT_FAILURE;&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;var form = (window.jQuery) ? jQuery(this.target.form) : this.target.form;&#xA;&#x9;&#x9;if (form &amp;&amp; form.submit&#x9;&amp;&amp; !this.target.classList.contains(&apos;ds-input&apos;)) {&#xA;&#x9;&#x9;&#x9;form.submit();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;// No form to submit, then simulate Enter key events&#xA;&#x9;&#x9;&#x9;this.dispatchPressEnterKeyEvent();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.pressEnter() cannot be performed&apos;);&#xA;&#x9;&#x9;return RMOT_FAILURE;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.dispatchPressEnterKeyEvent = function() {&#xA;&#x9;var ev = this.element.ownerDocument.createEvent(&apos;Event&apos;);&#xA;&#x9;ev.which = 13;&#xA;&#x9;ev.keyCode = 13;&#xA;&#x9;ev.initEvent(&apos;keydown&apos;, true, true);&#xA;&#x9;this.targe</values>
		<values>t.dispatchEvent(ev);&#xA;&#x9;ev.initEvent(&apos;keypress&apos;, true, true);&#xA;&#x9;this.target.dispatchEvent(ev);&#xA;&#x9;ev.initEvent(&apos;keyup&apos;, true, true);&#xA;&#x9;this.target.dispatchEvent(ev);&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.check = function(value) {&#xA;&#x9;this.click();&#xA;&#x9;if (this.target.checked) {&#xA;&#x9;&#x9;var isTrue = (value.toLowerCase() === &quot;true&quot;);&#xA;&#x9;&#x9;this.target.checked = isTrue;&#xA;&#x9;&#x9;return RMOT_SUCCESS;&#xA;&#x9;}&#xA;&#x9;return RMOT_FAILURE;&#xA;};&#xA;&#xA;/*&#xA; * dispatch &quot;input&quot; event. An input event can be: focus, blur, change, input&#xA; * this function must be called with the event to dispatch, for example: this.dispatchInputEvent(&apos;change&apos;);&#xA; */&#xA;HtmlElementProxy.prototype.dispatchInputEvent = function(evt) {&#xA;&#x9;var ev = this.element.ownerDocument.createEvent(&apos;Event&apos;);&#xA;&#x9;ev.initEvent(evt, true, true);&#xA;&#x9;this.target.dispatchEvent(ev);&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.change = function(value) {&#xA;&#x9;var ret = RMOT_INCONCLUSIVE;&#xA;&#x9;var selectedOptions = value.split(&quot;,\u200B &quot;);&#xA;&#x9;var _wMax = 0;&#xA;&#x9;var _jMax = -1;&#xA;&#x9;for (var i in selectedOptions) {&#xA;&#x9;&#x9;var selected = false;&#xA;&#x9;&#x9;var found = RMOT_INCON</values>
		<values>CLUSIVE;&#xA;&#x9;&#x9;for (var j = 0; j &lt; this.target.options.length; j++) {&#xA;&#x9;&#x9;&#x9;var text = this.target.options[j].text;&#xA;&#x9;&#x9;&#x9;var _w = jsUtil.computeStringSimilarity(selectedOptions[i], text);&#xA;&#x9;&#x9;&#x9;if (_w == 10) {&#xA;&#x9;&#x9;&#x9;&#x9;selected = true;&#xA;&#x9;&#x9;&#x9;&#x9;found = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;} else if ((RMOT_GuidedHealing == true) &amp;&amp; (_w &gt;= 5)) {&#xA;&#x9;&#x9;&#x9;&#x9;if (_w &gt; _wMax) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;_wMax = _w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;_jMax = j;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;found = RMOT_FAILURE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((found != RMOT_SUCCESS) &amp;&amp; ((RMOT_GuidedHealing == true)) &amp;&amp; (_wMax &gt;= 5)) {&#xA;&#x9;&#x9;&#x9;j = _jMax;&#xA;&#x9;&#x9;&#x9;selected = true;&#xA;&#x9;&#x9;&#x9;found = RMOT_RECOVERY;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if ((found != RMOT_FAILURE) &amp;&amp; (this.target.options[j].selected !== selected)) {&#xA;&#x9;&#x9;&#x9;this.target.options[j].selected = selected;&#xA;&#x9;&#x9;&#x9;this.dispatchInputEvent(&apos;change&apos;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (found == RMOT_FAILURE)&#xA;&#x9;&#x9;&#x9;ret = RMOT_FAILURE;&#xA;&#x9;&#x9;else if ((found == RMOT_RECOVERY) &amp;&amp; (ret != RMOT_FAILURE))&#xA;&#x9;&#x9;&#x9;ret = RMOT_RECOVERY;&#xA;&#x9;&#x9;else if ((found == RMOT_SUCCESS) &amp;&amp; (ret != RMOT_FAILURE) &amp;&amp; (ret != RMOT_RECOVERY)){&#xA;&#x9;&#x9;&#x9;ret = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;LoggerService.</values>
		<values>logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.change() returns &apos; + ret);&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.dispatchChangeEventAfterEnterText = function() {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.dispatchChangeEventAfterEnterText()&apos;);&#xA;&#x9;var ownerDoc = this.target.ownerDocument;&#xA;&#x9;if (ownerDoc.activeElement) {&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(ownerDoc.activeElement);&#xA;&#x9;&#x9;if (proxy.hasChanged) {&#xA;&#x9;&#x9;&#x9;proxy.dispatchInputEvent(&apos;change&apos;);&#xA;&#x9;&#x9;&#x9;proxy.dispatchInputEvent(&apos;blur&apos;);&#xA;&#x9;&#x9;&#x9;proxy.hasChanged = false;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlElementProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;HtmlElementProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;if (this.target == null) this.setTarget(this.element);&#xA;&#x9;this.dispatchChangeEventAfterEnterText();&#xA;&#x9;if (typeof(this.target.focus) == &quot;function&quot;) {&#xA;&#x9;&#x9;this.target.focus();&#xA;&#x9;}&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onclick&quot; :&#xA;&#x9;&#x9;retStatus = this.click(); // TODO: check i</values>
		<values>f settimeout(.. 0) is always necessary on iOS&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;ontap&quot; :&#xA;&#x9;&#x9;retStatus = this.tap();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;ondblclick&quot; :&#xA;&#x9;&#x9;retStatus = this.dblclick();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;oninput&quot; :&#xA;&#x9;&#x9;retStatus = this.enterText(action.parameters[0].value);&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onkeypress&quot; :&#xA;&#x9;case &quot;onkeydown&quot; :&#xA;&#x9;&#x9;retStatus = this.pressEnter();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;oncheck&quot; :&#xA;&#x9;&#x9;retStatus = this.check(action.parameters[0].value); //TODO: generate a test for this action&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;// Even if &quot;onchange&quot; is available for drop down list only I make the choice to implement it at the low level &#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;retStatus = this.change(action.parameters[0].value);&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onmouseover&quot; :&#xA;&#x9;&#x9;retStatus = (jsUtil.isDesktop()) ? this.hover() : this.click();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onrightclick&quot; :&#xA;&#x9;&#x9;retStatus = this.rightclick();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;&#xA;HtmlElementProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return null;&#xA;};&#xA;&#xA;/*&#xA; * 53500 - Android specific&#xA; * Do not perform ghost click if click event is receiv</values>
		<values>ed before.&#xA; */&#xA;HtmlElementProxy.prototype.installGhostClickWrapper = function() {&#xA;&#x9;if (!RMoTAndroid) return;&#xA;&#xA;&#x9;var eventName = &quot;onclick&quot;;&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventName];&#xA;&#x9;&#x9;this.ghostClicktimer = null; // init&#xA;&#xA;&#x9;&#x9;this.element[eventName] = function(event) {&#xA;&#x9;&#x9;&#x9;var ret = true;&#xA;&#x9;&#x9;&#x9;if (this.rmotOriginalHandler[eventName] != null) {&#xA;&#x9;&#x9;&#x9;&#x9;ret = this.rmotOriginalHandler[eventName].apply(this, arguments);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;clearTimeout(this.proxy.ghostClicktimer);&#xA;&#x9;&#x9;&#x9;this.proxy.ghostClicktimer = null;&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;};&#x9;&#xA;&#x9;}&#xA;};&#xA;&#xA;/*&#xA; * 53500 - Android specific&#xA; * Send a ghost click after 300ms.&#xA; */&#xA;HtmlElementProxy.prototype.ghostClick = function(event) {&#xA;&#x9;if (!RMoTAndroid) return;&#xA;&#xA;&#x9;if (!(event &amp;&amp; RMoTeventPrefix + event.type == RMOT_TRIGGER_EVENT)) return;&#xA;&#xA;&#x9;if (this.ghostClicktimer == null) {&#xA;&#x9;&#x9;var proxy = this;&#xA;&#x9;&#x9;this.ghostClicktimer = setTimeout(function() {&#xA;&#x9;&#x9;&#x9;proxy.target =</values>
		<values> event.target;&#xA;&#x9;&#x9;&#x9;proxy.mouseClick();&#xA;&#x9;&#x9;&#x9;proxy.domainObj._parseDocument();&#xA;&#x9;&#x9;}, 300);&#xA;&#x9;}&#xA;};&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2019. &#xD;&#xA; *  Copyright HCL Technologies Ltd. 2019.  All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;HtmlCustomProxy = function(domainObj, element) {&#xD;&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xD;&#xA;&#x9;HtmlElementProxy.apply(this, arguments);&#xD;&#xA;};&#xD;&#xA;HtmlCustomProxy.prototype = new HtmlElementProxy();&#xD;&#xA;&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. All Rights Reserved. &#xA; *  (C) Copyright HCL Technologies Ltd. 2017. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Con</values>
		<values>tract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlEditableProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlEditableProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlEditableProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;// listened event: recorded event&#xA;&#x9;return {&quot;onkeydown&quot;: &quot;oninput&quot;};&#xA;};&#xA;&#xA;HtmlEditableProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;//HtmlEditableProxy.prototype.getPropertiesToSave = function() {&#xA;//&#x9;return [WebGuiConstants.CONTENT_PROP];&#xA;//};&#xA;&#xA;HtmlEditableProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_DOWN_EVENT, RMOT_TRIGGER_EVENT, RMOT_DBLCLICK_EVENT, &quot;onkeydown&quot;, &quot;onkeyup&quot;];&#xA;};&#xA;&#xA;HtmlEditableProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;switch (eventName) {&#xA;&#x9;case RMOT_DBLCLICK_EVENT:&#xA;&#x9;&#x9;break;&#xA;&#x9;case RMOT_TRIGGER_EVENT:&#xA;&#x9;&#x9;if</values>
		<values>(event.clientX&lt;=0 &amp;&amp; event.clientY&lt;=0) return;&#x9;// 44109&#xA;&#x9;&#x9;if (!RMoTIOS) element.focus();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onkeydown&quot;:&#xA;&#x9;&#x9;if (event.keyCode == 13) { // need to capture enter key&#xA;&#x9;&#x9;&#x9;eventName=&quot;onkeypress&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(event.keyCode == 9){&#xA;&#x9;&#x9;&#x9;//Tab has been pressed and we would ignore the event&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// else will be managed as a repeated action&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onkeyup&quot;:&#xA;&#x9;&#x9;element.RMoTcontent = element.value;&#xA;&#x9;&#x9;return;&#xA;&#x9;default:&#xA;&#x9;&#x9;return;&#x9;// Do not record other events&#xA;&#x9;}&#xA;&#x9;HtmlRecordEvent(element, eventName, event);&#xA;};&#xA;&#xA;HtmlEditableProxy.prototype.addCharacterToContent = function(character) {&#xA;&#x9;this.target.innerHTML += character;&#xA;&#x9;&#xA;&#x9;// known to work on Android and Desktop Firefox&#xA;&#x9;try {&#xA;&#x9;&#x9;this.dispatchEvent(HTML_TEXT_EVENT, &apos;textInput&apos;, false, false, null, character);&#xA;&#x9;} catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, e + &apos; raised when simulating textInput event, stack: &apos; + (e.stack ? e.stack : &apos;not available&apos;));&#xA;&#x9;}&#xA;&#x9;this.dispatchEvent(HTML_EVENT, &apos;input&apos;, false, false);&#xA;};&#xA;&#xA;HtmlEditableProxy.prototype.cle</values>
		<values>arElementContent = function() {&#xA;&#x9;this.target.innerHTML = &apos;&apos;;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xA; *  Copyright HCL Technologies Ltd. 2018, 2019.  All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlAProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlAProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlAProxy.prototype.handleEvent = function(element, eventName, event) {&#x9;&#xA;&#xA;&#x9;//Ignore the programmatic clicks on controls like link, audio, video which could appear as banners in the websites&#xA;&#x9;if (!jsUtil.isTrusted(event, eventName)) {&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;&#xA;&#x9;if (proxy.isWidgetChild) {&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;</values>
		<values>// ensure that the event is recorded only if the element&apos;s proxy is same as current proxy&#xA;&#x9;// for e.g., in case of &lt;body&gt;&lt;a/&gt;&lt;/body&gt; if click on &lt;a&gt; is not handled &amp; its bubbled up&#xA;&#x9;// to &lt;body&gt; but the event target is still &lt;a&gt;, so if we haven&apos;t  installed wrappers on &lt;a&gt;&#xA;&#x9;// there is no reason to handle such an event.&#x9;&#xA;&#x9;if (proxy.proxyClass == this.proxyClass) {&#xA;&#x9;&#x9;HtmlRecordEvent(element, eventName, event, /*dontUseEventTarget*/true);&#xA;&#x9;}&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlMediaProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype = new HtmlElementProxy();&#x9;&#xA;&#xA;HtmlMediaProxy.prototype.installWrappers = function () {&#xA;&#x9;if (this.element </values>
		<values>&amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;// for all defined events install the HTML wrapper&#xA;&#x9;&#x9;for (var i=0; i &lt; events.length; i++) {&#xA;&#x9;&#x9;&#x9;if (!this.element[events[i] + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;&#x9;&#x9;this.element[events[i] + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#x9;&#x9;var proxy = this;&#xA;&#x9;&#x9;&#x9;&#x9;this.element.addEventListener(events[i], function (e) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var eventName = RMoTeventPrefix + e.type;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.handleEvent(this, eventName, e);&#xA;&#x9;&#x9;&#x9;&#x9;}, false);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#x9;return false;&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [&quot;pause&quot;, &quot;playing&quot;];&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;&#xA;&#x9;// Do not record pause if the end of the playback is reached&#xA;&#x9;if (element.ended == true) return;&#xA;&#x9;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;if (proxy.isWidgetChild) {&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;HtmlRecordEvent(element, eventName, event);&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype._getProperty = HtmlMe</values>
		<values>diaProxy.prototype.getProperty;&#xA;HtmlMediaProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = &quot;&quot;;&#xA;&#x9;if (propName == &quot;content&quot; || propName == &quot;src&quot;) {&#xA;&#x9;&#x9;propValue = this.element.currentSrc;&#xA;&#x9;} else {&#xA;&#x9;&#x9;propValue = this._getProperty(propName);&#xA;&#x9;}&#xA;&#x9;return propValue; &#xA;};&#xA;&#xA;HtmlMediaProxy.prototype._applyDecoratedProps =&#xA;&#x9;HtmlMediaProxy.prototype.applyDecoratedProps;&#xA;&#xA;HtmlMediaProxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;&#x9;this._applyDecoratedProps(targetElement);&#x9;&#x9;&#xA;&#x9;&#x9;targetElement.src = this.getProperty(&quot;content&quot;);&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype.play = function() {&#xA;&#x9;this.element.play();&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#x9;&#x9;&#xA;HtmlMediaProxy.prototype.pause = function() {&#xA;&#x9;this.element.pause();&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;HtmlMediaProxy.prototype._executeAction = HtmlMediaProxy.prototype.executeAction;&#xA;HtmlMediaProxy.prototype.executeAction = function(action) {&#xA;&#x9;&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;&#x9;case &quot;onplaying&quot; :&#xA;&#x9;&#x9;&#x9;retStatus = this.play();&#xA;&#x9;</values>
		<values>&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;onpause&quot; :&#xA;&#x9;&#x9;&#x9;retStatus = this.pause();&#xA;&#x9;&#x9;&#x9;break;&#x9;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;retStatus = this._executeAction(action);&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlInput5Proxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9; leftLabel = null ;&#xA;&#x9; topLabel = null ;&#xA;&#x9; bottomLabel =null;&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlInput5Proxy.prototype._applyDecoratedProps = HtmlInput5Proxy.prototype.applyDecoratedProps;&#xA;HtmlInput5Proxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;targetElement.value = this.getProperty(&quot;value&quot;);&#xA;&#x9;targetElement.label = this.getProperty(&quot;label&quot;);&#xA;&#x9;this._applyDecoratedProps(targetElement</values>
		<values>);&#xA;};&#xA;&#x9;&#xA;HtmlInput5Proxy.prototype.getPropertiesToSave =  function() {&#xA;&#x9;return [&quot;value&quot;];&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype._getProperty = HtmlInput5Proxy.prototype.getProperty;&#xA;HtmlInput5Proxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = &quot;&quot;;&#xA;&#x9;if (propName == WebGuiConstants.CONTENT_PROP) {&#xA;&#x9;&#x9;// intentionally blank, do not return anything&#xA;&#x9;&#x9;// as we do not want to capture the content of the element&#xA;&#x9;}&#xA;&#x9;else if (propName == &quot;value&quot;) {&#xA;&#x9;&#x9;propValue = this.element.value;&#xA;&#x9;}&#xA;&#x9;else if (propName == &quot;label&quot;){&#xA;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;propValue = this._getProperty(propName);&#xA;&#x9;}&#xA;&#x9;return propValue; &#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype.getProxyName = function() {&#xA;&#x9;// all HTML 5 input elements are identified as inputtextfield per grammar&#xA;&#x9;return &quot;inputtextfield&quot;;&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [&quot;oninput&quot;];&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype._getLabel = HtmlInput5Proxy.prototype.getLabel;&#xA;HtmlInput5Proxy.prototype.getLabel = function () {&#xA;&#x9;var label=&quot;&quot;;&#xA;&#x9;//Compu</values>
		<values>te label from the placeholder&#xA;&#x9;label = this.getProperty(&apos;placeholder&apos;);&#xA;&#x9;if( label == undefined || label == null || label == &quot;&quot;){&#xA;&#x9;&#x9;//Compute Label from the For attribute defined&#xA;&#x9;&#x9;label = this._getLabel();&#xA;&#x9;&#x9;if (label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;if(this.leftLabel){&#xA;&#x9;&#x9;&#x9;&#x9;label = this.leftLabel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top &gt; Bottom&#xA;HtmlInput5Proxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.bottomLabel;&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype.typeSupport = function() {&#xA;&#x9;// Replace entered value and check whether it is a valid one.&#xA;&#x9;var val = this.element.value;&#xA;&#x9;this.element.value = &quot;#&quot;;&#xA;&#x9;var support = (this.element.value!=&quot;#&quot;);&#xA;&#x9;this.element.value = val;&#xA;&#x9;return support;&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var html5TypeSupport = this.typeSu</values>
		<values>pport();&#xA;&#x9;if (eventName == &quot;oninput&quot;) {&#xA;&#x9;&#x9;HtmlRecordEvent(element, eventName, event);&#xA;&#x9;&#x9;if (html5TypeSupport) {&#xA;&#x9;&#x9;&#x9;// Clear previous action if not yet performed in order to ignore intermediate values&#xA;&#x9;&#x9;&#x9;clearTimeout(this.handlerTimeOut); &#xA;&#x9;&#x9;&#x9;this.handlerTimeOut = setTimeout(function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// 51155: Dump repeated action&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.domainObj._recordEvent(event, RMoTstartEvent, null, element, null);&#xA;&#x9;&#x9;&#x9;}, 500);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.element.value;&#xA;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;HtmlInput5Proxy.prototype._executeAction = HtmlInput5Proxy.prototype.executeAction;&#xA;HtmlInput5Proxy.prototype.executeAction = function(action) {&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;if (actionType==&apos;oninput&apos;) {&#xA;&#x9;&#x9;var html5TypeSupport = this.typeSupport();&#xA;&#x9;&#x9;if (html5TypeSupport &amp;&amp; this.element.type != &apos;number&apos;) {&#xA;&#x9;&#x9;&#x9;this.element.value =</values>
		<values> action.parameters[0].value;&#xA;&#x9;&#x9;&#x9;this.setTarget(this.element);&#xA;&#x9;&#x9;&#x9;this.dispatchInputEvent(&apos;change&apos;);&#xA;&#x9;&#x9;&#x9;return RMOT_SUCCESS;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return this._executeAction(action);&#xA;};&#xA;&#xA;//Priority index : Left &gt; Top &gt; Bottom&#xA;HtmlInput5Proxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.bottomLabel;&#xA;};&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;HtmlInput5ColorProxy = function(domainObj, element) {&#xD;&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xD;&#xA;&#x9;HtmlInput5Proxy.apply(this,arguments);&#xD;&#xA;&#x9; leftLabel = null ;&#xD;&#xA;&#x9; topLabel = null ;&#xD;&#xA;&#x9; bottomLabel =null;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlInput5ColorProxy.prototype = new HtmlInput5Proxy();&#xD;&#xA;&#xD;&#xA;HtmlInput5ColorProxy.prototype.getProxyName = function() {&#xD;&#xA;&#x9;return &quot;inputcolor&quot;;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;Htm</values>
		<values>lInput5ColorProxy.prototype.getEventsToRegister = function() {&#xD;&#xA;&#x9;return [&quot;onchange&quot;];&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlInput5ColorProxy.prototype.handleEvent = function(element, eventName, event) {&#xD;&#xA;&#x9;HtmlRecordEvent(element, &quot;oninput&quot;, event);&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlInput5ColorProxy.prototype._executeAction = HtmlInput5ColorProxy.prototype.executeAction;&#xD;&#xA;HtmlInput5ColorProxy.prototype.executeAction = function(action) {&#xD;&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xD;&#xA;&#x9;var actionType = action.type;&#xD;&#xA;&#xD;&#xA;&#x9;if (actionType==&apos;oninput&apos;) {&#xD;&#xA;&#x9;&#x9;var html5TypeSupport = this.typeSupport();&#xD;&#xA;&#x9;&#x9;if (html5TypeSupport &amp;&amp; this.element.type != &apos;number&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;this.element.value = action.parameters[0].value;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (browserDetails.name == &quot;Safari&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.element.style.background = action.parameters[0].value;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;this.setTarget(this.element);&#xD;&#xA;&#x9;&#x9;&#x9;this.dispatchInputEvent(&apos;change&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;return RMOT_SUCCESS;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return this._executeAction(action);&#xD;&#xA;};&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyr</values>
		<values>ight IBM Corporation 2014. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;HtmlInput5DateProxy = function(domainObj, element) {&#xD;&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xD;&#xA;&#x9;HtmlInput5Proxy.apply(this,arguments);&#xD;&#xA;&#x9; leftLabel = null ;&#xD;&#xA;&#x9; topLabel = null ;&#xD;&#xA;&#x9; bottomLabel =null;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlInput5DateProxy.prototype = new HtmlInput5Proxy();&#xD;&#xA;&#xD;&#xA;HtmlInput5DateProxy.prototype.getProxyName = function() {&#xD;&#xA;&#x9;return &quot;inputdate&quot;;&#xD;&#xA;};&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlSelectProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments</values>
		<values>);&#xA;&#x9;leftLabel = null;&#xA;&#x9;topLabel = null;&#xA;&#x9;this.selectopenActionId = null;&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlSelectProxy.prototype._applyDecoratedProps = HtmlSelectProxy.prototype.applyDecoratedProps;&#xA;&#xA;HtmlSelectProxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;targetElement.options = this.getProperty(&quot;options&quot;);&#xA;&#x9;targetElement.length = this.getProperty(&quot;length&quot;);&#xA;&#x9;targetElement.name = this.getProperty(&quot;name&quot;);&#xA;&#x9;if(this.element.type != &quot;hidden&quot;){&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;&#x9;}&#xA;};&#xA;&#x9;&#xA;HtmlSelectProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiConstants.CONTENT_PROP];&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [RMoTchangeEvent, RMOT_DOWN_EVENT];&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return jsUtil.isDesktop() ? {} : {&quot;ontouchstart&quot;: RMoTchangeEvent};&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype._installWrappers = HtmlSelectProxy.prot</values>
		<values>otype.installWrappers;&#xA;HtmlSelectProxy.prototype.installWrappers = function () {&#xA;&#x9;rmotHierarchy.setSavedProperties(this);&#xA;&#x9;return this._installWrappers();&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype.shouldWrapEvent = function (eventName, element) {&#xA;&#x9;return true;&#xA;}&#xA;&#xA;HtmlSelectProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;// Capture hierarchy on click/touch event and use it when onchange is fired &#xA;&#x9;if (eventName == RMoTchangeEvent) {&#xA;&#x9;&#x9;// capture the hierarchy now since if there are previous repeated events &#xA;&#x9;&#x9;// the hierarchy will be incorrect&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;//The below fix is added to address the selection of dropdown items. &#xA;&#x9;&#x9;//Without this fix, only alternative dropdown items were selected.&#xA;&#x9;&#x9;if (this.selectopenActionId == null) {&#xA;&#x9;&#x9;&#x9;this.selectopenActionId = this.domainObj._captureScreenshot();&#xA;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.updateHierarchy();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (jsUtil.isDesktop()) {&#xA;&#x9;&#x9;&#x9;this.domainObj._recordEventWithExistingScreenshot(eventName, this.getProperty(WebGuiConstants.TAGNAME_PROP), &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element, rmotHie</values>
		<values>rarchy.currentHierarchy, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.getParameters(), this.selectopenActionId);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.selectopenActionId = null;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;this.selectopenActionId = this.domainObj._captureScreenshot();&#xA;&#x9;&#x9;webGuiRecorderInterfaceObj.updateHierarchy();&#xA;&#x9;&#x9;this.ghostClick(event);&#xA;&#x9;}&#xA;&#x9;webGuiRecorderInterfaceObj.handleRepeatedAction(element, eventName);&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype._getProperty = HtmlSelectProxy.prototype.getProperty;&#xA;HtmlSelectProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;&#x9;var propertyValue = null;&#xA;&#x9;&#x9;if (propertyName == undefined || propertyName == null) {&#xA;&#x9;&#x9;&#x9;return propertyValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;switch (propertyName) {&#xA;&#x9;&#x9;&#x9;case WebGuiConstants.CONTENT_PROP :&#xA;&#x9;&#x9;&#x9;&#x9;var text = &apos;&apos;;&#xA;&#x9;&#x9;&#x9;&#x9;for(var i = 0; i &lt; this.element.options.length; i++) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(this.element.options[i].selected) { &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;text += &apos;,\u200B &apos;+this.element.options[i].text;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = text.substring(3,text.length);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;case &quot;name&quot; :&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this.element.name;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;case</values>
		<values> &quot;length&quot; :&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this.element.length;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;case &quot;options&quot; :&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; this.element.options.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;propertyValue += this.element.options[i].text + &apos;, &apos;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;// remove trailing comma and space&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;propertyValue.substring(0, propertyValue.length-2);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;case WebGuiConstants.LABEL_PROP :&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this.getLabel();&#xA;&#x9;&#x9;&#x9;&#x9;if(propertyValue)&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = propertyValue.trim();&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return propertyValue;&#xA;};&#xA;&#xA;HtmlSelectProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;return parameters;&#xA;};&#xA;HtmlSelectProxy.prototype._getLabel = HtmlSelectProxy.prototype.getLabel;&#xA;HtmlSelectProxy.prototype.getLabel = function () {&#xA;&#x9;var label=&quot;&quot;;&#xA;&#x9;&#x9;//Compute Label from the For attribute defined&#xA;&#x9;&#x9;label = this._getLabel();&#xA;&#x9;&#x9;if (typeof(label)==&apos;un</values>
		<values>defined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top &gt; Bottom&#xA;HtmlSelectProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel ;&#xA;};&#xA;/////////////////////////// HtmlOptionProxy begin////////////////////////////////&#xA;&#xA;HtmlOptionProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9;//this.isWidgetChild=true;&#xA;};&#xA;&#xA;HtmlOptionProxy.prototype = new HtmlElementProxy();&#xA;&#xA;&#xA;HtmlOptionProxy.prototype.installWrappers = function() {&#x9;&#xA;&#x9;return false; &#xA;};&#xA;&#xA;HtmlOptionProxy.prototype.getEventsToRegister = function() {&#x9;&#xA;&#x9;return [];&#xA;};&#xA;&#xA;/////////////////////////// HtmlOptionProxy end////////////////////////////////&#xA;&#xA;/*&#xA; *&#xA; *&#x9;Lic</values>
		<values>ensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlTextInputProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlEditableProxy.apply(this,arguments);&#xA;&#x9; leftLabel = null ;&#xA;&#x9; topLabel = null ;&#xA;&#x9; bottomLabel =null;&#xA;};&#xA;&#xA;HtmlTextInputProxy.prototype = new HtmlEditableProxy();&#xA;&#xA;HtmlTextInputProxy.prototype._applyDecoratedProps = HtmlTextInputProxy.prototype.applyDecoratedProps;&#xA;HtmlTextInputProxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;if(this.element.type != &quot;hidden&quot;){&#xA;&#x9;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;&#x9;}&#xA;};&#x9;&#xA;&#xA;HtmlTextInputProxy.prototype._getProperty = HtmlTextInputProxy.prototype.getProperty;&#xA;HtmlTextInputProxy.prototype.getPro</values>
		<values>perty = function(propertyName) {&#xA;&#x9;var propertyValue = null;&#xA;&#x9;switch (propertyName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP :&#xA;&#x9;case WebGuiConstants.VALUE_PROP :&#xA;&#x9;&#x9;propertyValue = this.element.RMoTcontent || this.element.value; &#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP :&#xA;&#x9;&#x9;propertyValue = this.getLabel();&#xA;&#x9;&#x9;if(propertyValue)&#xA;&#x9;&#x9;propertyValue = propertyValue.trim();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;}&#xA;&#x9;return propertyValue;&#xA;};&#xA;&#xA;HtmlTextInputProxy.prototype._getLabel = HtmlTextInputProxy.prototype.getLabel;&#xA;HtmlTextInputProxy.prototype.getLabel = function () {&#xA;&#x9;var direction = traversal.LEFT;&#xA;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;}&#xA;&#x9;//Compute Label from the For attribute defined&#xA;&#x9;label = this._getLabel(traversal.TOP,direction);&#xA;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;&#xA;&#xA;//</values>
		<values>Priority index : Left &gt; Top &gt; Bottom&#xA;HtmlTextInputProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.bottomLabel;&#xA;};&#xA;&#xA;&#xA;HtmlTextInputProxy.prototype.getProxyName =  function() {&#xA;&#x9;var elementTagName = (this.element.tagName) ? this.element.tagName : &quot;&quot;;&#xA;&#x9;// Append type to the input elements&#xA;&#x9;if (elementTagName &amp;&amp; this.element.type) {&#xA;&#x9;&#x9;if (inputTypes.indexOf(this.element.type.toLowerCase()) &gt;= 0) {&#xA;&#x9;&#x9;&#x9;//elementTagName += this.element.getAttribute(&quot;type&quot;);//Works in All browsers: Defect 44178&#xA;&#x9;&#x9;&#x9;// Above code breaking the search type input field in wikipedia in IE9&#xA;&#x9;&#x9;&#x9;// Require grammar entry for inputsearch which is missing.&#xA;&#x9;&#x9;&#x9;elementTagName += this.element.type;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;elementTagName += &quot;textfield&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return (elementTagName) ? elementTagName.toLowerCase() : null;&#xA;}&#xA;&#xA;HtmlTextInputProxy.prototype._addCharacterToContent = HtmlElementProxy.prototype.addCharacterToContent; // bypass HtmlEditableProxy implementation&#xA;HtmlTextInputProxy.prototype.addCharacter</values>
		<values>ToContent = function(character) {&#xA;&#x9;this._addCharacterToContent(character);&#xA;};&#xA;&#xA;HtmlTextInputProxy.prototype.clearElementContent = HtmlElementProxy.prototype.clearElementContent; // bypass HtmlEditableProxy implementation&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy = function(domainObj,element) {&#xD;&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xD;&#xA;&#x9;HtmlTextInputProxy.apply(this,arguments);&#xD;&#xA;&#x9; leftLabel = null ;&#xD;&#xA;&#x9; topLabel = null ;&#xD;&#xA;&#x9; bottomLabel =null;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy.prototype = new HtmlTextInputProxy();&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy.prototype.getProxyName = function() {&#xD;&#xA;&#x9;return &quot;inputsearch&quot;;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy.prototype.getEventsToRegister = function(){&#xD;&#xA;&#x9;return [RMOT_TRIGGER_E</values>
		<values>VENT, RMOT_DBLCLICK_EVENT, &quot;onkeydown&quot;, &quot;onsearch&quot;];&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy.prototype._handleEvent = HtmlTextSearchInputProxy.prototype.handleEvent;&#xD;&#xA;HtmlTextSearchInputProxy.prototype.handleEvent = function(element, eventName, event) {&#xD;&#xA;&#x9;switch (eventName) {&#xD;&#xA;&#x9;&#x9;case RMOT_TRIGGER_EVENT:&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case &quot;onsearch&quot;:&#xD;&#xA;&#x9;&#x9;&#x9;if (element.value == &quot;&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;HtmlRecordEvent(element, &quot;onclear&quot;, event);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;event.recorded = true;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;default:&#xD;&#xA;&#x9;&#x9;&#x9;this._handleEvent(element, eventName, event);&#xD;&#xA;&#x9;}&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlTextSearchInputProxy.prototype._executeAction = HtmlTextSearchInputProxy.prototype.executeAction;&#xD;&#xA;HtmlTextSearchInputProxy.prototype.executeAction = function(action) {&#xD;&#xA;&#x9;var retStatus = RMOT_SUCCESS;&#xD;&#xA;&#x9;var actionType = action.type;&#xD;&#xA;&#xD;&#xA;&#x9;if (actionType == &quot;onclear&quot;) {&#xD;&#xA;&#x9;&#x9;this.element.value = &quot;&quot;;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else {&#xD;&#xA;&#x9;&#x9;retStatus = this._executeAction(action);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return retStatus;&#xD;&#xA;};&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corpora</values>
		<values>tion 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlTextAreaProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlTextAreaProxy.prototype = new HtmlTextInputProxy();&#xA;&#xA;HtmlTextAreaProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;switch (eventName) {&#xA;&#x9;case RMOT_TRIGGER_EVENT:&#xA;&#x9;&#x9;if(event.clientX&lt;=0 &amp;&amp; event.clientY&lt;=0) return;&#x9;// 44109&#xA;&#x9;&#x9;if (!RMoTIOS) element.focus();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onkeydown&quot;:&#xA;&#x9;&#x9;if (event.keyCode == 13) { // need to capture enter key&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(event.keyCode == 9){&#xA;&#x9;&#x9;&#x9;//Tab has been pressed and we would ignore the event&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// else will be managed as a repeated action&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;return;&#x9;// Do not record other events&#xA;&#x9;}&#xA;&#x9;HtmlRecordEvent(element, eventName, event);&#xA;};&#xA;&#xA;HtmlTextAreaProxy.prototype.getProxyName =</values>
		<values>  function() {&#xA;&#x9;return (this.proxyName) ? this.proxyName : this.getTagName();&#xA;}&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;HtmlInputFileProxy = function(domainObj, element) {&#xD;&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xD;&#xA;&#x9;HtmlTextInputProxy.apply(this,arguments);&#xD;&#xA;&#x9; leftLabel = null ;&#xD;&#xA;&#x9; topLabel = null ;&#xD;&#xA;&#x9; bottomLabel =null;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;HtmlInputFileProxy.prototype = new HtmlTextInputProxy();&#xD;&#xA;&#xD;&#xA;HtmlInputFileProxy.prototype._executeAction = HtmlInputFileProxy.prototype.executeAction;&#xD;&#xA;HtmlInputFileProxy.prototype.executeAction = function(action) {&#xD;&#xA;&#x9;if (action.type == &apos;onclick&apos;) {&#xD;&#xA;&#x9;&#x9;return RMOT_FAILURE; // Let Selenium handle the action&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return this._executeAction(action);&#xD;&#xA;};&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *</values>
		<values>&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;/*&#xA; * CheckBox/Radio Proxy&#xA; * A common proxy for both checkbox and radio input elements&#xA; */&#x9;&#xA;HtmlCheckBoxRadioProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9;rightLabel = null ;&#xA;};&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype._applyDecoratedProps = HtmlCheckBoxRadioProxy.prototype.applyDecoratedProps;&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype.applyDecoratedProps = function( targetElement){&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checked = this.getProperty(&quot;checked&quot;);&#xA;&#x9;if(this.element.type != &quot;hidden&quot;){&#xA;&#x9;targetElement.label = this.getProperty(&quot;label&quot;);&#xA;&#x9;}&#xA;};&#xA;&#x9;&#xA;HtmlCheckBoxRadioProxy.prototype.getPropertiesToSave = func</values>
		<values>tion() {&#xA;&#x9;return [WebGuiConstants.CHECKED_PROP];&#xA;};&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype._getProperty = HtmlCheckBoxRadioProxy.prototype.getProperty;&#xA;HtmlCheckBoxRadioProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;var propertyValue = null;&#xA;&#x9;if (propertyName == undefined || propertyName == null) {&#xA;&#x9;&#x9;return propertyValue;&#xA;&#x9;}&#xA;&#x9;switch (propertyName) {&#xA;&#x9;&#x9;case &quot;checked&quot; :&#xA;&#x9;&#x9;&#x9; propertyValue = this.element.checked; &#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;label&quot; :&#xA;&#x9;&#x9;&#x9;propertyValue = this.getLabel();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;}&#xA;&#x9;return propertyValue;&#xA;};&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;if (jsUtil.isDijitControl(this.element)) return [RMOT_DOWN_EVENT];&#xA;&#x9;if (this.element[RMoTclickEvent]&#xA;&#x9;&#x9;|| this.element.getAttribute(&apos;data-propertyuihint&apos;)) return [RMOT_TRIGGER_EVENT];&#xA;&#x9;&#xA;&#x9;return [&quot;onchange&quot;];&#xA;};&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype._installWrappers = HtmlCheckBoxRadioProxy.prototype.installWrappers;&#xA;HtmlCheckBoxRadioProxy.prototype.installWrappers = functi</values>
		<values>on () {&#xA;&#x9;rmotHierarchy.setSavedProperties(this);&#xA;&#x9;return this._installWrappers();&#xA;};&#xA;&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;if (proxy.isVisible().reachable) {&#x9;// 43032&#xA;&#x9;&#x9;HtmlRecordEvent(element, &quot;onclick&quot;, event);&#x9;&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlCheckBoxRadioProxy.prototype._getLabel = HtmlCheckBoxRadioProxy.prototype.getLabel;&#xA;HtmlCheckBoxRadioProxy.prototype.getLabel = function () {&#xA;&#x9;var label=&quot;&quot;;&#xA;&#x9;//Compute Label from the For attribute defined&#xA;&#x9;label = this._getLabel();&#xA;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;var direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;&#xA;//Check if the label is alligned properly to the checkbox/radio button&#xA;HtmlCheckBoxRadioProxy.prototype.isValidLabel = function (tentativeLabe</values>
		<values>l) {&#xA;&#x9;var elemCoords = this.getCoordinates();&#xA;&#x9;if(tentativeLabel.nodeType == 3){&#xA;&#x9;&#x9;if(!this.rightLabel)&#xA;&#x9;&#x9;&#x9;this.rightLabel = jsUtil.getTrimText(tentativeLabel);&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;var labelCoords = domainManager.getProxy(tentativeLabel).getCoordinates();&#xA;&#x9;&#x9;//WI 53982: Check if the label falls within the below category&#xA;&#x9;&#x9;// a) Smaller than the control or&#xA;&#x9;&#x9;// b) Not larger than the PADDING value&#xA;&#x9;&#x9;if(this.isSmallerLabel(labelCoords,elemCoords) || this.isBiggerLabel(labelCoords,elemCoords))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(elemCoords.left &lt; labelCoords.left)&#xA;&#x9;&#x9;&#x9;&#x9;if(!this.rightLabel)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rightLabel = jsUtil.getTrimText(tentativeLabel);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;//Priority index :right&#xA;HtmlCheckBoxRadioProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.rightLabel;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract wit</values>
		<values>h IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlSubmitProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlSubmitProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlSubmitProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [RMOT_TRIGGER_EVENT, RMOT_DBLCLICK_EVENT, &quot;onkeydown&quot;];&#xA;};&#xA;&#xA;HtmlSubmitProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;switch (eventName) {&#xA;&#x9;case RMOT_DBLCLICK_EVENT:&#xA;&#x9;&#x9;break;&#xA;&#x9;case RMOT_TRIGGER_EVENT:&#xA;&#x9;&#x9;if (!jsUtil.isTrusted(event, eventName)) return;&#x9;// ignore triggered events&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onkeydown&quot;:&#xA;&#x9;&#x9;if (event.keyCode == 13 || event.keyCode == 32) { // capture enter and space keys&#xA;&#x9;&#x9;&#x9;eventName=&quot;onclick&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;return; // do not handle any other keyboard events&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;return;&#x9;// Do not record other events&#xA;&#x9;}&#xA;&#x9;HtmlRecordEvent(element, eventName, event);&#xA;};&#xA;&#xA;HtmlSubmitProxy.prototype._getProperty = HtmlSubmitProxy.prototype.getProperty;&#xA;HtmlSubmitProxy.prototype.getProp</values>
		<values>erty = function(propertyName) {&#xA;&#x9;var propertyValue = null;&#xA;&#x9;switch (propertyName) {&#xA;&#x9;&#x9;case WebGuiConstants.CONTENT_PROP :&#xA;&#x9;&#x9;&#x9;if(this.element.tagName.toLowerCase() == &quot;input&quot;){//Input submit/reset button&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this.element.value; &#xA;&#x9;&#x9;&#x9;}else{ // button element&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;}&#xA;&#x9;return propertyValue;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlSvgProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;// Only keep the svg controls bigger than 2px&#xA;&#x9;const sizeThreshold = 2;&#xA;&#x9;const rect = this.element.getBoundingClientRect();&#xA;&#x9;if (rect.width &lt;</values>
		<values> sizeThreshold || rect.height &lt; sizeThreshold) {&#xA;&#x9;&#x9;this.isWidgetChild = true;&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlSvgProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlSvgProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = { visibility: true, propagation: false, reachable: true };&#xA;&#xA;&#x9;// Make graphic element always visible and reachable&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;HtmlSvgProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;HtmlRecordEvent(element, eventName, event, true);&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlAreaProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlAProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlAreaProxy.prototype = new HtmlAProxy();&#xA;&#xA;HtmlAreaProxy.prototype.isVisible = function() {&#xA;&#x9;var ret = { visibility: true, pro</values>
		<values>pagation: false, reachable: true };&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;HtmlAreaProxy.prototype._getProperty = HtmlAreaProxy.prototype.getProperty;&#xA;HtmlAreaProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;var propertyValue = null;&#xA;&#x9;var element = this.element;&#xA;&#x9;&#xA;&#x9;switch (propertyName) {&#xA;&#x9;case &quot;checksum&quot;:&#xA;&#x9;&#x9;if (!this.isRectArea()) return &apos;&apos;;&#xA;&#xA;&#x9;&#x9;var img = this.getMapImage(element);&#xA;&#x9;&#x9;if (img!=null &amp;&amp; img.src!=null &amp;&amp; element.coords) {&#xA;&#x9;&#x9;&#x9;propertyValue = this.getChecksum(img, element.coords);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;shape&quot;:&#xA;&#x9;&#x9;propertyValue = this.element.shape;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return propertyValue;&#xA;};&#xA;&#xA;HtmlAreaProxy.prototype._applyDecoratedProps = HtmlAreaProxy.prototype.applyDecoratedProps;&#xA;HtmlAreaProxy.prototype.applyDecoratedProps = function(targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checksum = (this.isRectArea()) ? this.getProperty(&quot;checksum&quot;) : &apos;&apos;;&#xA;};&#xA;&#xA;HtmlAreaProxy.prototype.getCoordinates = function() {&#xA;&#x9;var element = this.elemen</values>
		<values>t;&#xA;&#x9;if (element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;if (element.nodeType) {&#xA;&#x9;&#x9;&#x9;var rect = this.getImageRect(element);&#xA;&#x9;&#x9;&#x9;var ownerRect = jsUtil.getOwnerDocumentCoordinates(element);&#xA;&#xA;&#x9;&#x9;&#x9;return {left:Math.round(ownerRect.left+rect.left),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top:Math.round(ownerRect.top+rect.top),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;right:Math.round(ownerRect.right+rect.right),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bottom:Math.round(ownerRect.bottom+rect.bottom)}&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return {left:0,top:0,right:0,bottom:0};&#xA;};&#xA;&#xA;/**&#xA; * @returns true if the shape is a rectangle&#xA; */&#xA;HtmlAreaProxy.prototype.isRectArea = function() {&#xA;&#x9;var shape = this.getProperty(&quot;shape&quot;);&#xA;&#x9;if (shape) {&#xA;&#x9;&#x9;return shape.toLowerCase()==&quot;rect&quot;;&#xA;&#x9;}&#xA;&#x9;return false;&#xA;};&#xA;&#xA;/**&#xA; * @returns element&apos;s linked image&#xA; */&#xA;HtmlAreaProxy.prototype.getMapImage =  function() {&#xA;&#x9;var map = this.element.parentElement;&#xA;&#x9;if (!map.image) {&#xA;&#x9;&#x9;map.image = jsUtil.getElementByAttribute(&apos;usemap&apos;, new Array(&quot;#&quot;+map.name), map.parentElement);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return map.image;&#xA;};&#xA;&#xA;/**&#xA; * @returns Coordinates of the linked image&#xA; */&#xA;HtmlAreaProxy.prototype.getI</values>
		<values>mageRect =  function() {&#xA;&#x9;var img = this.getMapImage(this.element);&#xA;&#x9;if (!img)&#xA;&#x9;&#x9;return {left:0,top:0,right:0,bottom:0};&#xA;&#x9;&#xA;&#x9;return img.getBoundingClientRect();&#xA;};&#xA;&#xA;/**&#xA; * @returns absolute coordinates of the given area&#xA; */&#xA;HtmlAreaProxy.prototype.getCoords =  function() {&#xA;&#x9;var map = this.getImageRect(this.element);&#xA;&#x9;var position = this.element.coords.split(&apos;,&apos;);&#xA;&#x9;var rect = {left: Math.floor(position[0]) + Math.floor(map.left), &#xA;&#x9;&#x9;&#x9;&#x9;top: Math.floor(position[1]) + Math.floor(map.top), &#xA;&#x9;&#x9;&#x9;&#x9;right: Math.floor(position[2]) + Math.floor(map.left),&#xA;&#x9;&#x9;&#x9;&#x9;bottom: Math.floor(position[3]) + Math.floor(map.top)};&#xA;&#x9;&#xA;&#x9;return rect;&#xA;};&#xA;&#xA;/**&#xA; * @returns checksum of the image contained in the area&#xA; */&#xA;HtmlAreaProxy.prototype.getChecksum =  function(img, coords) {&#xA;&#x9;var canvas = document.createElement(&quot;canvas&quot;);&#xA;    &#xA;    var position = coords.split(&apos;,&apos;);&#xA;    canvas.width = Math.floor(position[2]) - Math.floor(position[0]);&#xA;    canvas.height = Math.floor(position[3]) - Math.floor(position[1]);&#xA;&#xA;    var ctx = canvas.getContext(&quot;2d</values>
		<values>&quot;);&#xA;    ctx.drawImage(img, -Math.floor(position[0]), -Math.floor(position[1]));&#xA;    &#xA;    try {&#xA;    &#x9;var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);&#xA;    &#x9;var key = 0x4A4A4A4A;&#xA;        for (var i = 0; i &lt; imgData.data.length; i += 4) {&#xA;        &#x9;key ^= (imgData.data[i] &lt;&lt; 24)&#xA;    &#x9;        | (imgData.data[i+1] &lt;&lt; 16)&#xA;    &#x9;        | (imgData.data[i+2] &lt;&lt; 8)&#xA;    &#x9;        | (imgData.data[i+3]);&#xA;        }&#xA;        return &apos;&apos; + key;&#xA;&#x9;}&#xA;&#x9;catch (e) {&#x9;// Security issue&#xA;&#x9;}&#xA;&#xA;&#x9;return &apos;&apos;;&#xA;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. &#xA; *  Copyright HCL Technologies Ltd. 2017.  All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlBodyProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlBodyProxy.prot</values>
		<values>otype = new HtmlElementProxy();&#xA;&#xA;HtmlBodyProxy.prototype._applyDecoratedProps = HtmlBodyProxy.prototype.applyDecoratedProps;&#xA;HtmlBodyProxy.prototype.applyDecoratedProps = function(targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#xA;&#x9;// Add some useful properties&#xA;&#x9;targetElement.url = window.location.href;&#xA;&#x9;targetElement.userAgent = navigator.userAgent;&#xA;&#x9;if (window.devicePixelRatio) targetElement.devicePixelRatio = this.getProperty(WebGuiConstants.DEVICEPIXELRATIO_PROP);&#xA;&#x9;targetElement.width = this.getProperty(WebGuiConstants.WIDTH_PROP);&#xA;&#x9;targetElement.height = this.getProperty(WebGuiConstants.HEIGHT_PROP);&#xA;&#x9;targetElement.scrollable = this.getProperty(WebGuiConstants.SCROLLABLE_PROP);&#xA;&#x9;targetElement.title = this.getProperty(WebGuiConstants.TITLE_PROP);&#xA;&#x9;targetElement.rtw = RMOT_VERSION;&#xA;&#x9;&#xA;&#x9;for (var i = 0; i &lt; domainManager.registeredDomains.length; i++) {&#xA;&#x9;&#x9;var domainObj = domainManager.registeredDomains[i];&#xA;&#x9;&#x9;var version = domainObj.getDomainVersion();&#xA;&#x9;&#x9;if (version) {&#xA;&#x9;&#x9;&#x9;targetElement[domainObj.getD</values>
		<values>omainName()] = version;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;&#xA;HtmlBodyProxy.prototype._getProperty = HtmlBodyProxy.prototype.getProperty;&#xA;HtmlBodyProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;var propertyValue = null;&#xA;&#x9;switch (propertyName) {&#xA;&#x9;    case WebGuiConstants.URL_PROP:&#xA;&#x9;&#x9;    propertyValue = window.location.href;&#xA;&#x9;&#x9;    break;&#xA;&#x9;&#x9;case WebGuiConstants.DEVICEPIXELRATIO_PROP:&#xA;&#x9;&#x9;&#x9;propertyValue = window.devicePixelRatio;  &#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.WIDTH_PROP:&#xA;&#x9;&#x9;&#x9;propertyValue = jsUtil.getWindowWidth(this.element);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.HEIGHT_PROP:&#xA;&#x9;&#x9;&#x9;propertyValue = jsUtil.getWindowHeight(this.element);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.SCROLLABLE_PROP:&#xA;&#x9;&#x9;&#x9;propertyValue = (document.body.scrollHeight &gt; jsUtil.getWindowHeight(this.element)) ? true : false;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.TITLE_PROP:&#xA;&#x9;&#x9;&#x9;propertyValue = document.title || window.location.href;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;}&#xA;&#x9;return propertyValue;&#xA;};&#xA;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *</values>
		<values>&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlCanvasProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlCanvasProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [&quot;onclick&quot;];&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;proxy.setRelativeCoordinates(event);&#xA;&#x9;&#xA;&#x9;HtmlRecordEvent(element, &quot;onclickAt&quot;, event);&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype.setRelativeCoordinates = function(event) {&#xA;&#x9;var rect = this.element.getBoundingClientRect();&#xA;&#x9;&#xA;&#x9;this.relativeCoordinates = {&#xA;&#x9;&#x9;x: parseInt(event.clientX - rect.left),&#xA;&#x9;&#x9;y: parseInt(event.clientY - rect.top)&#xA;&#x9;};&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype.g</values>
		<values>etParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.x = this.relativeCoordinates.x;&#xA;&#x9;parameters.y = this.relativeCoordinates.y;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype.executeAction = function(action) {&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;if (this.target == null) this.target = this.element;&#xA;&#x9;&#xA;&#x9;var rect = this.element.getBoundingClientRect();&#xA;&#x9;&#xA;&#x9;var x = Math.floor(action.parameters[1].value) + Math.floor(rect.left);&#xA;&#x9;var y = Math.floor(action.parameters[0].value) + Math.floor(rect.top);&#xA;&#x9;retStatus = this.click(x, y);&#xA;&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype.dispatchEvent = function(event) {&#xA;&#x9;var e = document.createEvent(event);&#xA;&#x9;e.initMouseEvent.apply(e, Array.prototype.slice.call(arguments, 1));&#xA;&#x9;this.target.dispatchEvent(e);&#xA;};&#xA;&#xA;HtmlCanvasProxy.prototype._dispatchEvent = HtmlElementProxy.prototype.dispatchEvent;&#xA;HtmlCanvasProxy.prototype.click = function(x, y) {&#xA;&#x9;this.tap(); // 42036&#xA;&#x9;this._dispatchEvent(HTML_EVENT, &apos;focus&apos;, false, false);&#xA;&#x9;if (this.ta</values>
		<values>rget.ontouchstart) this._dispatchEvent(HTML_MOUSE_EVENT, &apos;touchstart&apos;, true, true);&#xA;&#x9;if (this.target.ontouchend) this._dispatchEvent(HTML_MOUSE_EVENT, &apos;touchend&apos;, true, true);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;mousedown&apos;, true, true, null, 1, 0, 0, x, y, 0, 0, 0, 0, 0, null);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;click&apos;, true, true, null, 1, 0, 0, x, y, 0, 0, 0, 0, 0, null);&#xA;&#x9;this.dispatchEvent(HTML_MOUSE_EVENT, &apos;mouseup&apos;, true, true, null, 1, 0, 0, x, y, 0, 0, 0, 0, 0, null);&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;HtmlFrameProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlFramePr</values>
		<values>oxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [&quot;onload&quot;];&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;rmotRecorder.parseDocument();&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype._isVisible = HtmlFrameProxy.prototype.isVisible;&#xA;HtmlFrameProxy.prototype.isVisible = function() {&#xA;&#x9;var ret = this._isVisible();&#xA;&#x9;ret.visibility = true;&#xA;&#x9;if (!ret.reachable || (jsUtil.isInViewPort(this.element, this.element.getBoundingClientRect()) &amp;&amp; !jsUtil.isOnTop(this.element))) {&#xA;&#x9;&#x9;ret.propagation = true;&#xA;&#x9;}&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype.getSecurityError =  function() {&#xA;&#x9;try {&#xA;&#x9;&#x9;var access = this.element.contentDocument || this.element.contentWindow.document;&#xA;&#x9;}&#xA;&#x9;catch (e) {&#x9;// Security issue: frame&apos;s document is not in the current domain.&#xA;&#x9;&#x9;return e;&#xA;&#x9;}&#xA;&#x9;return null;&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype.getProxyName =  function() {&#xA;&#x9;return this.getSecurityError() ? &apos;crossframe&apos; : this.getTagName();&#xA;};&#xA;&#xA;HtmlFrameProxy.prototype._applyDecoratedProps = HtmlFrameProxy.prototype.applyDecoratedProps</values>
		<values>;&#xA;HtmlFrameProxy.prototype.applyDecoratedProps = function(targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;if (this.getSecurityError()) targetElement.error = &apos;&apos; + this.getSecurityError();&#xA;};&#xA;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2016. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;/////////////////////////// HtmlTableHeaderProxy ///////////////////////////&#xA;HtmlTableHeaderProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlTableHeaderProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlTableHeaderProxy.prototype._applyDecoratedProps = HtmlTableHeaderProxy.prototype.applyDecoratedProps;&#xA;HtmlTableHeaderProxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;t</values>
		<values>argetElement.column = this.getProperty(&quot;column&quot;);&#xA;};&#xA;&#xA;HtmlTableHeaderProxy.prototype._getProperty = HtmlTableHeaderProxy.prototype.getProperty;&#xA;HtmlTableHeaderProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;&#x9;var propertyValue = null;&#xA;&#x9;&#x9;if (propertyName == undefined || propertyName == null) {&#xA;&#x9;&#x9;&#x9;return propertyValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;switch (propertyName) {&#xA;&#x9;&#x9;&#x9;case &quot;column&quot; :&#xA;&#x9;&#x9;&#x9;&#x9;var col = this.element.cellIndex + 1;&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = col + &apos;&apos;;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return propertyValue;&#xA;};&#xA;&#xA;/////////////////////////// HtmlTableCellProxy ///////////////////////////&#xA;HtmlTableCellProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;HtmlTableCellProxy.prototype = new HtmlElementProxy();&#xA;&#xA;HtmlTableCellProxy.prototype._applyDecoratedProps = HtmlTableCellProxy.prototype.applyDecoratedProps;&#xA;HtmlTableCellProxy.prototype.applyDecoratedProps = function( targetElement) {&#xA;&#x9;this</values>
		<values>._applyDecoratedProps(targetElement);&#xA;&#x9;targetElement.position = this.getProperty(&quot;position&quot;);&#xA;};&#xA;&#xA;HtmlTableCellProxy.prototype._getProperty = HtmlTableCellProxy.prototype.getProperty;&#xA;HtmlTableCellProxy.prototype.getProperty = function(propertyName) {&#xA;&#x9;&#x9;var propertyValue = null;&#xA;&#x9;&#x9;if (propertyName == undefined || propertyName == null) {&#xA;&#x9;&#x9;&#x9;return propertyValue;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;switch (propertyName) {&#xA;&#x9;&#x9;&#x9;case &quot;position&quot; :&#xA;&#x9;&#x9;&#x9;&#x9;var row = this.element.parentElement.rowIndex;&#xA;&#x9;&#x9;&#x9;&#x9;row = (this.isTableWithHeader()) ? row : row + 1;&#xA;&#x9;&#x9;&#x9;&#x9;var col = this.element.cellIndex + 1;&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = col + &apos; : &apos; + row;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;propertyValue = this._getProperty(propertyName);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return propertyValue;&#xA;};&#xA;&#xA;HtmlTableCellProxy.prototype.isTableWithHeader = function() {&#xA;&#x9;var parent = this.element.parentElement;&#xA;&#x9;while (parent &amp;&amp; parent.tagName.toLowerCase() != &apos;table&apos;) {&#xA;&#x9;&#x9;parent = parent.parentElement;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;var ret = false;&#xA;&#x9;try{&#xA;&#x9;&#x9;ret = (parent.rows[0].cells[0].tagName.toLowerCase() == &apos;th&apos;);&#xA;&#x9;}&#xA;&#x9;catch(err){}&#xA;&#x9;&#xA;&#x9;ret</values>
		<values>urn ret;&#xA;};&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;var dojoTriggeredEvent = RMOT_TRIGGER_EVENT.replace(RMoTeventPrefix, &apos;&apos;);&#xD;&#xA;&#xD;&#xA;var DOJO_DOMAIN_NAME = &quot;dojo&quot;;&#xD;&#xA;&#xD;&#xA;// kind of constants defining Dojo Mobile objects&#xD;&#xA;var DOJO_UNIDENTIFIED&#x9;= &quot;djmunidentified&quot;;&#xD;&#xA;// views&#xD;&#xA;var DJM_VIEW&#x9;&#x9;&#x9;= &quot;djmview&quot;;&#xD;&#xA;var DJM_SCROLLABLEVIEW&#x9;= &quot;djmscrollableview&quot;;&#xD;&#xA;var DJM_SWAPVIEW&#x9;&#x9;= &quot;djmswapview&quot;;&#xD;&#xA;var DJM_TREEVIEW&#x9;&#x9;= &quot;djmtreeview&quot;;&#xD;&#xA;var DJM_VIEWCONTROLLER&#x9;= &quot;djmviewcontroller&quot;;&#xD;&#xA;// heading&#xD;&#xA;var DJM_HEADING&#x9;&#x9;&#x9;= &quot;djmheading&quot;;&#xD;&#xA;// lists&#xD;&#xA;var DJM_ROUNDRECTCATEGORY&#x9;= &quot;djmroundrectcategory&quot;;&#xD;&#xA;var DJM_EDGETOEDGECATEGORY&#x9;= &quot;djmedgetoedgecategory&quot;;&#xD;&#xA;var DJM_ROUNDRECTLIST&#x9;&#x9;= &quot;djmroundrectlist&quot;;&#xD;&#xA;var DJM_EDGETOEDGELIST&#x9;&#x9;= &quot;djmedgetoedgelist&quot;;&#xD;&#xA;var DJM_ROUNDRECTDATALIST&#x9;= &quot;</values>
		<values>djmroundrectdatalist&quot;;&#xD;&#xA;var DJM_EDGETOEDGEDATALIST&#x9;= &quot;djmedgetoedgedatalist&quot;;&#xD;&#xA;var DJM_ROUNDRECTSTORELIST&#x9;= &quot;djmroundrectstorelist&quot;;&#xD;&#xA;var DJM_EDGETOEDGESTORELIST&#x9;= &quot;djmedgetoedgestorelist&quot;;&#xD;&#xA;&#xD;&#xA;var DJM_ICON&#x9;&#x9;&#x9;= &quot;djmicon&quot;;&#xD;&#xA;var DJM_ICONCONTAINER&#x9;= &quot;djmiconcontainer&quot;;&#xD;&#xA;var DJM_ICONMENU&#x9;&#x9;= &quot;djmiconmenu&quot;;&#xD;&#xA;var DJM_ICONMENUITEM&#x9;= &quot;djmiconmenuitem&quot;;&#xD;&#xA;var DJM_ICONITEM&#x9;&#x9;= &quot;djmiconitem&quot;;&#xD;&#xA;var DJM_ICONITEMPANE&#x9;= &quot;djmiconitempane&quot;;&#xD;&#xA;var DJM_TABBAR&#x9;&#x9;&#x9;= &quot;djmtabbar&quot;;&#xD;&#xA;var DJM_ROUNDRECT&#x9;&#x9;= &quot;djmroundrect&quot;;&#xD;&#xA;var DJM_CONTENTPANE&#x9;&#x9;= &quot;djmcontentpane&quot;;&#xD;&#xA;var DJM_CONTAINER&#x9;&#x9;= &quot;djmcontainer&quot;;&#xD;&#xA;var DJM_PANE&#x9;&#x9;&#x9;= &quot;djmpane&quot;;&#xD;&#xA;var DJM_SCROLLABLEPANE&#x9;= &quot;djmscrollablepane&quot;;&#xD;&#xA;var DJM_OPENER&#x9;&#x9;&#x9;= &quot;djmopener&quot;;&#xD;&#xA;var DJM_OVERLAY&#x9;&#x9;&#x9;= &quot;djmoverlay&quot;;&#xD;&#xA;var&#x9;DJM_TOOLTIP&#x9;&#x9;&#x9;= &quot;djmtooltip&quot;;&#x9;&#xD;&#xA;var DJM_FIXEDSPLITTER&#x9;&#x9;= &quot;djmfixedsplitter&quot;;&#xD;&#xA;var DJM_FIXEDSPLITTERPANE&#x9;= &quot;djmfixedsplitterpane&quot;;&#xD;&#xA;var DJM_GRIDLAYOUT&#x9;&#x9;&#x9;= &quot;djmgridlayout&quot;;&#xD;&#xA;var DJM_SCREENSIZEAWARE&#x9;&#x9;= &quot;djmscreensizeaware&quot;;&#xD;&#xA;var DJM_SIMPLEDIALOG&#x9;&#x9;= &quot;djmsimpledialog&quot;;&#xD;&#xA;var DJM_PROGRESSINDICATOR&#x9;= &quot;djmpr</values>
		<values>ogressindicator&quot;;&#xD;&#xA;var DJM_PROGRESSBAR&#x9;&#x9;&#x9;= &quot;djmprogressbar&quot;;&#xD;&#xA;var DJM_RATING&#x9;&#x9;&#x9;&#x9;= &quot;djmrating&quot;;&#xD;&#xA;&#xD;&#xA;//basic widgets&#xD;&#xA;var DJM_BUTTON &#x9;&#x9;&#x9;= &quot;djmbutton&quot;;&#xD;&#xA;var DJM_TABBARBUTTON&#x9;= &quot;djmtabbarbutton&quot;;&#xD;&#xA;var DJM_TOOLBARBUTTON&#x9;= &quot;djmtoolbarbutton&quot;;&#xD;&#xA;var DJM_TOGGLEBUTTON&#x9;= &quot;djmtogglebutton&quot;;&#xD;&#xA;var DJM_CHECKBOX &#x9;&#x9;= &quot;djmcheckbox&quot;;&#xD;&#xA;var DJM_RADIOBUTTON&#x9;&#x9;= &quot;djmradiobutton&quot;;&#xD;&#xA;var DJM_SWITCH&#x9;&#x9;&#x9;= &quot;djmswitch&quot;;&#xD;&#xA;var DJM_SLIDER&#x9;&#x9;&#x9;= &quot;djmslider&quot;;&#xD;&#xA;var DJM_SLIDER_TOUCHBOX = &quot;djmslidertouchbox&quot;;&#xD;&#xA;var DJM_LISTITEM&#x9;&#x9;= &quot;djmlistitem&quot;;&#xD;&#xA;var DJM_ACCORDION&#x9;&#x9;= &quot;djmaccordion&quot;;&#xD;&#xA;var DJM_ACCORDIONTITLE&#x9;=&quot;djmaccordiontitle&quot;;&#xD;&#xA;var DJM_PAGEINDICATOR&#x9;= &quot;djmpageindicator&quot;;&#xD;&#xA;//text widgets&#xD;&#xA;var DJM_TEXTBOX&#x9;&#x9;&#x9;&#x9;= &quot;djmtextbox&quot;;&#xD;&#xA;var DJM_TEXTAREA&#x9;&#x9;&#x9;= &quot;djmtextarea&quot;;&#xD;&#xA;var DJM_EXPANDINGTEXTAREA&#x9;= &quot;djmexpandingtextarea&quot;;&#xD;&#xA;var DJM_SEARCHBOX&#x9;&#x9;&#x9;= &quot;djmsearchbox&quot;;&#xD;&#xA;var DJM_COMBOBOX&#x9;&#x9;&#x9;= &quot;djmcombobox&quot;;&#xD;&#xA;//valuepicker&#xD;&#xA;var DJM_VALUEPICKER&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;djmvaluepicker&quot;;&#xD;&#xA;var DJM_VALUEPICKERSLOT&#x9;&#x9;&#x9;&#x9;= &quot;djmvaluepickerslot&quot;;&#xD;&#xA;//var DJM_VALUEPICKERSLOTPLUSBUTTON&#x9;= &quot;djmvaluepickerslo</values>
		<values>tplusbutton&quot;;&#xD;&#xA;//var DJM_VALUEPICKERSLOTMINUSBUTTON&#x9;= &quot;djmvaluepickerslotminusbutton&quot;;&#xD;&#xA;var DJM_VALUEPICKERDATEPICKER&#x9;&#x9;= &quot;djmvaluepickerdatepicker&quot;;&#xD;&#xA;var DJM_VALUEPICKERTIMEPICKER&#x9;&#x9;= &quot;djmvaluepickertimepicker&quot;;&#xD;&#xA;//spinwheel&#xD;&#xA;var DJM_SPINWHEEL&#x9;&#x9;&#x9;&#x9;= &quot;djmspinwheel&quot;;&#xD;&#xA;var DJM_SPINWHEELSLOT&#x9;&#x9;&#x9;= &quot;djmspinwheelslot&quot;;&#xD;&#xA;var DJM_SPINWHEELDATEPICKER&#x9;&#x9;= &quot;djmspinwheeldatepicker&quot;;&#xD;&#xA;var DJM_SPINWHEELTIMEPICKER&#x9;&#x9;= &quot;djmspinwheeltimepicker&quot;;&#xD;&#xA;// audio/video&#xD;&#xA;var DJM_AUDIO = &quot;djmaudio&quot;;&#xD;&#xA;var DJM_VIDEO = &quot;djmvideo&quot;;&#xD;&#xA;// gauges&#xD;&#xA;//var DGAUGES_CIRCULARGAUGE &#x9;&#x9;&#x9;= &quot;djmcirculargauge&quot;;&#xD;&#xA;//var DGAUGES_RECTANGULARGAUGE &#x9;&#x9;= &quot;djmrectangulargauge&quot;;&#xD;&#xA;//var DGAUGES_CIRCULARLINEARGAUGE &#x9;= &quot;djmcircularlineargauge&quot;;&#xD;&#xA;//var DGAUGES_SEMICIRCULARLINEARGAUGE = &quot;djmsemicircularlineargauge&quot;;&#xD;&#xA;//var DGAUGES_HORIZONTALLINEARGAUGE &#x9;= &quot;djmhorizontallineargauge&quot;;&#xD;&#xA;//var DGAUGES_VERTICALLINEARGAUGE &#x9;= &quot;djmverticallineargauge&quot;;&#xD;&#xA;//var DJM_GLOSSYCIRCULARGAUGE&#x9;&#x9;= &quot;djmglossycirculargauge&quot;;&#xD;&#xA;var DJM_GAUGEBASE&#x9;&#x9;= &quot;djmgaugebase&quot;;&#xD;&#xA;&#xD;&#xA;// carousel&#xD;&#xA;var DJM_CAROUSEL&#x9;&#x9;</values>
		<values>&#x9;&#x9;= &quot;djmcarousel&quot;;&#xD;&#xA;var DJM_DATACAROUSEL&#x9;&#x9;&#x9;= &quot;djmdatacarousel&quot;;&#xD;&#xA;var DJM_STORECAROUSEL&#x9;&#x9;&#x9;= &quot;djmstorecarousel&quot;;&#xD;&#xA;var DJM_CAROUSELITEM&#x9;&#x9;&#x9;= &quot;djmcarouselitem&quot;;&#xD;&#xA;var DJM_CAROUSELBUTTON&#x9;&#x9;&#x9;= &quot;djmcarouselbutton&quot;;&#xD;&#xA;var DJM_CAROUSELBUTTONNEXT&#x9;&#x9;= &quot;djmcarouselbuttonnext&quot;;&#xD;&#xA;var DJM_CAROUSELBUTTONPREVIOUS&#x9;= &quot;djmcarouselbuttonprevious&quot;;&#xD;&#xA;//chart&#xD;&#xA;var DCHART_CHART&#x9;= &quot;djmchart&quot;;&#xD;&#xA;// map&#xD;&#xA;var DGEO_MAP&#x9;&#x9;&#x9;= &quot;djmmap&quot;;&#xD;&#xA;var DGEO_OPENLAYERMAP&#x9;= &quot;djmopenlayermap&quot;;&#xD;&#xA;// dijit widget&#xD;&#xA;var DIJIT_CONTAINED&#x9;= &quot;djmcontained&quot;;&#xD;&#xA;&#xD;&#xA;// Dojo TagNames&#xD;&#xA;//var DJM_TEXTBOX&#x9;&#x9;&#x9;&#x9;= &quot;djmtextbox&quot;;&#xD;&#xA;//var DJM_BUTTON &#x9;&#x9;&#x9;= &quot;djmbutton&quot;;&#xD;&#xA;var DJ_CHECKBOX &#x9;&#x9;= &quot;djcheckbox&quot;;&#xD;&#xA;var DJ_RADIOBUTTON&#x9;&#x9;= &quot;djradiobutton&quot;;&#xD;&#xA;//var DJM_TOGGLEBUTTON&#x9;= &quot;djmtogglebutton&quot;;&#xD;&#xA;// var DOJO_UNIDENTIFIED&#x9;= &quot;djmUnidentified&quot;;&#xD;&#xA;var DJ_WIDGETBASE&#x9;&#x9;= &quot;djmelement&quot;;&#xD;&#xA;var DJ_SELECT&#x9;&#x9;&#x9;= &quot;select&quot;;&#xD;&#xA;// var DJM_ICONMENUITEM&#x9;&#x9;= &quot;djmIconMenuItem&quot;;//TODO: This is temporary&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//List of widgets to be identified&#xD;&#xA;//in the following array order matters! the widget identification is based on &quot;insta</values>
		<values>nceof&quot;, then class hierachy must be &#xD;&#xA;//respected in reverse order (from subclasses to superclass)&#xD;&#xA;//0 : dojo class&#xD;&#xA;//1 : identifier for later user in recorder&#xD;&#xA;var djmClassesMap = {&#x9;&#x9;//&quot;dijit._WidgetBase&quot;:DJ_WIDGETBASE,&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// views&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.SwapView&quot;: DJM_SWAPVIEW,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.TreeView&quot;: DJM_TREEVIEW,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ScrollableView&quot;: DJM_SCROLLABLEVIEW,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.View&quot;: DJM_VIEW,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// viewcontroller is a singleton&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ViewController&quot;: DJM_VIEWCONTROLLER,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// heading&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Heading&quot;: DJM_HEADING,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// list categories             &#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.EdgeToEdgeCategory&quot;: DJM_EDGETOEDGECATEGORY,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.RoundRectCategor</values>
		<values>y&quot;: DJM_ROUNDRECTCATEGORY,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// lists&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.EdgeToEdgeDataList&quot;: DJM_EDGETOEDGEDATALIST,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.EdgeToEdgeStoreList&quot;: DJM_EDGETOEDGESTORELIST,   &#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.RoundRectDataList&quot;: DJM_ROUNDRECTDATALIST,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.RoundRectStoreList&quot;: DJM_ROUNDRECTSTORELIST,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.EdgeToEdgeList&quot;: DJM_EDGETOEDGELIST,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.RoundRectList&quot;: DJM_ROUNDRECTLIST,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// list items&#xD;&#xA;                            &quot;dojox.mobile.ListItem&quot;: DJM_LISTITEM,&#xD;&#xA;&#xD;&#xA;                            // dojox.mobile.Container family&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.RoundRect&quot;: DJM_ROUNDRECT,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ContentPane&quot;: DJM_CONTENTPANE,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.FixedSplitterPane&quot;: DJM_FIXEDSPLITTERPANE,&#xD;&#xA;                   </values>
		<values>    &#x9;&#x9;&quot;dojox.mobile.Container&quot;: DJM_CONTAINER,&#xD;&#xA;&#xD;&#xA;                       &#x9;&#x9;// dojox.mobile.Pane family&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ScrollablePane&quot;: DJM_SCROLLABLEPANE,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.SimpleDialog&quot;: DJM_SIMPLEDIALOG,                    &#x9;&#x9;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Pane&quot;: DJM_PANE,&#xD;&#xA;&#xD;&#xA;                       &#x9;&#x9;// dojox.mobile.Tooltip family&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Opener&quot;: DJM_OPENER,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Tooltip&quot;: DJM_TOOLTIP,&#x9;&#xD;&#xA;&#xD;&#xA;                       &#x9;&#x9;// dojox.mobile.IconMenu&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.GridLayout&quot;: DJM_GRIDLAYOUT,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.IconMenu&quot;: DJM_ICONMENU,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// Button family&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.RadioButton&quot;: DJM_RADIOBUTTON,               &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.CheckBox&quot;: DJM_CHECKBOX,                       &#x9;&#x9;&#xD;&#xA;                           &#x9;&quot;dojox.mobile.ToggleButton&quot;: DJM_TOGGLEBUTTON,     </values>
		<values>                  &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Button&quot;: DJM_BUTTON,&#xD;&#xA;                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;// TextBox family                       &#x9;&#x9;&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ComboBox&quot;: DJM_COMBOBOX,&#xD;&#xA;                            &quot;dojox.mobile.ExpandingTextArea&quot;: DJM_EXPANDINGTEXTAREA,&#xD;&#xA;                            &quot;dojox.mobile.TextArea&quot;: DJM_TEXTAREA,&#xD;&#xA;                            &quot;dojox.mobile.SearchBox&quot;: DJM_SEARCHBOX,&#xD;&#xA;                            &quot;dojox.mobile.TextBox&quot;: DJM_TEXTBOX,&#xD;&#xA;                            &#xD;&#xA;                            // ValuePicker family&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.ValuePickerSlot&quot;: DJM_VALUEPICKERSLOT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.ValuePickerTimePicker&quot;: DJM_VALUEPICKERTIMEPICKER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.ValuePickerDatePicker&quot;: DJM_VALUEPICKERDATEPICKER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.ValuePicker&quot;: DJM_VALUEPICKER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// SpinWheel family&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.SpinWheelSlot&quot;: DJM_SPINWHEELSLOT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.SpinWheelTimePicker&quot;: DJM_SPINWHEEL</values>
		<values>TIMEPICKER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.SpinWheelDatePicker&quot;: DJM_SPINWHEELDATEPICKER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.SpinWheel&quot;: DJM_SPINWHEEL,&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Audio family &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.Video&quot;: DJM_VIDEO,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.Audio&quot;: DJM_AUDIO,&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Carousel family&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.CarouselItem&quot;: DJM_CAROUSELITEM,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.DataCarousel&quot;: DJM_DATACAROUSEL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.StoreCarousel&quot;: DJM_STORECAROUSEL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.Carousel&quot;: DJM_CAROUSEL,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                       &#x9;&#x9;&#xD;&#xA;                            // misc&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.TabBar&quot;: DJM_TABBAR,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Overlay&quot;: DJM_OVERLAY,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.FixedSplitter&quot;: DJM_FIXEDSPLITTER,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.IconMenuItem&quot;: DJM_ICONMENUITEM,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ScreenSizeAware&quot;: DJM_SCREENSIZEAWARE,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.ProgressIndicator&quot;: DJM_PROGRESSINDICATOR,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.</values>
		<values>mobile.ProgressBar&quot;: DJM_PROGRESSBAR,&#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.Rating&quot;: DJM_RATING,                      &#x9;&#x9;&#xD;&#xA;                           &#x9;&quot;dojox.mobile.TabBarButton&quot;: DJM_TABBARBUTTON,&#xD;&#xA;                           &#x9;&quot;dojox.mobile.ToolBarButton&quot;: DJM_TOOLBARBUTTON,&#xD;&#xA;                            &quot;dojox.mobile.Switch&quot;: DJM_SWITCH,&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.mobile.Slider&quot;: DJM_SLIDER,                        &#xD;&#xA;                       &#x9;&#x9;&quot;dojox.mobile.IconContainer&quot;: DJM_ICONCONTAINER,&#xD;&#xA;                            &quot;dojox.mobile.IconItem&quot;: DJM_ICONITEM,&#xD;&#xA;                            &quot;dojox.mobile.Icon&quot;: DJM_ICON,&#xD;&#xA;                            &quot;dojox.mobile._IconItemPane&quot;: DJM_ICONITEMPANE,&#xD;&#xA;                            &quot;dojox.mobile.Accordion&quot;: DJM_ACCORDION,                        &#xD;&#xA;                            &quot;dojox.mobile.PageIndicator&quot;: DJM_PAGEINDICATOR,                          &#xD;&#xA;&#xD;&#xA;                            // Gauges family&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.dgauges.GaugeBase&quot;: DJM_GAUGEBASE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// charts&#xD;&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.charting.widget.Chart&quot;: DCHART_CHART,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// maps&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.geo.charting.widget.Map&quot;: DGEO_MAP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dojox.geo.openlayers.widget.Map&quot;: DGEO_OPENLAYERMAP,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// last one&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dijit._Contained&quot;: DIJIT_CONTAINED,&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;// List of Dojo Widgets supported by RTW. This list is used to identify the custom/unsupported widgets&#xD;&#xA;// Widgets that have declaredClass value not in this list will be considered as a custom/unsupported widgets&#xD;&#xA;var dojoSupportedWidgetClassList =[&quot;dojox.mobile.*&quot;,&#xD;&#xA;                                   &quot;dojox.dgauges.*&quot;,&#xD;&#xA;                                   &quot;dojox.charting.widget.Chart&quot;,&#xD;&#xA;                                   &quot;dojox.geo.*&quot;,&#xD;&#xA;                           ];&#xD;&#xA;&#xD;&#xA;// List of containers that can have child elements from other domains &#xD;&#xA;var dojoContainerList = [&#xD;&#xA;                     &quot;dijit._Contained&quot;,&#xD;&#xA;                     &quot;dojox.mobile.Heading&quot;,&#xD;&#xA;                     &quot;dijit.layout.ContentPane&quot;,&#xD;&#xA;                     &quot;dijit.form.Form&quot;,&#xD;&#xA;   </values>
		<values>                  &quot;dojox.mobile.Container&quot;,&#xD;&#xA;                     &quot;dojox.mobile.ScrollableView&quot; ,&#xD;&#xA;                     &quot;dojox.mobile.View&quot;,&#xD;&#xA;                     &quot;dojox.mobile.TreeView&quot;,&#xD;&#xA;                     &quot;dojox.mobile.RoundRect&quot;,&#xD;&#xA;                     &quot;dojox.mobile.ContentPane&quot;,&#xD;&#xA;                     &quot;dojox.mobile.FixedSplitterPane&quot;,&#xD;&#xA;                     &quot;dojox.mobile.Container&quot;,&#xD;&#xA;                     &quot;dojox.mobile.IconContainer&quot;,&#xD;&#xA;                     &quot;dojox.mobile.IconMenu&quot;,&#xD;&#xA;                     &quot;dojox.mobile._IconItemPane&quot;,&#xD;&#xA;                     &quot;dojox.mobile.ScrollablePane&quot;,&#xD;&#xA;                     &quot;dojox.mobile.SimpleDialog&quot;,&#xD;&#xA;                     &quot;dojox.mobile.Pane&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.EdgeToEdgeCategory&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.EdgeToEdgeDataList&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.EdgeToEdgeStoreList&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.EdgeToEdgeList&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.FixedSplitter&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.FixedSplitterPane&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.RoundRectCategory&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.RoundRectDataList&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;doj</values>
		<values>ox.mobile.RoundRectList&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.TabBar&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.GridLayout&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.SwapView&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.ListItem&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.Accordion&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.SpinWheel&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.SpinWheelTimePicker&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.SpinWheelDatePicker&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.ValuePicker&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.ValuePickerTimePicker&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.ValuePickerDatePicker&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.geo.charting.widget.Map&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.DataCarousel&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.StoreCarousel&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dojox.mobile.Carousel&quot;,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; ];&#xD;&#xA;&#xD;&#xA;// This map defines the Dojo Class Name and Proxy that handles the Dojo Widget&#xD;&#xA;var dojoProxyMap={&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.TextBox&quot;:&quot;DojoMobileTextBoxProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SearchBox&quot;:&quot;DojoMobileSearchBoxProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ExpandingTextArea&quot;:&quot;DojoMobileTextAreaProxy&quot;,&#xD;&#xA;        &quot;dojox.mobile.TextArea&quot;:&quot;DojoMobileTextAreaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.CheckBox&quot;:&quot;DojoMobileCheckBoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.RadioButton&quot;:&quot;DojoMobileCheck</values>
		<values>BoxRadioProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ToggleButton&quot;:&quot;DojoMobileToggleButtonProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.Switch&quot;:&quot;DojoMobileSwitchProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.Slider&quot;:&quot;DojoMobileSliderProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SwapView&quot;:&quot;DojoMobileSwapviewProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ScrollableView&quot;: &quot;DojoMobileScrollableviewProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.Audio&quot;:&quot;DojoMobileMediaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.Video&quot;:&quot;DojoMobileMediaProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SpinWheelSlot&quot;:&quot;DojoMobileSpinWheelSlotProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SpinWheel&quot;:&quot;DojoMobileSpinWheelPickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SpinWheelTimePicker&quot;:&quot;DojoMobileSpinWheelPickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.SpinWheelDatePicker&quot;:&quot;DojoMobileSpinWheelPickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ValuePicker&quot;:&quot;DojoMobileValuePickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ValuePickerDatePicker&quot;:&quot;DojoMobileValuePickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ValuePickerTimePicker&quot;:&quot;DojoMobileValuePickerProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ValuePickerSlot&quot;:&quot;DojoMobileValuePickerSlotProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.dgauges.GaugeBase&quot;:&quot;DojoMobileGaugeProxy&quot;,&#xD;&#xA;&#x9;&#x9;&quot;dojox.mobile.ListItem&quot;:&quot;DojoMobile</values>
		<values>ListItemProxy&quot;,&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;var ignoreEventsOnClassName=[];&#xD;&#xA;&#xD;&#xA;var tagsIgnoredByDojo =[&quot;html&quot;,&quot;head&quot;,&quot;script&quot;,&quot;title&quot;,&quot;meta&quot;,&quot;style&quot;,&quot;body&quot;];&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;/////////////// Dojo Widget Proxy Region Start ////////////////////////////&#xA;//this, element, proxyClassName, proxyName, widget&#xA;DojoWidgetProxy = function(domainObj,element,proxyClass,proxyName,widget){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9;this.widget = widget;&#xA;&#x9;this.proxyName = proxyName;&#xA;&#x9;widget.noCover = true;&#xA;&#x9;&#xA;&#x9;if (document.documentMode &gt;= 10) { // IE10+&#xA;&#x9;&#x9;require([&quot;dojo/on&quot;, &quot;dojo/touch&quot;], function(on, touch) {&#xA;&#x9;&#x9;&#x9;widget.on(touch.press, function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;if (!event.recorded) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;o</values>
		<values>n.emit(widget.domNode, &quot;mouseup&quot;, { bubbles: false, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cancelable: true, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clientX: event.clientX, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clientY: event.clientY });&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype = new HtmlElementProxy();&#xA;&#xA;DojoWidgetProxy.prototype._htmlgetProperty=DojoWidgetProxy.prototype.getProperty;&#xA;DojoWidgetProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;/*&#xA;&#x9; * case WebGuiConstants.CONTENT_PROP: //Get implementation from html domain&#xA;&#x9; * propValue = this.getContent(); break;&#xA;&#x9; */&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._htmlgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;&#xA;DojoWidgetProxy.prototype._htmlapplyDecoratedProps = DojoWidgetProxy.prototype.applyDecoratedProps;&#xA;DojoWidgetProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._htmlapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.content = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;tar</values>
		<values>getElement.label = this.getProperty(WebGuiConstants.LABEL_PROP); &#xA;&#x9;// add declaredClass property for dojo widgets i.e. when this.element== widget.domNode&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype.getLabel = function() {&#xA;&#x9;var label = &quot;&quot;;&#xA;&#xA;&#x9;if (this.widget.domNode.hasAttribute(&quot;aria-labelledby&quot;)) {&#xA;&#x9;&#x9;var labelElementId = this.widget.domNode&#xA;&#x9;&#x9;.getAttribute(&quot;aria-labelledby&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// use dojo.query as it is faster&#xA;&#x9;&#x9;&#x9;if(dojo.query){&#xA;&#x9;&#x9;&#x9;&#x9;var srchquery = &quot;label#&quot;+labelElementId; &#xA;&#x9;&#x9;&#x9;&#x9;var result = dojo.query(srchquery); &#xA;&#x9;&#x9;&#x9;&#x9;if(result &amp;&amp; result.length == 1){ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = result[0].textContent; &#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;&#x9;label = this.widget.domNode.ownerDocument.getElementById(labelElementId).textContent;&#xA;&#x9;&#x9;&#x9;&#x9;}catch(err){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;console.log(&quot;Info:Error getting label.May be because of PopupContainers where ownerDocument comes as null&quot;+err);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}else{&#xA;&#x9;&#x9;if(dojo.query){&#xA;&#x9;&#x9;&#x9;var srchquery = &quot;label[for=&quot; + this.widget.id + &quot;]&quot;;&#xA;&#x9;&#x9;&#x9;var result = dojo.query(srchquery);&#xA;&#x9;&#x9;&#x9;if (result &amp;&amp; result.length == 1) {&#xA;&#x9;&#x9;&#x9;&#x9;labe</values>
		<values>l = result[0].textContent;&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;var tagName = this.element.tagName;&#xA;&#x9;&#x9;&#x9;if (tagName &amp;&amp; tagName.toLowerCase() == &quot;input&quot; &amp;&amp; this.element.parentElement) {&#xA;&#x9;&#x9;&#x9;&#x9;var labelElt = jsUtil.getElementByAttribute(&apos;for&apos;, new Array(this.element.id), this.element.parentElement);&#xA;&#x9;&#x9;&#x9;&#x9;if (labelElt)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = labelElt.textContent;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;/*&#xA;&#x9;else {// Try using widget id attribute&#xA;&#x9;&#x9;require([ &quot;dojo/query&quot;, &quot;dojo/dom&quot; ], function(query, dom) {&#xA;&#x9;&#x9;&#x9;var srchquery = &quot;label[for=&quot; + this.widget.id + &quot;]&quot;;&#xA;&#x9;&#x9;&#x9;var result = dojo.query(srchquery);&#xA;&#x9;&#x9;&#x9;if (result.length == 1) {&#xA;&#x9;&#x9;&#x9;&#x9;label = result[0].textContent;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;});}&#xA;&#x9;*/&#xA;&#x9;return label;&#xA;};&#xA;&#xA;&#xA;&#xA;//TODO: This is a generic way. Either use dojo connect or move this code to base class&#xA;DojoWidgetProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;var original = widget[methodName];&#xA;&#x9;&#x9;widget[methodName] = function() {&#xA;&#x9;&#x9;&#x9;return f</values>
		<values>unction(event) {&#xA;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(widget,methodName,event);&#xA;&#x9;&#x9;&#x9;&#x9;var ret = original ? original.apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;}();&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;onClick&quot;];&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;if(ignoreEventsOnClassName.indexOf(this.widget.declaredClass) &gt;=0)&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;this.installDojoEventWrapper( this.widget, events[i], this.handleEvent);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype.handleEvent = function(widget,methodName,event){&#xA;&#x9;//TODO: Important info about dojo event&#xA;&#x9;// event.target - the element that generated the event&#xA;&#x9;// event.currentTarget - the current target&#xA;&#x9;// event.relatedTarge</values>
		<values>t - For mouseover and mouseout, the object that the mouse pointer is moving to or out of&#xA;&#x9;// event.charCode - For keypress events, the character code of the key pressed&#xA;&#x9;// event.keyCode - for keypress events, handles special keys like ENTER and spacebar.&#xA;&#x9;//rmotRecorder.log(&quot;DojoWidgetProxy: Event=&quot;+methodName+&quot; Widget =&quot;+widget.id+&quot; Event= &quot;+event);&#xA;&#x9;&#xA;&#x9;var proxy = domainManager.getProxy(event.target);&#xA;&#x9;if (proxy.isWidgetChild) return; // If set, do not record actions on widget&apos;s children&#xA;&#x9;&#xA;&#x9;var parameters = {};&#xA;&#x9;var eventName = methodName.toLowerCase();&#xA;&#x9;widget = dijit.registry.getEnclosingWidget(event.target);&#xA;&#x9;var dojoproxy = domainManager.getProxy(widget.domNode);&#xA;&#x9;var tagName = dojoproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;dojoproxy.domainObj._recordEvent(event, eventName, tagName, widget.domNode, parameters);&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype.isContainer =  function() {&#xA;&#x9;var type = djmClassesMap[this.widget.declaredClass];&#xA;&#x9;if (!type) { // Don&apos;t know this type&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#x9;return dojoContaine</values>
		<values>rList.indexOf(this.widget.declaredClass)&gt;=0;&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype._htmlisVisible = DojoWidgetProxy.prototype.isVisible;&#xA;DojoWidgetProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = this._htmlisVisible();&#xA;&#x9;&#xA;&#x9;if (!this.isContainer()) {&#xA;&#x9;&#x9;if (ret.reachable) ret.visibility = true; // make final Dojo widgets visible if they are reachable&#xA;&#x9;&#x9;ret.reachable = true;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;&#xA;DojoWidgetProxy.prototype.tap = function() {&#xA;&#x9;var _target = this.widget;&#xA;&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;&#x9;&#x9;on.emit(_target, &quot;tap&quot;, {&#xA;&#x9;&#x9;&#x9;bubbles: true,&#xA;&#x9;&#x9;&#x9;cancelable: true&#xA;&#x9;&#x9;});&#xA;&#x9;});&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;DojoWidgetProxy.prototype._executeAction0 = HtmlElementProxy.prototype.executeAction;&#xA;DojoWidgetProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoWidgetProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onkeypress&quot; :&#xA;&#x9;case &quot;onkeydown&quot; :&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;oncli</values>
		<values>ck&quot;: &#xA;&#x9;&#x9;// Workaround for Dojo lib reg &#xA;&#x9;&#x9;// See code of touch.js at https://bugs.dojotoolkit.org/changeset/30449/legacy&#xA;&#x9;&#x9;lastTouch = (new Date()).getTime() - 2000;&#xA;&#xA;&#x9;&#x9;// send _onClick event for IE10+&#xA;&#x9;&#x9;if (this.widget._onClick) {&#xA;&#x9;&#x9;&#x9;var e = this.widget.domNode.ownerDocument.createEvent(&apos;Event&apos;);&#xA;&#x9;&#x9;&#x9;e.initEvent(&apos;_onClick&apos;, true, true);&#xA;&#x9;&#x9;&#x9;this.widget._onClick(e);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// Then execute default action&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction0(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;/////////////// Dojo Widget Proxy Region End ////////////////////////////&#xA;&#xA;/////////////// Dojo Element Proxy Region Start ////////////////////////////&#xA;&#xA;DojoElementProxy = function(domainObj,element,proxyClass,proxyName,widget){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;&#x9;this.widget = widget;&#xA;};&#xA;&#xA;DojoElementProxy.prototype = new HtmlElementProxy();// make DojoElementProxy inherit from a HtmlElementProxy object&#xA;DojoElementProxy.prototype.constructor = DojoElementProxy; /</values>
		<values>/ fix constructor property&#xA;&#xA;DojoElementProxy.prototype.installWrappers = function(){&#xA;&#x9;// Do not install any wrappers of sub elements of Dojo Widgets&#xA;&#x9;var node = this.element;&#xA;&#x9;if (node &amp;&amp; node.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;/////////////// Dojo Element Proxy Region Start ////////////////////////////&#xA;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;var DOJO_DOMAIN_NAME = &quot;dojo&quot;;&#xA;&#xA;var DojoDomain = function(){&#xA;&#x9;HTMLDomain.apply(this,arguments);&#xA;};&#xA;DojoDomain.prototype = new HTMLDomain();&#xA;&#xA;DojoDomain.prototype.getDomainName = function(){&#xA;&#x9;return DOJO_DOMAIN_NAME;&#xA;};&#xA;&#xA;DojoDomain.prototype.init = function(){&#xA;&#x9;/**&#xA;&#x9; * Register a func</values>
		<values>tion that will be run when the DOM is fully loaded&#xA;&#x9; */&#xA;&#x9;var domain = this;&#xA;&#x9;if (window.require &amp;&amp; window.require.on) {&#xA;&#x9;&#x9;require([&quot;dojo/ready&quot;], function(ready) {&#xA;&#x9;&#x9;&#x9;ready(100000, function(){&#xA;&#x9;&#x9;&#x9;&#x9;domainManager.registerDomain(domain);&#xA;&#x9;&#x9;&#x9;&#x9;if (jsUtil.isRecordingMode()) { // Recording only&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(&quot;PARSEDOCUMENT================RMoTregisterDojoReady&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(jsUtil.getVersions());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rmotRecorder.parseDocument();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.updateHierarchy();&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;})&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;}&#xA;&#xA;/**&#xA; * Returns the version of the domain&#xA; */&#xA;DojoDomain.prototype.getDomainVersion = function() {&#xA;&#x9;if (window.dojox) {&#xA;&#x9;&#x9;return dojo.version.toString();&#xA;&#x9;}&#xA;&#x9;return &quot;&quot;;&#xA;};&#xA;&#xA;DojoDomain.prototype.getElementTagsListToIgnore = function(){&#xA;&#x9;return tagsIgnoredByDojo;&#xA;};&#xA;&#xA;/**&#xA; * This function tries to determine if the given element is a Dojo widget, or part of a Dojo widget.&#xA; * &#xA; * @param element the DOM node to test&#xA; * @returns true if it is a Dojo Widget or part of Dojo Widget else returns false &#xA;</values>
		<values> */&#xA;DojoDomain.prototype.getProxy=function(element){&#xA;&#x9;var proxy = null;&#xA;&#x9;&#xA;&#x9;var widget = this.getEnclosingObject(element);&#xA;&#x9;if (widget == null) return null; // Not identified as a Dojo object&#xA;&#x9;&#xA;&#x9;if(element == widget.domNode){&#xA;&#x9;&#x9;var bSupported = false;&#xA;&#x9;&#x9;if(jsUtil.isRecordingMode()){&#xA;&#x9;&#x9;&#x9;var widgetClassName = widget.declaredClass;&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;dojoSupportedWidgetClassList.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;var supportedWidgetClassName = dojoSupportedWidgetClassList[i];&#xA;&#x9;&#x9;&#x9;&#x9;if(jsUtil.endsWith(supportedWidgetClassName, &quot;*&quot;)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;supportedWidgetClassName = supportedWidgetClassName.substr(0,supportedWidgetClassName.length-1);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(jsUtil.startsWith(widgetClassName, supportedWidgetClassName)){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bSupported = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(!bSupported){&#xA;&#x9;&#x9;&#x9;&#x9;// Unsupported Dojo Widget&#xA;&#x9;&#x9;&#x9;&#x9;element.wgcustom = true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;var elemInfo = this.getDojoElementInfo(widget);&#xA;&#x9;&#x9;if(elemInfo){&#xA;&#x9;&#x9;&#x9;var proxyClassName = elemInfo[0];&#xA;&#x9;&#x9;&#x9;var proxyName = elemInfo[1];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;var concreteProxy = this.getConcreteProxy(widget, p</values>
		<values>roxyClassName, proxyName);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;proxy = jsReflect.createObject(this, element, concreteProxy.className, concreteProxy.name, widget);&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;// Should never come here as all Widgets extend from dijit._WidgetBase class&#xA;&#x9;&#x9;&#x9;proxy = new DojoElementProxy(this, element, &quot;DojoElementProxy&quot;, DJ_WIDGETBASE, widget);&#xA;&#x9;&#x9;}&#xA;&#x9;}else{&#xA;&#x9;&#x9;// Element is Html Element that is used to design DojoWidget&#xA;&#x9;&#x9;if(widget.domNode.wgcustom == true)&#xA;&#x9;&#x9;&#x9;element.wgcustom=true;&#xA;&#x9;&#x9;proxy = new DojoElementProxy(this, element, &quot;DojoElementProxy&quot;, DJ_WIDGETBASE, widget);&#xA;&#x9;}&#xA;&#x9;return proxy;&#xA;};&#xA;&#xA;&#xA;/**&#xA; * This method helps to know if there&apos;s a Dojo widget containing, or being, the given DOM node.&#xA; * It returns an array containing object tagname, meaningful event, new value, dom node corresponding to the widget annd the DJM widget itself, &#xA; * or null if there is no widget corresponding to the given DOM node&#xA; * &#xA; * @param domNode the DOM node to test&#xA; * process to give a tagName to all elements on the page: in that case we only need to know if the</values>
		<values> domNode is the root node of a widget.&#xA; * &#xA; * @returns dojo widget containing the element &#xA; */&#xA;DojoDomain.prototype.getEnclosingObject=function(elem) {&#x9;&#xA;&#x9;&#xA;&#x9;if(!elem){&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;if(!elem.tagName){&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;if(elem &amp;&amp; elem.tagName &amp;&amp; tagsIgnoredByDojo.indexOf(elem.tagName.toLowerCase()) &gt;=0){&#xA;&#x9;&#x9;return null;&#xA;&#x9;}&#xA;&#x9;if(!(window.dijit &amp;&amp; window.dijit.registry))&#xA;&#x9;&#x9;return null;&#xA;&#x9;// does the domNode correspond to a Dojo Widget ?&#xA;&#x9;var widget = null;&#xA;&#x9;var elemId = elem.id;&#xA;&#x9;if(elemId &amp;&amp; dijit.registry.byId(elemId)){&#xA;&#x9;&#x9;widget = dijit.registry.byId(elemId);&#xA;&#x9;}&#xA;&#x9;else if(elem &amp;&amp; dijit.registry.getEnclosingWidget(elem)){&#xA;&#x9;&#x9;widget = dijit.registry.getEnclosingWidget(elem);&#xA;&#x9;}&#xA;&#x9;if (widget == null) return null;&#xA;&#x9;// test if the domNome is the widget&apos;s root node itself and not a sub element&#xA;&#x9;var widgetDomNode = widget.domNode;&#xA;&#x9;if (widgetDomNode != elem) {&#xA;&#x9;&#x9;if (dojoContainerList.indexOf(widget.declaredClass) &gt;= 0) {&#xA;&#x9;&#x9;&#x9;// Exclude some classes from testing, mainly containers like views.&#xA;&#x9;&#x9;&#x9;// For example if there</values>
		<values>&apos;s a html button (the domNode param) inside a dojo view,&#xA;&#x9;&#x9;&#x9;// the returned enclosing widget will be the dojo view: in that case it&apos;s not good because user clicked on html button &#xA;&#x9;&#x9;&#x9;// and this is the element that matters, not the view.&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// 50422: Do not identify elements as Dojo widgets if the declaredClass is not known&#xA;&#x9;if (!djmClassesMap[widget.declaredClass]) return null;&#xA;&#x9;&#xA;&#x9;return widget;&#x9;&#x9;&#xA;};&#xA;&#xA;&#xA;DojoDomain.prototype.getDojoElementInfo=function(widget) {&#xA;&#x9;var proxyInfo = null;&#xA;&#x9;var type = null;&#xA;&#x9;for(var i=0;i&lt;widget.constructor._meta.bases.length;i++){&#xA;&#x9;&#x9;var widgetClass = widget.constructor._meta.bases[i].prototype.declaredClass;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(!proxyInfo)&#xA;&#x9;&#x9;&#x9;proxyInfo = dojoProxyMap[widgetClass];&#xA;&#x9;&#x9;if(!type) {&#xA;&#x9;&#x9;&#x9;type = djmClassesMap[widgetClass];&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(proxyInfo &amp;&amp; type) break;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if(jsUtil.startsWith(widget.declaredClass, &quot;dojox.mobile&quot;)){&#xA;&#x9;&#x9;if(proxyInfo == &quot;DojoWidgetProxy&quot;){&#xA;&#x9;&#x9;&#x9;proxyInfo = &quot;DojoMobileWidgetProxy&quot;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;/*if(type == &quot;djwidget&quot;){&#xA;&#x9;&#x9;&#x9;type=&quot;djmwidget&quot;;&#xA;&#x9;&#x9;}*/&#xA;&#x9;</values>
		<values>}&#xA;&#x9;&#xA;&#x9;if (!proxyInfo) {&#xA;&#x9;&#x9;proxyInfo = &quot;DojoMobileWidgetProxy&quot;; // Better than nothing&#xA;&#x9;&#x9;type = (!type) ? DOJO_UNIDENTIFIED : type;&#xA;&#x9;}&#xA;&#x9; &#xA;&#x9;return [proxyInfo,type];&#xA;};&#xA;&#xA;DojoDomain.prototype.getConcreteProxy=function(widget, proxyClassName, proxyName){&#xA;&#x9;var concreteProxy = { className: proxyClassName, name: proxyName};&#xA;&#x9;switch(proxyName) {&#xA;&#x9;&#x9;//in case of a subclass of dijit._Contained it could be a DJM object that could be identified by its baseClass (or other attribute)&#xA;&#x9;&#x9;case DIJIT_CONTAINED :&#xA;&#x9;&#x9;&#x9;if( widget.baseClass==&quot;mblAccordionTitle&quot; ) {&#xA;&#x9;&#x9;&#x9;&#x9;concreteProxy.className = &quot;DojoMobileAccordionTitleProxy&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;concreteProxy.name = DJM_ACCORDIONTITLE;&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;break;&#xA;&#x9;};&#xA;&#x9;&#xA;&#x9;return concreteProxy;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;//////////////////</values>
		<values>///////// DojoMobileWidgetProxy ///////////////////////////&#xA;DojoMobileWidgetProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoWidgetProxy.apply(this,arguments);&#xA;&#x9;if (!jsUtil.isRecordingMode()) {&#xA;&#x9;&#x9;this.dojoClick(element); // connect onclick event to _onClick for IE10+&#xA;&#x9;}&#xA;};&#xA;DojoMobileWidgetProxy.prototype = new DojoWidgetProxy();&#xA;&#xA;DojoMobileWidgetProxy.prototype.dojoClick = function (element) {&#xA;&#x9;var widget = this.widget;&#xA;&#x9;if (widget._onClick) {&#xA;&#x9;&#x9;widget.connect(widget.domNode, &quot;onclick&quot;, &quot;_onClick&quot;);&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [dojoTriggeredEvent];&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype._installDownEventWrapper = DojoMobileWidgetProxy.prototype.installDownEventWrapper;&#xA;DojoMobileWidgetProxy.prototype.installDownEventWrapper = function (eventName) {&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;if (jsUtil.isDesktop()) {&#xA;&#x9;&#x9;&#x9;var elt = this.element;&#xA;&#x9;&#x9;&#x9;require([&quot;dojo/touch&quot;], function(touch) {&#xA;&#x9;&#x9;&#x9;&#x9;  touch.press(elt, functio</values>
		<values>n(event){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  // Save coordinates of the down event&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  rmotRecorder.downEvent = { x: event.clientX || event.changedTouches[0].clientX, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; y: event.clientY || event.changedTouches[0].clientY };&#xA;&#x9;&#x9;&#x9;&#x9;  });&#xA;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else { // Mobile&#xA;&#x9;&#x9;&#x9;this._installDownEventWrapper(eventName);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var elt = this.element;&#xA;&#x9;&#x9;if (jsUtil.isDesktop() &amp;&amp; methodName == dojoTriggeredEvent) {&#xA;&#x9;&#x9;&#x9;// Fix for mouseup events that is not fired anymore on desktop browsers&#xA;&#x9;&#x9;&#x9;require([&quot;dojo/touch&quot;], function(touch) {&#xA;&#x9;&#x9;&#x9;&#x9;  touch.release(elt, function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  if (!event.recorded &amp;&amp; !jsUtil.isDragEvent(event, methodName, dojoTriggeredEvent)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  eventHandlerFunction(elt, methodName, event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  event.recorded = true;&#xA;&#x9;&#x9;&#x9;</values>
		<values>&#x9;  });&#xA;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;&#x9;&#x9;&#x9;on(elt, methodName, function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;var eventName = RMoTeventPrefix + methodName;&#xA;&#x9;&#x9;&#x9;&#x9;if (!event.recorded &amp;&amp; !jsUtil.isDragEvent(event, eventName, dojoTriggeredEvent)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(elt, methodName, event);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (RMoTAndroid) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Give focus to input text widgets&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (typeof(widget.focus)!=&apos;undefined&apos;) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;widget.focus();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype._dojoHandleEvent=DojoMobileWidgetProxy.prototype.handleEvent;&#xA;DojoMobileWidgetProxy.prototype.handleEvent = function(element,eventName,event){&#xA;&#x9;if (eventName==dojoTriggeredEvent) eventName = &quot;onclick&quot;;&#xA;&#x9;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;proxy._dojoHandleEvent(element, eventName, event);&#xA;};&#xA;&#xA;/**&#xA; * To be used when a specific dojo method wrapper must be installed on a dojo widget class&#xA; */&#xA;DojoMobileWidgetProxy.prototype.subscribeDojoTopic = function(topic, methodName, f</values>
		<values>unc) {&#xA;&#x9;if (!window[methodName]) {&#xA;&#x9;&#x9;window[methodName] = func;&#xA;&#x9;&#x9;require([&quot;dojo/_base/connect&quot;], function(connect) {&#xA;&#x9;&#x9;&#x9;connect.subscribe(topic, methodName);&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype._dojoMobileWidgetGetProperty=DojoMobileWidgetProxy.prototype.getProperty;&#xA;DojoMobileWidgetProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.ENABLED_PROP:&#xA;&#x9;&#x9;var disabled = this.widget.disabled;&#xA;&#x9;&#x9;propValue = (disabled) ? !disabled : true;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.EXIST_PROP:&#xA;&#x9;&#x9;propValue = true;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoMobileWidgetGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileWidgetProxy.prototype._dojoMobileWidgetApplyDecoratedProps = DojoMobileWidgetProxy.prototype.applyDecoratedProps;&#xA;DojoMobileWidgetProxy.prototype.applyDecoratedProps = function(targetElement){&#xA;&#x9;this._dojoMobileWidgetApplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.enabled = this.getProperty(WebGuiConstants.ENABLED_PROP);&#xA;&#x9;t</values>
		<values>argetElement.exist = this.getProperty(WebGuiConstants.EXIST_PROP);&#xA;};&#xA;/////////////////////////// DojoMobileWidgetProxy End ///////////////////////&#xA;&#xA;/////////////////////////// DojoMobileTextBoxProxy //////////////////////////&#xA;DojoMobileTextBoxProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileTextBoxProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileTextBoxProxy.prototype.handleEvent = function(element,eventName,event) {&#xA;&#x9;if (eventName == &quot;keydown&quot; || eventName == &quot;onkeydown&quot;) {&#xA;&#x9;&#x9;if (event.keyCode == 13) { // need to capture enter key&#xA;&#x9;&#x9;&#x9;eventName=&quot;onkeypress&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// else will be managed as a repeated action&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;eventName = &quot;onclick&quot;;&#xA;&#x9;&#x9;webGuiRecorderInterfaceObj.webGuiRecorderObj.openSoftKeyboard();&#xA;&#x9;}&#xA;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;};&#xA;&#xA;Doj</values>
		<values>oMobileTextBoxProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;DojoMobileTextBoxProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onkeydown&quot;: &quot;oninput&quot;,&#xA;&#x9;&#x9;&#x9;&quot;keydown&quot;: &quot;oninput&quot;};&#xA;};&#xA;&#xA;DojoMobileTextBoxProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [dojoTriggeredEvent,&quot;onkeydown&quot;,&quot;keydown&quot;];&#xA;};&#xA;&#xA;DojoMobileTextBoxProxy.prototype._dojoGetProperty=DojoMobileTextBoxProxy.prototype.getProperty;&#xA;DojoMobileTextBoxProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.element.value;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;/////////////////////////// DojoMobileTextBoxProxy End //////////////////////&#xA;&#xA;/////////////////////////// DojoMobileSearchBoxProxy ////////////////////////&#xA;DojoMobileSearchBoxProxy = function(domainObj,element){&#xA;&#x9;i</values>
		<values>f (arguments.length == 0) return; &#xA;&#x9;DojoMobileTextBoxProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileSearchBoxProxy.prototype = new DojoMobileTextBoxProxy();&#xA;&#xA;DojoMobileSearchBoxProxy.prototype._executeAction9 = DojoMobileSearchBoxProxy.prototype.executeAction;&#xA;DojoMobileSearchBoxProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileSearchBoxProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;retStatus = this._executeAction9(action);&#xA;&#x9;&#xA;&#x9;if (actionType == &quot;oninput&quot;) {&#xA;&#x9;&#x9;this.widget.emit(&quot;search&quot;);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////// DojoMobileSearchBoxProxy End //////////////////////&#xA;&#xA;/////////////////////////// DojoMobileTextAreaProxy /////////////////////////&#xA;DojoMobileTextAreaProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileTextBoxProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileTextAreaProxy.prototype = new DojoMobileTextBoxProxy();&#xA;&#xA;DojoMobileTextAreaProxy.protot</values>
		<values>ype.handleEvent = function(element,eventName,event){&#xA;&#x9;eventName = (eventName==dojoTriggeredEvent) ? &quot;onclick&quot; : eventName;&#xA;&#x9;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;};&#xA;/////////////////////////// DojoMobileTextAreaProxy End /////////////////////&#xA;&#xA;/////////////////////////// DojoMobileCheckBoxRadioProxy ////////////////////&#xA;DojoMobileCheckBoxRadioProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileCheckBoxRadioProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileCheckBoxRadioProxy.prototype._dojoMobileWidgetHandleEvent=DojoMobileCheckBoxRadioProxy.prototype.handleEvent;&#xA;DojoMobileCheckBoxRadioProxy.prototype.handleEvent = function(element,methodName,event){&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;proxy._dojoMobileWidgetHandleEvent(element, methodName, event);&#xA;};</values>
		<values>&#xA;&#xA;DojoMobileCheckBoxRadioProxy.prototype._dojoGetProperty=DojoMobileCheckBoxRadioProxy.prototype.getProperty;&#xA;DojoMobileCheckBoxRadioProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;propValue = (this.widget.get(&quot;value&quot;)) ? true : false;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;propValue = this.widget.label;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;}; &#xA;&#xA;DojoMobileCheckBoxRadioProxy.prototype._dojoApplyDecoratedProps = DojoMobileCheckBoxRadioProxy.prototype.applyDecoratedProps;&#xA;DojoMobileCheckBoxRadioProxy.prototype.applyDecoratedProps = function(targetElement){&#xA;&#x9;this._dojoApplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checked = this.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;/////////////////////////// DojoMobileCheckBoxRadioProxy End ////////////////&#xA;&#xA;/////////////////////////// DojoMobileTo</values>
		<values>ggleButtonProxy ////////////////////&#xA;DojoMobileToggleButtonProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileCheckBoxRadioProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileToggleButtonProxy.prototype = new DojoMobileCheckBoxRadioProxy();&#xA;&#xA;DojoMobileToggleButtonProxy.prototype._dojoMobileCheckBoxRadioGetProperty=DojoMobileCheckBoxRadioProxy.prototype.getProperty;&#xA;DojoMobileToggleButtonProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;// This is what is different with the toggle button compared to check box and radio: its property name is not &quot;value&quot; but &quot;checked&quot;&#xA;&#x9;&#x9;propValue = (this.widget.get(&quot;checked&quot;)) ? true : false;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoMobileCheckBoxRadioGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;}; &#xA;&#xA;/////////////////////////// DojoMobileToggleButtonProxy End ////////////////&#xA;&#xA;/////////////////////////// DojoMobileSwitchProxy ///////////////////////////&#xA;DojoMob</values>
		<values>ileSwitchProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;}&#xA;DojoMobileSwitchProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileSwitchProxy.prototype._dojoGetProperty=DojoMobileSwitchProxy.prototype.getProperty;&#xA;DojoMobileSwitchProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.widget.value;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileSwitchProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#xA;&#x9;&#x9;var elt = this.element;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elt);&#xA;&#x9;&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;&#x9;&#x9;&#x9;on(elt, dojoTriggeredEvent, function(event){&#xA;&#x9;&#x9;&#x9;&#x9;if (!event.recorded) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(elt, methodName, event);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;};&#xA;/////////////////////////// DojoMobileSwitchProxy End ///////////////////////&#xA;&#xA;/////////////////////////// DojoMobileSliderProxy ///////////////////////////&#xA;DojoMobileSliderProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileSliderProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileSliderProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;var map = {};&#xA;&#x9;map[dojoTriggeredEvent] = &quot;onchange&quot;;&#xA;&#x9;return map;&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#xA;&#x9;&#x9;var elt = this.element;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elt);&#xA;&#x9;&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;&#x9;&#x9;&#x9;on(elt, methodName, function(event){&#xA;&#x9;&#x9;&#x9;&#x9;if (!event.recorded) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(elt, methodName, event);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;});&#xA;&#x9;</values>
		<values>&#x9;&#xA;&#x9;&#x9;rmotHierarchy.setSavedProperties(this); // 52821&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype.handleEvent = function(element,eventName,event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getValue();&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype.getValue = function() {&#xA;&#x9;return &apos;&apos; + this.widget.value;&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiConstants.CONTENT_PROP, &quot;value&quot;];&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype._dojoMobileWidgetProxy=DojoMobileSliderProxy.prototype.getProperty;&#xA;DojoMobileSliderProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;case &quot;value&quot;:&#xA;&#x9;&#x9;propValue = &apos;&apos; + this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;max&quot;</values>
		<values>:&#xA;&#x9;case &quot;min&quot;:&#xA;&#x9;case &quot;step&quot;:&#xA;&#x9;&#x9;propValue = this.widget[propName];&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoMobileWidgetProxy(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype._dojoApplyDecoratedProps = DojoMobileSliderProxy.prototype.applyDecoratedProps;&#xA;DojoMobileSliderProxy.prototype.applyDecoratedProps = function(targetElement){&#xA;&#x9;this._dojoApplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.max=this.getProperty(&quot;max&quot;);&#xA;&#x9;targetElement.value=this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;targetElement.min=this.getProperty(&quot;min&quot;);&#xA;&#x9;targetElement.step=this.getProperty(&quot;step&quot;);&#xA;};&#xA;&#xA;DojoMobileSliderProxy.prototype._executeAction3 = DojoMobileSliderProxy.prototype.executeAction;&#xA;DojoMobileSliderProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileSliderProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;this.widget.set(&quot;value&quot;, action.p</values>
		<values>arameters[0].value);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction3(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/////////////////////////// DojoMobileSliderProxy End ///////////////////////&#xA;&#xA;/////////////////////////// DojoMobileSwapviewProxy /////////////////////////&#xA;DojoMobileSwapviewProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileSwapviewProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileSwapviewProxy.prototype.isVisible =  function() {&#xA;&#x9;// make the swapview visible&#xA;&#x9;return { visibility: true, propagation: false, reachable: true };&#xA;};&#xA;&#xA;DojoMobileSwapviewProxy.prototype.installDojoEventWrapper=function(element, methodName, eventHandlerFunction) {&#xA;&#x9;&#xA;&#x9;if (!element[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;element[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(element.domNode);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Updating hierarchy and taking snapshot when the swapview is created&#xA;&#x9;</values>
		<values>&#x9;this.subscribeDojoTopic(&quot;/dojox/mobile/afterTransitionIn&quot;, &quot;dojoViewCreated&quot;,  function() {&#xA;&#x9;&#x9;&#x9;proxy.startSwipe(element);&#xA;&#x9;&#x9;});&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Compute direction and log event swipe. Then take snapshot&#xA;&#x9;&#x9;this.subscribeDojoTopic(&quot;/dojox/mobile/viewChanged&quot;, &quot;dojoViewChanged&quot;,  function(view) {&#xA;&#x9;&#x9;&#x9;var startSwapView = window.startSwapView;&#xA;&#x9;&#x9;&#x9;if (startSwapView != null) {&#xA;&#x9;&#x9;&#x9;&#x9;var previousWidget = view.previousView(view.domNode);&#xA;&#x9;&#x9;&#x9;&#x9;if (startSwapView !== view.domNode) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var direction = (previousWidget &amp;&amp; startSwapView === previousWidget.domNode) ? 0 : 1; // left : right&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(startSwapView);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(jsUtil.isDesktop()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.domainObj._recordEventWithExistingScreenshot(&quot;onswipe&quot;, tagName, startSwapView, rmotHierarchy.currentHierarchy, {direction:direction}, proxy.screenshotid);&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.takeSnapshot = false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var jsonString = rmotRecorder.buildJsonStringMobile(&quot;o</values>
		<values>nswipe&quot;, tagName, startSwapView, rmotHierarchy.currentHierarchy, {direction:direction});&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rmotRecorder.logEvent(jsonString);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Take a new snapshot after onswipe to hack the Java recording&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.domainObj._recordEvent(null, RMoTstartEvent, tagName, startSwapView, null);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.updateHierarchy();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;});&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Save current swapview to determine swap direction&#xA;&#x9;&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;&#x9;&#x9;&#x9;on(element, &quot;touchstart&quot;, function(event){&#xA;&#x9;&#x9;&#x9;&#x9;window.startSwapView = element.domNode;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(window.startSwapView);&#xA;&#x9;&#x9;&#x9;&#x9;if(jsUtil.isDesktop()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.screenshotid = proxy.domainObj._captureScreenshot();&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (!window.swapViewCreated) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// 48727: Update hierarchy and take snapshot if the swapview has not yet been created&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;proxy.startSwipe(element);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;&#x9;&#xA;};&#xA;&#xA;DojoMobileSwapviewProxy.prototype.startSwipe = function(element) {&#xA;&#x9;// Update hierarchy and take snapshot&#xA;&#x9;va</values>
		<values>r tagName = this.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;this.domainObj._recordEvent(null, RMoTstartEvent, tagName, element.domNode, null);&#xA;&#x9;window.swapViewCreated = true;&#xA;};&#xA;&#xA;DojoMobileSwapviewProxy.prototype._executeAction1 = DojoMobileSwapviewProxy.prototype.executeAction;&#xA;DojoMobileSwapviewProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileSwapviewProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onswipe&quot; :&#xA;&#x9;&#x9;// if (_direction == 1) it means &apos;right&apos; else if (_direction == 0) it means &apos;left&apos;&#xA;&#x9;&#x9;// and the direction defined in RTW Editor is the opposite of the dojo swap direction&#xA;&#x9;&#x9;var _direction = (action.parameters[0].value == 0) ? 1 : 0;&#xA;&#x9;&#x9;this.widget.goTo(_direction);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction1(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/////////////////////////// DojoMobileSwapviewProxy End /////////////////</values>
		<values>////&#xA;&#xA;///////////////////////// DojoMobileAccordionTitleProxy /////////////////////&#xA;DojoMobileAccordionTitleProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileAccordionTitleProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileAccordionTitleProxy.prototype._dojoMobileHandleEvent=DojoMobileAccordionTitleProxy.prototype.handleEvent;&#xA;DojoMobileAccordionTitleProxy.prototype.handleEvent = function(widget,eventName,event) {&#xA;&#xA;&#x9;var proxy = domainManager.getProxy(widget);&#xA;&#x9;proxy._dojoMobileHandleEvent(widget,eventName,event);&#xA;};&#xA;&#xA;DojoMobileAccordionTitleProxy.prototype.getInnerProperty = function(elem, prop) {&#xA;&#x9;for (var j=0; j &lt; elem.attributes.length; j++)&#xA;&#x9;&#x9;if (elem.attributes[j].name == prop)&#xA;&#x9;&#x9;&#x9;return elem.attributes[j].value;&#xA;&#xA;&#x9;for (var i=0; i &lt; elem.childNodes.length; i++) {&#xA;&#x9;&#x9;var ret = this.getInnerProperty(elem.childNodes[i], prop);&#xA;&#x9;&#x9;if (ret != undefined)&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;}&#xA;&#x9;return undefined;&#xA;};&#xA;&#xA;DojoMobileAccordionTitleProxy</values>
		<values>.prototype._dojoGetProperty=DojoMobileAccordionTitleProxy.prototype.getProperty;&#xA;DojoMobileAccordionTitleProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.TAGNAME_PROP:&#xA;&#x9;&#x9;propValue = DJM_ACCORDIONTITLE;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.COLLAPSED_PROP:&#xA;&#x9;&#x9;var collapsed = this.getInnerProperty(document.getElementById(this.getInnerProperty(this.element, &quot;aria-controls&quot;)), &quot;aria-expanded&quot;);&#xA;&#x9;&#x9;propValue = (collapsed==&apos;true&apos;) ? false : true;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileAccordionTitleProxy.prototype._dojoApplyDecoratedProps = DojoMobileAccordionTitleProxy.prototype.applyDecoratedProps;&#xA;DojoMobileAccordionTitleProxy.prototype.applyDecoratedProps = function(targetElement){&#xA;&#x9;this._dojoApplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.collapsed = this.getProperty(WebGuiConstants.COLLAPSED_PROP);&#xA;};&#xA;&#xA;DojoMobileAccordionTitleProxy.prototype.isContainer = function() {&#xA;&#x9;return</values>
		<values> false;&#xA;};&#xA;&#xA;DojoMobileAccordionTitleProxy.prototype._executeAction2 = DojoMobileAccordionTitleProxy.prototype.executeAction;&#xA;DojoMobileAccordionTitleProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileAccordionTitleProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;this.setTarget(this.element);&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;oncollapse&quot; :&#xA;&#x9;case &quot;onexpand&quot; :&#xA;&#x9;&#x9;var _expd = this.getProperty(WebGuiConstants.COLLAPSED_PROP);&#xA;&#x9;&#x9;if ((_expd &amp;&amp; (actionType == &quot;onexpand&quot;)) || (!_expd &amp;&amp; (actionType == &quot;oncollapse&quot;))) {&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;this.click();&#xA;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction2(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/////////////////////////// DojoMobileAccordionTitleProxy End /////////////////&#xA;&#xA;///////////////////////// DojoMobileMediaProxy ////////////////////////////////&#xA;DojoMobileMediaProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return;</values>
		<values> &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileMediaProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileMediaProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [dojoTriggeredEvent,&quot;pause&quot;,&quot;playing&quot;];&#xA;};&#xA;&#xA;DojoMobileMediaProxy.prototype.handleEvent = function(element,eventName,event){&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;if (eventName==dojoTriggeredEvent) {&#xA;&#x9;&#x9;proxy.touched = true;&#x9;// media paused by user or at the end of the track&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (proxy.touched) {&#xA;&#x9;&#x9;proxy._dojoHandleEvent(element, RMoTeventPrefix+eventName, event);&#xA;&#x9;&#x9;proxy.touched = false;&#xA;&#x9;}&#xA;&#x9;&#xA;};&#xA;DojoMobileMediaProxy.prototype._executeAction6 = DojoMobileMediaProxy.prototype.executeAction;&#xA;DojoMobileMediaProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileMediaProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;this.setTarget(this.element);&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onplaying&quot; :&#xA;&#x9;&#x9;// call the ht</values>
		<values>ml5 play method&#xA;&#x9;&#x9;this.element.play();&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onpause&quot; :&#xA;&#x9;&#x9;// call the html5 pause method&#xA;&#x9;&#x9;this.element.pause();&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction6(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/////////////////////////// DojoMobileMediaProxy End //////////////////////////&#xA;&#xA;///////////////////////// DojoMobileSpinWheelSlotProxy ////////////////////////&#xA;DojoMobileSpinWheelSlotProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileSpinWheelSlotProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;var original = widget[methodName];&#xA;&#x9;&#x9;widget[methodName] = function() {&#xA;&#x9;&#x9;&#x9;return function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(widget,methodName,ev</values>
		<values>ent);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;var ret = original ? original.apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;}();&#xA;&#x9;}&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.handleEvent = function(widget,eventName,event){&#xA;&#x9;if (widget.domNode) {&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(widget.domNode);&#xA;&#x9;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, widget.domNode, proxy.getParameters());&#xA;&#x9;}&#xA;&#x9;event.recorded = true;&#xA;&#x9;&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;onTouchStart&quot;/*,&quot;slideTo&quot;*/];&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onTouchStart&quot;: &quot;onchange&quot;};&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype.getValue = function () {&#xA;&#x9;return this.widget.get(&quot;value&quot;);&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prot</values>
		<values>otype._dojoGetProperty=DojoMobileSpinWheelSlotProxy.prototype.getProperty;&#xA;DojoMobileSpinWheelSlotProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileSpinWheelSlotProxy.prototype._executeAction5 = DojoMobileSpinWheelSlotProxy.prototype.executeAction;&#xA;DojoMobileSpinWheelSlotProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileSpinWheelSlotProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;this.widget.set(&quot;value&quot;, action.parameters[0].value);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction5(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////// DojoMobileSpinWheelSlotProxy End ////////////////////&#xA;&#xA;/</values>
		<values>//////////////////////// DojoMobileSpinWheelPickerProxy //////////////////////&#xA;DojoMobileSpinWheelPickerProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileSpinWheelSlotProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileSpinWheelPickerProxy.prototype = new DojoMobileSpinWheelSlotProxy();&#xA;&#xA;DojoMobileSpinWheelPickerProxy.prototype.installDojoEventWrapper=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;var slots = this.widget.slots;&#xA;&#x9;for(var i=0;i&lt;slots.length;i++) {&#xA;&#x9;&#x9;var slot = slots[i];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (!slot[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;&#x9;slot[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#x9;var original = slot[methodName];&#xA;&#x9;&#x9;&#x9;slot[methodName] = function() {&#xA;&#x9;&#x9;&#x9;&#x9;return function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(widget,methodName,event);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var ret = original ? original.apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;&#x9;}();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;&#xA;var _SLOTVALUE = &apos;value&apos;;&#xA;var _SLOTSEPARATOR = &apos; &apos;;&#xA;&#xA;DojoMobileSpinWheelPickerProxy.prototype.getValue = function () {&#xA;&#x9;var va</values>
		<values>lue = &quot;&quot;;&#xA;&#x9;var slots = this.widget.slots;&#xA;&#x9;for(var i=0;i&lt;slots.length;i++) {&#xA;&#x9;&#x9;var slot = slots[i];&#xA;&#x9;&#x9;value = value + (slot.get(_SLOTVALUE) + _SLOTSEPARATOR);&#xA;&#x9;}&#xA;&#x9;return value.substring(0, value.length-1);;&#xA;};&#xA;&#xA;DojoMobileSpinWheelPickerProxy.prototype._executeAction4 = DojoMobileSpinWheelPickerProxy.prototype.executeAction;&#xA;DojoMobileSpinWheelPickerProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileSpinWheelPickerProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;var arrayOfVars = action.parameters[0].value.split(_SLOTSEPARATOR);&#xA;&#x9;&#x9;var slots = this.widget.slots;&#xA;&#x9;&#x9;for (var i=0; i&lt;slots.length; i++) {&#xA;&#x9;&#x9;&#x9;slots[i].set(_SLOTVALUE, arrayOfVars[i]);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction4(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;/////////////////////////// DojoMobileSpinWheelPickerProxy End ////////////////&#xA;&#xA;///////</values>
		<values>////////////////// DojoMobileValuePickerProxy //////////////////////////&#xA;DojoMobileValuePickerProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileSpinWheelPickerProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileValuePickerProxy.prototype = new DojoMobileSpinWheelPickerProxy();&#xA;&#xA;DojoMobileValuePickerProxy.prototype.getEventsToRegister = function() {&#xA;&#x9;return [&quot;onClick&quot;];&#xA;};&#xA;&#xA;DojoMobileValuePickerProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onClick&quot;: &quot;onchange&quot;};&#xA;};&#xA;&#xA;//////////////////// DojoMobileValuePickerProxy End ///////////////////////////&#xA;&#xA;///////////////////////// DojoMobileValuePickerSlotProxy //////////////////////&#xA;DojoMobileValuePickerSlotProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileValuePickerSlotProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileValuePickerSlotProxy.prototype.handleEvent = function(element,eventName,event){&#xA;&#x9;// Do nothing&#xA;};&#xA;/////////////////////////</values>
		<values>// DojoMobileValuePickerSlotProxy End ////////////////&#xA;&#xA;///////////////////////// DojoMobileGaugeProxy ////////////////////////////////&#xA;DojoMobileGaugeProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoWidgetProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(this.element.getElementsByTagName(&quot;*&quot;));&#xA;};&#xA;DojoMobileGaugeProxy.prototype = new DojoWidgetProxy();&#xA;&#xA;DojoMobileGaugeProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;onStartEditing&quot;];&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onStartEditing&quot;: &quot;onchange&quot;};&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype.handleEvent = function(widget,eventName,event){&#xA;&#x9;var element = widget.domNode;&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getPr</values>
		<values>operty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype._dojoGetProperty=DojoMobileGaugeProxy.prototype.getProperty;&#xA;DojoMobileGaugeProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._dojoGetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype.getValue = function () {&#xA;&#x9;return &quot;&quot;+this.widget.get(&quot;value&quot;);&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype.isContainer =  function() {&#xA;&#x9;return false;&#xA;};&#xA;&#xA;DojoMobileGaugeProxy.prototype._executeAction7 = DojoMobileGaugeProxy.prototype.executeAction;&#xA;DojoMobileGaugeProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileGaugeProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;this.widget.set(&quot;value&quot;, action.parameters[0].</values>
		<values>value);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction7(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/////////////////////////// DojoMobileGaugeProxy End //////////////////////////&#xA;&#xA;///////////////////////// DojoMobileListItemProxy /////////////////////////////&#xA;DojoMobileListItemProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;//&#x9;if (!jsUtil.isRecordingMode()) {&#xA;//&#x9;&#x9;this.dojoClick(element);&#xA;//&#x9;}&#xA;};&#xA;DojoMobileListItemProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileListItemProxy.prototype.isContainer = function() {&#xA;//&#x9;var nl = this.element.getElementsByTagName(&quot;a&quot;); &#xA;//&#x9;return (nl.length != 0);&#xA;&#x9;return true;&#xA;};&#xA;&#xA;DojoMobileListItemProxy.prototype.getEventsToRegister = function(){ // 44930&#xA;&#x9;return [dojoTriggeredEvent,&quot;onkeydown&quot;,&quot;keydown&quot;];&#xA;};&#xA;&#xA;//DojoMobileListItemProxy.prototype.dojoClick = function (element) {&#xA;//&#x9;var widget = this.widget;&#xA;//&#x9;require([&quot;dojo/on&quot;], function(on){&#xA;//&#x9;&#x9;on(element, &apos;click&apos;</values>
		<values>, function(event) {&#xA;//&#x9;&#x9;&#x9;widget.onClick(event);&#xA;//&#x9;&#x9;});&#xA;//&#x9;});&#xA;//};&#xA;&#xA;/////////////////////////// DojoMobileListItemProxy End ///////////////////////&#xA;&#xA;/////////////////////////// DojoMobileScrollableviewProxy /////////////////////&#xA;DojoMobileScrollableviewProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; &#xA;&#x9;DojoMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;DojoMobileScrollableviewProxy.prototype = new DojoMobileWidgetProxy();&#xA;&#xA;DojoMobileScrollableviewProxy.prototype.getEventsToRegister = function(){ // 44930&#xA;&#x9;return [&quot;onAfterScroll&quot;];&#xA;};&#xA;&#xA;DojoMobileScrollableviewProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onAfterScroll&quot;: &quot;onscroll&quot;};&#xA;};&#xA;&#xA;DojoMobileScrollableviewProxy.prototype.installDojoEventWrapper=function(widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var elt = this.element;&#xA;&#x9;&#x9;widget[methodName] = function(event) {&#xA;&#x9;&#x9;&#x9;//console.log(&quot;SCROLL TO: &quot;+event.x+&apos; // &apos;+event.y+&apos; </values>
		<values>// &apos;+element.scrollDir);&#xA;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(elt);&#x9;&#xA;&#x9;&#x9;&#x9;proxy.scrollCoords = { x: event.x, y: event.y };&#xA;&#x9;&#x9;&#x9;eventHandlerFunction(elt,methodName,event);&#xA;&#x9;&#x9;};&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;};&#xA;&#xA;DojoMobileScrollableviewProxy.prototype.handleEvent = function(element,eventName,event){&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;};&#xA;&#xA;DojoMobileScrollableviewProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;var x = this.scrollCoords.x;&#xA;&#x9;parameters.x = isNaN(x) ? 0 : parseInt(x);&#xA;&#x9;var y = this.scrollCoords.y;&#xA;&#x9;parameters.y = isNaN(y) ? 0 : parseInt(y);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;DojoMobileScrollableviewProxy.prototype._executeAction8 = DojoMobileScrollableviewProxy.prototype.executeAction;&#xA;DojoMobileScrollableviewProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;DojoMobileScrollableviewProxy.prototype.executeAction(&apos;+ ac</values>
		<values>tion.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onscroll&quot; :&#xA;&#x9;&#x9;var coords = {x: parseInt(action.parameters[1].value), y: parseInt(action.parameters[0].value)};&#xA;&#x9;&#x9;this.widget.scrollTo(coords);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default :&#xA;&#x9;&#x9;retStatus = this._executeAction8(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////// DojoMobileScrollableviewProxy End /////////////////&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. &#xD;&#xA; *  Copyright HCL Technologies Ltd. 2017.  All Rights Reserved.&#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// kind of constants defining JQuery Mobile objects&#xD;&#xA;var JQM_UNIDENTIFIED&#x9;&#x9;= &quot;jqmunidentified&quot;;&#xD;&#xA;var JQM_BUTTON &#x9;&#x9;&#x9;&#x9;= &quot;jqmbutton&quot;;&#xD;&#xA;var JQM_SLIDER &#x9;&#x9;&#x9;&#x9;= &quot;jqmslider&quot;;&#xD;&#xA;var JQM_RANGESLIDER&#x9;&#x9;&#x9;= &quot;</values>
		<values>jqmrangeslider&quot;;&#xD;&#xA;var JQM_CHECKBOX &#x9;&#x9;&#x9;= &quot;jqmcheckbox&quot;;&#xD;&#xA;var JQM_RADIO&#x9;&#x9;&#x9;&#x9;= &quot;jqmradio&quot;;&#xD;&#xA;var JQM_COLLAPSIBLE&#x9;&#x9;&#x9;= &quot;jqmcollapsible&quot;;&#xD;&#xA;var JQM_COLLAPSIBLE_CONTENT&#x9;= &quot;jqmcollapsiblecontent&quot;;&#xD;&#xA;var JQM_COLLAPSIBLE_HEADER&#x9;= &quot;jqmcollapsibleheader&quot;;&#xD;&#xA;var JQM_LISTVIEW&#x9;&#x9;&#x9;= &quot;jqmlistview&quot;;&#xD;&#xA;var JQM_LISTVIEW_ITEM&#x9;&#x9;= &quot;jqmlistviewitem&quot;;&#xD;&#xA;var JQM_SELECT&#x9;&#x9;&#x9;&#x9;= &quot;jqmselect&quot;;&#xD;&#xA;var JQM_COLUMNTOGGLE_BUTTON&#x9;= &quot;jqmcolumntogglebutton&quot;;&#xD;&#xA;var JQM_TEXTINPUT&#x9;&#x9;&#x9;= &quot;jqmtextinput&quot;;&#xD;&#xA;var JQM_SEARCHINPUT&#x9;&#x9;&#x9;= &quot;jqmsearchinput&quot;;&#xD;&#xA;var JQM_SEARCHINPUT_CLEAR&#x9;= &quot;jqmsearchinputclearbutton&quot;;&#xD;&#xA;var JQM_FLIP_TOGGLE_SWITCH&#x9;= &quot;jqmfliptoggleswitch&quot;;&#xD;&#xA;var JQM_AUTOCOMPLETE&#x9;&#x9;= &quot;jqmautocomplete&quot;;&#xD;&#xA;var JQM_CONTROL_GROUP&#x9;&#x9;= &quot;jqmcontrolgroup&quot;;&#xD;&#xA;var JQM_CONTROLS&#x9;&#x9;&#x9;= &quot;jqmcontrols&quot;;&#xD;&#xA;var JQM_GRID&#x9;&#x9;&#x9;&#x9;= &quot;jqmgrid&quot;;&#xD;&#xA;var JQM_BAR&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;jqmbar&quot;;&#xD;&#xA;var JQM_NAVBAR&#x9;&#x9;&#x9;&#x9;= &quot;jqmnavbar&quot;;&#xD;&#xA;var JQM_PANEL&#x9;&#x9;&#x9;&#x9;= &quot;jqmpanel&quot;;&#xD;&#xA;var JQM_POPUP&#x9;&#x9;&#x9;&#x9;= &quot;jqmpopup&quot;;&#xD;&#xA;var JQM_TABLE&#x9;&#x9;&#x9;&#x9;= &quot;jqmtable&quot;;&#xD;&#xA;var JQM_TEXTAREA&#x9;&#x9;&#x9;= &quot;jqmtextarea&quot;;&#xD;&#xA;var JQM_TOOLBAR&#x9;&#x9;&#x9;&#x9;= &quot;jqmtoolbar&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;var JQUI_WIDGET&#x9;&#x9;&#x9;&#x9;=&#x9;&quot;jqme</values>
		<values>lement&quot;;&#xD;&#xA;var JQUI_ACCORDION&#x9;&#x9;&#x9;=&#x9;JQM_COLLAPSIBLE_HEADER;&#xD;&#xA;var JQUI_ACCORDIONCONTENT   =   JQM_COLLAPSIBLE;&#xD;&#xA;var JQUI_TABPANNEL&#x9;&#x9;&#x9;=  &#x9;&quot;jquitabpanel&quot;;&#xD;&#xA;var JQUI_TAB&#x9;&#x9;&#x9;&#x9;=  &#x9;&quot;jquitab&quot;;&#xD;&#xA;var JQUI_TABSNAV&#x9;&#x9;&#x9;=  &#x9;&quot;jquitabsnav&quot;;&#xD;&#xA;var JQUI_TABS&#x9;&#x9;&#x9;&#x9;=  &#x9;&quot;jquitabs&quot;;&#xD;&#xA;var JQUI_AUTOCOMPLETE       =  &#x9;JQM_SEARCHINPUT;&#xD;&#xA;var JQUI_MENU&#x9;&#x9;&#x9;&#x9;=  &#x9;&quot;jquimenu&quot;;&#xD;&#xA;var JQUI_MENUITEM&#x9;&#x9;&#x9;=  &#x9;&quot;jquimenuitem&quot;;&#xD;&#xA;var JQUI_PROGRESSBAR        =   &quot;jquiprogressbar&quot;;&#xD;&#xA;var JQUI_DATETEXTINPUT      =   &quot;jquidateinput&quot;;&#xD;&#xA;var JQUI_DATEPICKER         =   &quot;jquidatepicker&quot;;&#xD;&#xA;var JQM_DIALOG&#x9;&#x9;&#x9;&#x9;=&#x9;&quot;jqmdialog&quot;;&#xD;&#xA;var JQUI_CLOSEICON          =   &quot;jquicloseicon&quot;;&#xD;&#xA;var JQUI_SPINNER&#x9;&#x9;&#x9;=&#x9;&quot;jquispinner&quot;;&#xD;&#xA;&#xD;&#xA;var JqDefaultWidget =&#x9;&#x9;&quot;ui-widget&quot;;&#xD;&#xA;&#xD;&#xA;var JQUERYUI_DEFAULT_PROXY = &quot;JQueryUIElementProxy&quot;;&#xD;&#xA;&#xD;&#xA;var jQueryWidgets = [{key: &apos;class&apos;, value:&apos;ui-accordion-header&apos;, name:JQUI_ACCORDION},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-accordion&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-accordion-header-icon&apos;, name:JQUI_WIDGET},&#xD;&#xA;           </values>
		<values>             {key: &apos;class&apos;, value:&apos;ui-accordion-content&apos;, name:JQUI_ACCORDIONCONTENT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-collapsible&apos;, name:JQM_COLLAPSIBLE},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-collapsible-heading-toggle&apos;, name:JQM_COLLAPSIBLE_HEADER},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-collapsible-content&apos;, name:JQM_COLLAPSIBLE_CONTENT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-tabs&apos;, name:JQUI_TABS},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-tabs-nav&apos;, name:JQUI_TABSNAV},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-icon-close&apos;, name:JQUI_CLOSEICON},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-tabs-anchor&apos;, name:JQUI_TAB},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-tabs-panel&apos;, name:JQUI_TABPANNEL},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-autocomplete-input&apos;, name:JQUI_AUTOCOMPLETE},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-input-text&apos;, name:JQM_TEXTINPUT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-che</values>
		<values>ckbox&apos;, name:JQM_CHECKBOX},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-radio&apos;, name:JQM_RADIO},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-selectmenu-button&apos;, name:JQM_SELECT},                        &#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-helper-hidden-accessible&apos;, name:JQUI_WIDGET},                        &#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;hasDatepicker&apos;, name:JQUI_DATETEXTINPUT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-datepicker&apos;, name:JQUI_DATEPICKER},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-menu&apos;, name:JQUI_MENU},                        &#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-menu-item&apos;, name:JQUI_MENUITEM},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-progressbar&apos;, name:JQUI_PROGRESSBAR},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-slider-handle&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-slider&apos;, name:JQM_SLIDER},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-spinner&apos;, name:JQUI_SPINNER},&#xD;&#xA;  </values>
		<values>                      {key: &apos;class&apos;, value:&apos;ui-spinner-input&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-spinner-button&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-dialog&apos;, name:JQM_DIALOG},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-dialog-titlebar-close&apos;, name:JQM_BUTTON},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-controlgroup&apos;, name:JQM_CONTROL_GROUP},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-flipswitch&apos;, name:JQM_FLIP_TOGGLE_SWITCH},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-slider-switch&apos;, name:JQM_FLIP_TOGGLE_SWITCH},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-grid-a&apos;, name:JQM_GRID},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-grid-b&apos;, name:JQM_GRID},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-grid-c&apos;, name:JQM_GRID},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-grid-d&apos;, name:JQM_GRID},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-bar&apos;, name:JQM_BAR},&#xD;&#xA;                        {key: &apos;class</values>
		<values>&apos;, value:&apos;ui-listview&apos;, name:JQM_LISTVIEW},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-li-static&apos;, name:JQM_LISTVIEW_ITEM},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-li&apos;, name:JQM_LISTVIEW_ITEM},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-input-search&apos;, name:JQM_SEARCHINPUT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-input-clear&apos;, name:JQM_SEARCHINPUT_CLEAR},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-navbar&apos;, name:JQM_NAVBAR},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-panel&apos;, name:JQM_PANEL},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-popup&apos;, name:JQM_POPUP},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-rangeslider&apos;, name:JQM_RANGESLIDER},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-select&apos;, name:JQM_SELECT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-table&apos;, name:JQM_TABLE},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-header&apos;, name:JQM_TOOLBAR},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-footer&apos;, name:JQM_TOOLBAR},&#xD;&#xA;         </values>
		<values>               {key: &apos;class&apos;, value:&apos;ui-controlgroup-controls&apos;, name:JQM_CONTROLS},&#xD;&#xA;                        {key: &apos;data-role&apos;, value:&apos;controlgroup-controls&apos;, name:JQM_CONTROLS},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-button&apos;, name:JQM_BUTTON},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-btn&apos;, name:JQM_BUTTON},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-buttonset&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-button-text&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-btn-text&apos;, name:JQUI_WIDGET},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-selectmenu-icon&apos;, name:JQM_SELECT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-selectmenu-text&apos;, name:JQM_SELECT},&#xD;&#xA;                        {key: &apos;class&apos;, value:&apos;ui-menu-item-wrapper&apos;, name:JQM_SELECT}&#xD;&#xA;                        ];&#xD;&#xA;&#xD;&#xA;// List of containers having child elements&#xD;&#xA;var JqContainerList = [JQM_COLLAPSIBLE,&#xD;&#xA;                       JQM_CONTROL_GROUP,&#xD;&#xA;                       JQM_CONT</values>
		<values>ROLS,&#xD;&#xA;                       JQM_GRID,&#xD;&#xA;                       JQM_BAR,&#xD;&#xA;                       JQM_LISTVIEW,&#xD;&#xA;                       JQM_LISTVIEW_ITEM,&#xD;&#xA;                       JQM_NAVBAR,&#xD;&#xA;                       JQM_PANEL,&#xD;&#xA;                       JQM_POPUP,&#xD;&#xA;                       JQUI_TAB,&#xD;&#xA;                       JQUI_TABS,&#xD;&#xA;                       JQUI_TABPANNEL,&#xD;&#xA;                       JQUI_MENU,&#xD;&#xA;                       JQUI_MENUITEM,&#xD;&#xA;                       JQUI_WIDGET,&#xD;&#xA;                       JQM_TABLE,&#xD;&#xA;                       JQM_TOOLBAR,&#xD;&#xA;                       JQM_DIALOG,&#xD;&#xA;                       JQM_SLIDER,&#xD;&#xA;                       JQM_RANGESLIDER,&#xD;&#xA;                       JQM_SEARCHINPUT,&#xD;&#xA;                       JQUI_DATETEXTINPUT,&#xD;&#xA;                       JQUI_DATEPICKER,&#xD;&#xA;                       JQM_TEXTINPUT,&#xD;&#xA;                       JQUI_ACCORDIONCONTENT,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   JQUI_ACCORDION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   JQM_COLLAPSIBLE_HEADER,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   JQM_COLLAPSIBLE_CONTENT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;   ];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#xD;&#xA;// Can not find a better way to in</values>
		<values>itialize a map with keys declared as variables&#xD;&#xA;var jqueryMobileProxyMap={};&#xD;&#xA;jqueryMobileProxyMap[JQM_BUTTON]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileButtonProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_CHECKBOX]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryCheckBoxRadioProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_RADIO]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryCheckBoxRadioProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_COLLAPSIBLE]&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_COLLAPSIBLE_CONTENT]&#x9;= &quot;JQueryMobileCollapsibleContentProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_COLLAPSIBLE_HEADER]&#x9;= &quot;JQueryMobileCollapsibleProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_CONTROL_GROUP]&#x9;&#x9;&#x9;= &quot;JQueryMobileControlGroupProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_CONTROLS]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileControlGroupProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_FLIP_TOGGLE_SWITCH]&#x9;= &quot;JQueryMobileFlipSwitchProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_GRID]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_BAR]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_LISTVIEW]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_LISTVIEW_ITEM]&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;j</values>
		<values>queryMobileProxyMap[JQM_SEARCHINPUT]&#x9;&#x9;&#x9;= &quot;JQueryMobileTextInputProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_SEARCHINPUT_CLEAR]&#x9;&#x9;= &quot;JQueryMobileWidgetProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_TEXTINPUT]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileTextInputProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQUI_AUTOCOMPLETE]&#x9;&#x9;&#x9;= &quot;JQueryMobileTextInputProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_NAVBAR]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_PANEL]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_POPUP]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_SLIDER]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileSliderProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_RANGESLIDER]&#x9;&#x9;&#x9;= &quot;JQueryMobileRangeSliderProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_SELECT]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileSelectProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_TABLE]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQM_TOOLBAR]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileElementProxy&quot;;&#xD;&#xA;jqueryMobileProxyMap[JQUI_DATEPICKER]&#x9;&#x9;&#x9;= &quot;JQueryMobileDatePickerProxy&quot;;&#xD;&#xA;&#xD;&#xA;var jqueryUIProxyMap={};&#xD;&#xA;jqueryUIProxyMap[JQM_DIALOG]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIDialogProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_SPIN</values>
		<values>NER]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUISpinnerProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_SLIDER]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUISliderProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_ACCORDION]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIaccordionHeaderProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_ACCORDIONCONTENT]&#x9;&#x9;&#x9;= &quot;JQueryUIWidgetProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_BUTTON]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIButtonProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_TABPANNEL]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUITabProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_TAB]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUITabProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_AUTOCOMPLETE]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUITextInputProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_TEXTINPUT]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUITextInputProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_MENUITEM]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIMenuItemProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_SELECT]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUISelectmenuProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_MENU]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIMenuProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_PROGRESSBAR]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryProgressBarProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_DATETEXTINPUT]&#x9;&#x9;&#x9;= &quot;JQueryUIDateInputProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_DATEPICKER]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIDateProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_CLOSEICON]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIWidgetProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_TABS]&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQuery</values>
		<values>UIElementProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_TABSNAV]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIElementProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQUI_WIDGET]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryUIElementProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_CONTROL_GROUP]&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileControlGroupProxy&quot;;&#xD;&#xA;jqueryUIProxyMap[JQM_CONTROLS]&#x9;&#x9;&#x9;&#x9;&#x9;= &quot;JQueryMobileControlGroupProxy&quot;;&#xD;&#xA;&#xD;&#xA;var jqueryUtil = {&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Utility function to test a value in a element&apos;s class list&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;classListContains:function(element,value){&#xD;&#xA;&#x9;&#x9;&#x9;if( element.classList==null ){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return element.classList.contains(value);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Returns true if a click handler is attached to the element &#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;isClickEventHandler: function(element) {&#xD;&#xA;&#x9;&#x9;&#x9;if (jQuery._data &amp;&amp; jQuery._data(element, &apos;events&apos;)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var ret = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;jQuery.each(jsUtil.getClickEvents(), function( i, eventName ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventName = eventName.replace(RMoTeventPrefix, &apos;&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (jQuery._data(element, &apos;events&apos;)[eventName]) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ret = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return false; // Exit jQuery each loop&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#x9;})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return ret;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;var tagsIgnoredByJQuery =[&quot;html&quot;,&quot;head&quot;,&quot;script&quot;,&quot;title&quot;,&quot;meta&quot;,&quot;style&quot;,&quot;body&quot;];&#xA;var JQUERY_DOMAIN_NAME = &quot;jquery&quot;;&#xA;&#xA;var JQueryDomain = function() {&#xA;&#x9;HTMLDomain.apply(this,arguments);&#xA;};&#xA;JQueryDomain.prototype = new HTMLDomain();&#xA;&#xA;JQueryDomain.prototype.init = function() {&#xA;&#x9;/**&#xA;&#x9; * Register a function that will be run when the DOM is fully loaded&#xA;&#x9; */&#xA;&#x9;var domain = this;&#xA;&#x9;// jQuery.fn.on is supported only in v1.7 and above&#xA;&#x9;// We do not want to register for jQuery domain unless its available&#xA;&#x9;if (window.jQuery &amp;&amp; jQuery.fn &amp;&amp; jQuery.fn.on) {&#x9;&#xA;&#x9;&#x9;domainManager.registerDomain(domain);&#xA;&#x9;&#x9;webGuiUtil.jQuery(document).ready(function() {&#xA;&#x9;&#x9;&#x9;if (jsUtil.isReco</values>
		<values>rdingMode()) { // Recording only&#xA;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(&quot;PARSEDOCUMENT================registerJQueryReady&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(jsUtil.getVersions());&#xA;&#x9;&#x9;&#x9;&#x9;rmotRecorder.parseDocument();&#xA;&#x9;&#x9;&#x9;&#x9;webGuiRecorderInterfaceObj.updateHierarchy();&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;});&#xA;&#x9;}&#xA;}&#xA;&#xA;JQueryDomain.prototype.getWidgets=function(){&#xA;&#x9;return jQueryWidgets;&#xA;}&#xA;&#xA;/**&#xA; * Returns the name of the domain =&quot;jquery&quot;&#xA; */&#xA;JQueryDomain.prototype.getDomainName=function(){&#xA;&#x9;return JQUERY_DOMAIN_NAME;&#xA;};&#xA;&#xA;/**&#xA; * Returns the version of the domain&#xA; */&#xA;JQueryDomain.prototype.getDomainVersion=function() {&#xA;&#x9;var v = &apos; / &apos;;&#xA;&#x9;if (window.jQuery &amp;&amp; jQuery.fn) {&#xA;&#x9;&#x9;v += jQuery.fn.jquery + &apos; (UI)&apos;;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (window.jQuery &amp;&amp; jQuery.mobile) {&#xA;&#x9;&#x9;v += &apos; / &apos; + jQuery.mobile.version + &apos; (Mobile)&apos;;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return v.substring(3, v.length);;&#xA;};&#xA;&#xA;JQueryDomain.prototype.getProxy=function(element) {&#xA;&#x9;var proxy = null;&#xA;&#x9;if(jQuery.mobile){&#xA;&#x9;&#x9;this.jqueryMap = jqueryMobileProxyMap;&#xA;&#x9;}else{//jQuery.ui&#xA;&#x9;&#x9;this.jqueryMap = jqueryUIProxyMap;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;var jqObject = this.getEnclosingObject(ele</values>
		<values>ment);&#xA;&#x9;if (jqObject == null) return null; // Not identified as a jQuery object&#xA;&#x9;&#xA;&#x9;var proxyClassName = this.jqueryMap[jqObject];&#xA;&#x9;&#xA;&#x9;if (jqObject==JQUI_WIDGET) {jqObject = null;} // JQUI_WIDGET can not be instantiated&#xA;&#x9;&#xA;&#x9;var concreteProxy = this.getConcreteProxy(element, proxyClassName, jqObject); // 43835&#xA;&#x9;if (concreteProxy != null) {&#xA;&#x9;&#x9;proxy = jsReflect.createObject(this, element, concreteProxy.className, concreteProxy.name);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return proxy;&#xA;};&#xA;&#xA;JQueryDomain.prototype.getConcreteProxy=function(element, proxyClassName, proxyName){&#xA;&#x9;var concreteProxy = { className: proxyClassName, name: proxyName};&#xA;&#x9;var tagName = element.tagName.toLowerCase();&#xA;&#x9;switch(proxyClassName) {&#xA;&#x9;&#x9;case &quot;JQueryMobileTextInputProxy&quot;:&#xA;&#x9;&#x9;if (tagName==&quot;textarea&quot;) {&#xA;&#x9;&#x9;&#x9;concreteProxy.className = &quot;JQueryMobileTextAreaProxy&quot;;&#xA;&#x9;&#x9;&#x9;concreteProxy.name = JQM_TEXTAREA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (element.hasChildNodes() &amp;&amp; inputTypesHTML5.indexOf(element.childNodes[0].type) &gt;= 0) {&#xA;&#x9;&#x9;&#x9;// Do not identify elements having HTML5 input types as jQuery widgets&#xA;&#x9;&#x9;&#x9;return</values>
		<values> null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;JQueryMobileButtonProxy&quot;:&#xA;&#x9;&#x9;if (tagName==&quot;li&quot; || (element.parentNode &amp;&amp; element.parentNode.tagName.toLowerCase()==&quot;li&quot;)) {&#xA;&#x9;&#x9;&#x9;concreteProxy.className = &quot;JQueryMobileListviewItemProxy&quot;;&#xA;&#x9;&#x9;&#x9;concreteProxy.name = JQM_LISTVIEW_ITEM;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;JQueryMobileSliderProxy&quot;:&#xA;&#x9;&#x9;if (jqueryUtil.classListContains(element,&quot;ui-slider-switch&quot;)) {&#xA;&#x9;&#x9;&#x9;concreteProxy.className = &quot;JQueryMobile_13x_FlipSwitchProxy&quot;;&#xA;&#x9;&#x9;&#x9;concreteProxy.name = JQM_FLIP_TOGGLE_SWITCH;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;JQueryUIMenuItemProxy&quot;:&#xA;&#x9;&#x9;if (parseInt(jsUtil.getMainWindow().jQuery().jquery) &gt;= 3) {&#xA;&#x9;&#x9;&#x9;concreteProxy.className = &quot;HtmlElementProxy&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;JQueryUISelectmenuProxy&quot;:&#xA;&#x9;&#x9;if (jqueryUtil.classListContains(element,&quot;ui-select&quot;)) {&#xA;&#x9;&#x9;&#x9; return null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;};&#xA;&#x9;&#xA;&#x9;if(jQuery.mobile &amp;&amp; tagName==&quot;label&quot;) { // Don&apos;t want to identify label as a JQuery object on mobile&#xA;&#x9;&#x9;return null&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return concreteProxy;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright</values>
		<values> IBM Corporation 2014 - 2015. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;&#xA;//////////////////////////////JQueryUIElementProxy ///////////////////////////&#xA;JQueryUIElementProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return;&#xA;&#x9;HtmlElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;JQueryUIElementProxy.prototype = new HtmlElementProxy();&#xA;&#xA;JQueryUIElementProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;return false; // Don&apos;t visit known ELEMENT_NODE children return true;&#xA;};&#xA;////////////////////////////////// JQueryUIElementProxy //////////////////&#xA;&#xA;///////////////////////////// JQueryUIWidgetProxy Start /////////////////////////&#xA;&#xA;JQueryUIWidgetProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryUIE</values>
		<values>lementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype = new JQueryUIElementProxy();&#xA;&#xA;JQueryUIWidgetProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT /*,&quot;ontap&quot;*/];&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;// this.installJQueryEventWrapper( this.element, events[i], this.handleEvent);&#xA;&#x9;&#x9;&#x9;&#x9;this.installEventWrapper( events[i], this.handleEvent);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventName];&#xA;&#xA;&#x9;&#x9;this.element[eventNa</values>
		<values>me] = function(event) {&#xA;&#x9;&#x9;&#x9;// if already handled then ignore the event&#xA;&#x9;&#x9;&#x9;// if isWidgetChild is defined by the event.target proxy then ignore the event&#xA;&#x9;&#x9;&#x9;var targetProxy = domainManager.getProxy(event.target);&#xA;&#x9;&#x9;&#x9;if (!event.recorded &amp;&amp; !targetProxy.isWidgetChild) {&#xA;&#x9;&#x9;&#x9;&#x9;handler(this, eventName, event);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;var ret = this.rmotOriginalHandler[eventName] ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rmotOriginalHandler[eventName].apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;this.proxy.domainObj._parseDocument();&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;};&#x9;&#x9;&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype.interceptEvent=function( widget, methodName, eventHandlerFunction) {&#xA;&#x9;if (!widget[methodName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;widget[methodName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[methodName] = widget[methodName];&#xA;&#x9;&#x9;widget[methodName] = function() {&#xA;&#x9;&#x9;&#x9;return function(event) {&#xA;&#x9;&#x9;&#x9;&#x9;if (!event.recorded)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventHandlerFunction(widget,methodName,event);&#xA;&#x9;&#x9;&#x9;&#x9;var ret = this.rmotOriginalHandler[methodName] ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.rmotOriginalHandler[methodName].apply(thi</values>
		<values>s, arguments) : true;&#xA;&#x9;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;}();&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype._htmlgetProperty=JQueryUIWidgetProxy.prototype.getProperty;&#xA;JQueryUIWidgetProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.TOOL_TIP:&#xA;&#x9;&#x9;propValue = this.element.title;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;var label = webGuiUtil.jQuery(this.element).find(&apos;label&apos;);&#xA;&#x9;&#x9;if (!label.length) label = webGuiUtil.jQuery(this.element).prev(&apos;label&apos;);&#xA;&#x9;&#x9;propValue = (label.length) ? webGuiUtil.jQuery(label[0]).text() : &quot;&quot;;&#xA;&#x9;&#x9;propValue = jsUtil.trim(propValue);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._htmlgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;&#xA;JQueryUIWidgetProxy.prototype._htmlapplyDecoratedProps = JQueryUIWidgetProxy.prototype.applyDecoratedProps;&#xA;JQueryUIWidgetProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._htmlapplyDecoratedProps(targetElement);&#xA;&#x9; if(this.element.title)&#xA;&#x9;&#x9; targetElement.tooltip = targetElement.title;&#xA;};&#xA;&#xA;</values>
		<values>JQueryUIWidgetProxy.prototype.handleEvent = function(element,methodName,event){&#xA;&#x9;&#x9;rmotRecorder.log(&quot;RMoTJSI: JQueryUIWidgetProxy: Event=&quot;+methodName+&quot; Element =&quot;+element.className+&quot; Event= &quot;+event);&#xA;&#x9;&#x9;var parameters = {};&#xA;&#x9;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;&#x9;var eventName = methodName.toLowerCase();&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(element);&#xA;&#x9;&#x9;var tagName = jqueryproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;// var updatedHier = jqueryproxy.domainObj._updateHierarchy();// Updating current hierarchy before recording the event&#xA;&#x9;&#x9;jqueryproxy.domainObj._recordEvent(event, eventName, tagName, element, parameters);&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;};&#xA;&#xA;JQueryUIWidgetProxy.prototype.isContainer =  function() {&#xA;&#x9;return JqContainerList.indexOf(this.proxyName)&gt;=0;&#xA;};&#xA;&#xA;JQueryUIWidgetProxy.prototype._htmlisVisible = JQueryUIWidgetProxy.prototype.isVisible;&#xA;JQueryUIWidgetProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = this._htmlisVisible();&#xA;&#x9;&#xA;&#x9;if (!this.isContainer()) {&#x9;// make final JQuery widgets visibl</values>
		<values>e&#xA;&#x9;&#x9;ret.visibility = true;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;&#xA;//------------------------------------------------------------&#xA;//               P  L  A  Y  B  A  C  K&#xA;//------------------------------------------------------------&#xA;&#xA;JQueryUIWidgetProxy.prototype._htmlexecuteAction = JQueryUIWidgetProxy.prototype.executeAction;&#xA;JQueryUIWidgetProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUIWidgetProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;var target = this.getTarget();&#xA;&#x9;var proxyName = this.getProxyName();&#xA;&#x9;if ((proxyName == JQM_LISTVIEW_ITEM) || (proxyName == JQM_COLLAPSIBLE)) {&#xA;&#x9;&#x9;target = webGuiUtil.jQuery(this.element).find(&apos;a&apos;)[0];&#xA;&#x9;} else if ((proxyName == JQM_CHECKBOX) || (proxyName == JQM_RADIO)) {&#xA;&#x9;&#x9;target = webGuiUtil.jQuery(this.element).find(&apos;input&apos;)[0];&#xA;&#x9;}&#xA;&#x9;if (target != undefined) {&#xA;&#x9;&#x9;this.setTarget(target);&#xA;&#x9;}&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onclick&quot; :&#xA;&#x9;case &quot;onmouseover&quot; :&#xA;&#x9;case &quot;oninput&quot; :&#xA;&#x9;case &quot;</values>
		<values>onkeypress&quot; :&#xA;&#x9;case &quot;onkeydown&quot; :&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;retStatus = this._htmlexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;ontap&quot; :&#xA;&#x9;&#x9;retStatus = this.tap();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onselect&quot; :&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;onexpand&quot; :&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.getTarget()).trigger(&apos;expand&apos;);&#x9;&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;oncollapse&quot; :&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.getTarget()).trigger(&apos;collapse&apos;);&#x9;&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._htmlexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014 - 2016.&#xA; *  Copyright HCL Technologies Ltd. 2017.  All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;///////////////////////////// JQueryMobileElementProxy ///////////////////////////&#xA;JQueryMobileElementProxy = function(domainObj,element){&#xA;&#x9;if (arguments.</values>
		<values>length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryUIWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileElementProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryMobileElementProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, null);&#xA;&#x9;event.recorded = true;&#xA;};&#xA;///////////////////////////// JQueryMobileElementProxy End ///////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileWidgetProxy ////////////////////////////&#xA;JQueryMobileWidgetProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryUIWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileWidgetProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;//Identify elements that belong to this widget&#xA;JQueryMobileWidgetProxy.prototype.setWidgetChild = function(children){&#xA;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xA;&#x9;&#x9;var child = childr</values>
		<values>en[i];&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(child);&#xA;&#x9;&#x9;proxy.isWidgetChild=true;&#xA;&#x9;}&#xA;};&#xA;///////////////////////////// JQueryMobileWidgetProxy End ///////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileButtonProxy ////////////////////////////&#xA;JQueryMobileButtonProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileButtonProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;&#xA;JQueryMobileButtonProxy.prototype._jqui5executeAction = JQueryMobileWidgetProxy.prototype.executeAction;&#xA;JQueryMobileButtonProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileButtonProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &apos;onclick&apos; :&#xA;&#x9;&#x9;var target = webGuiUtil.jQuery(this.element).find(&apos;input&apos;)[0];&#xA;&#x9;&#x9;if (typeof(target) != &apos;undefined&apos;) this.setTarget(target);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;</values>
		<values>&#xA;&#x9;retStatus = this._jqui5executeAction(action);&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;///////////////////////////// JQueryMobileButtonProxy End ////////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileListviewItemProxy //////////////////////&#xA;JQueryMobileListviewItemProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileButtonProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;*&quot;));&#xA;};&#xA;JQueryMobileListviewItemProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileListviewItemProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventName];&#xA;&#xA;&#x9;&#x9;this.element[eventName] = function(event) {&#xA;&#x9;&#x9;&#x9;// if already handled then ignore the event&#xA;&#x9;&#x9;&#x9;if (!event.recorded) handler(this, eventName, event);&#xA;&#xA;&#x9;&#x9;&#x9;var ret = this.rmotOriginalHandler[eventNam</values>
		<values>e] ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rmotOriginalHandler[eventName].apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;this.proxy.domainObj._parseDocument();&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;};&#x9;&#x9;&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;JQueryMobileListviewItemProxy.prototype.isContainer = function(){&#xA;&#x9;return false;&#xA;};&#xA;///////////////////////////// JQueryMobileListviewItemProxy End //////////////////&#xA;&#xA;///////////////////////////// JQueryMobileTextInputProxy ////////////////////////&#xA;JQueryMobileTextInputProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;:not(a,span)&quot;));&#x9;// 45857&#xA;};&#xA;JQueryMobileTextInputProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileTextInputProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventName];&#xA;&#xA;&#x9;&#x9;this.element[eventNam</values>
		<values>e] = function(event) {&#xA;&#x9;&#x9;&#x9;// if already handled then ignore the event&#xA;&#x9;&#x9;&#x9;if (!event.recorded) {&#xA;&#x9;&#x9;&#x9;&#x9;var textInput = (this.proxy.isWidgetChild) ? this.parentElement : this; // 45857&#xA;&#x9;&#x9;&#x9;&#x9;handler(textInput, eventName, event);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;var ret = this.rmotOriginalHandler[eventName] ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rmotOriginalHandler[eventName].apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;this.proxy.domainObj._parseDocument();&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;};&#x9;&#x9;&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#xA;&#x9;if (eventName == &quot;onkeydown&quot;) {&#xA;&#x9;&#x9;if (event.keyCode == 13) { // need to capture enter key&#xA;&#x9;&#x9;&#x9;eventName=&quot;onkeypress&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// else will be managed as a repeated action&#xA;&#x9;}&#xA;&#x9;if (!RMoTIOS) webGuiUtil.jQuery(proxy.getNativeElement()).focus();&#xA;&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype._j</values>
		<values>querygetProperty=JQueryMobileTextInputProxy.prototype.getProperty;&#xA;JQueryMobileTextInputProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#x9;var nativeElt = this.getNativeElement();&#xA;&#x9;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue=webGuiUtil.jQuery(nativeElt).val();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;var isProp = webGuiUtil.jQuery(nativeElt).is(&apos;[&apos;+propName+&apos;]&apos;);&#xA;&#x9;&#x9;propValue = (isProp) ? webGuiUtil.jQuery(nativeElt).attr(propName) : this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = this._htmlisVisible();&#xA;&#x9;if (ret.reachable) ret.visibility = true; // make final JQuery widgets visible if they are reachable&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype._jqueryapplyDecoratedProps = JQueryMobileTextInputProxy.prototype.applyDecoratedProps;&#xA;JQueryMobileTextInputProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.</values>
		<values>label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;&#x9;// Copy some native element&apos;s properties&#xA;&#x9;targetElement.placeholder = this.getProperty(&apos;placeholder&apos;);&#xA;&#x9;targetElement.type = this.getProperty(&apos;type&apos;);&#xA;&#x9;targetElement.value = this.getProperty(&apos;value&apos;);&#xA;&#x9;targetElement.id = this.getProperty(&apos;id&apos;);&#xA;&#x9;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.getNativeElement = function() {&#xA;&#x9;var nativeElement = webGuiUtil.jQuery(this.element).find(&apos;input&apos;); &#xA;&#x9;if (!nativeElement.length) { // JQM 1.2.x&#xA;&#x9;&#x9;nativeElement = webGuiUtil.jQuery(this.element);&#xA;&#x9;}&#xA;&#x9;return nativeElement[0];&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;onkeydown&quot;: &quot;oninput&quot;};&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT,&quot;onkeydown&quot;];&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype.pressEn</values>
		<values>ter = function() {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileTextInputProxy.prototype.pressEnter()&apos;);&#xA;&#x9;webGuiUtil.jQuery(this.element).trigger(&quot;submit&quot;);&#xA;&#x9;return RMOT_SUCCESS;&#xA;};&#xA;&#xA;JQueryMobileTextInputProxy.prototype._jqui0executeAction = JQueryMobileTextInputProxy.prototype.executeAction;&#xA;JQueryMobileTextInputProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileTextInputProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;var tt = this.getNativeElement();&#xA;&#x9;if (tt != null) this.setTarget(tt);&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onkeypress&quot; :&#xA;&#x9;case &quot;onkeydown&quot; :&#xA;&#x9;&#x9;retStatus = this.pressEnter();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._jqui0executeAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////////// JQueryMobileTextInputProxy End ////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileTextAreaProxy /////////////////////////&#xA;JQueryMobileTextAreaProxy = function(domainObj,eleme</values>
		<values>nt){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileTextInputProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileTextAreaProxy.prototype = new JQueryMobileTextInputProxy();&#xA;&#xA;JQueryMobileTextAreaProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;// onkeydown will be managed as a repeated action&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;if (!RMoTIOS) webGuiUtil.jQuery(proxy.getNativeElement()).focus();&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, null);&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;JQueryMobileTextAreaProxy.prototype._jqueryTextInputgetProperty=JQueryMobileTextAreaProxy.prototype.getProperty;&#xA;JQueryMobileTextAreaProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue=webGuiUtil.jQuery(this.element).val();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jqueryTextInputgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return pro</values>
		<values>pValue;&#xA;};&#xA;///////////////////////////// JQueryMobileTextAreaProxy End /////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileSliderProxy ////////////////////////&#xA;JQueryMobileSliderProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;:not(input)&quot;));&#x9;&#xA;};&#xA;JQueryMobileSliderProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileSliderProxy.prototype.installWrappers = function(){&#xA;&#x9;var eventName = this.getEventsToRegister()[0];&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.element).on( eventName, function( event, ui ) {&#xA;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(this);&#xA;&#x9;&#x9;&#x9;proxy.handleEvent(this,eventName,event);&#xA;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;this.element[RMOT_TRIGGER_EVENT] = function(event) {&#xA;&#x9;&#x9;&#x9;// 49316: prevent this event from breaking the repeated action &#xA;&#x9;&#x9;&#x9;event.recorded = tr</values>
		<values>ue;&#xA;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;};&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;rmotHierarchy.setSavedProperties(this); // 50794&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype._jqueryhandleEvent=JQueryMobileSliderProxy.prototype.handleEvent;&#xA;JQueryMobileSliderProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;&#xA;&#x9;// Update edit text widgets content prop&#xA;&#x9;var inputs = webGuiUtil.jQuery(this.element).find(&quot;input&quot;);&#xA;&#x9;for (var i = 0; i &lt; inputs.length; i++) {&#xA;&#x9;&#x9;var proxyInput = domainManager.getProxy(inputs[i]);&#xA;&#x9;&#x9;proxyInput[WebGuiConstants.CONTENT_PROP]=webGuiUtil.jQuery(inputs[i]).val();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;proxy._jqueryhandleEvent(element, eventName, event);&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getValue();&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;slidestart&quot;: &quot;onchange&quot;};&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiCon</values>
		<values>stants.CONTENT_PROP, &quot;value&quot;];&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype._jquerygetProperty=JQueryMobileSliderProxy.prototype.getProperty;&#xA;JQueryMobileSliderProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;case &quot;value&quot;:&#xA;&#x9;&#x9;propValue = this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;max&quot;:&#xA;&#x9;case &quot;min&quot;:&#xA;&#x9;case &quot;step&quot;:&#xA;&#x9;&#x9;propValue = webGuiUtil.jQuery(this.getNativeElement()).attr(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype._jqueryapplyDecoratedProps = JQueryMobileSliderProxy.prototype.applyDecoratedProps;&#xA;JQueryMobileSliderProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;&#x9;targetElement.max=this.getProperty(&quot;max&quot;);&#xA;&#x9;targetElement.value=this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;targetElement.min=this.getProperty(&quot;mi</values>
		<values>n&quot;);&#xA;&#x9;targetElement.step=this.getProperty(&quot;step&quot;);&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getNativeElement = function(pos) {&#xA;&#x9;pos = (!pos) ? 0 : pos; // default 0&#xA;&#x9;var slider = webGuiUtil.jQuery(this.element).children(&apos;input&apos;)[pos];&#xA;&#x9;return slider;&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getValue = function(pos) {&#xA;&#x9;return webGuiUtil.jQuery(this.getNativeElement(pos)).val();&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;slidestart&quot;];&#xA;};&#xA;&#xA;JQueryMobileSliderProxy.prototype._jqui1executeAction = JQueryMobileSliderProxy.prototype.executeAction;&#xA;JQueryMobileSliderProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileSliderProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;var tab = webGuiUtil.jQuery(this.element).find(&quot;input&quot;);&#xA;&#x9;&#x9;if (tab) {&#xA;&#x9;&#x9;&#x9;var jobj = webGuiUtil.jQuery(tab);&#xA;&#x9;&#x9;&#x9;if (jobj.val &amp;&amp; jobj.slider) {&#xA;&#x9;&#x9;&#x9;&#x9;jobj.val(action.par</values>
		<values>ameters[0].value);&#xA;&#x9;&#x9;&#x9;&#x9;jobj.slider(&quot;refresh&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._jqui1executeAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////////// JQueryMobileSliderProxy End ////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileRangeSliderProxy ///////////////////&#xA;JQueryMobileRangeSliderProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileSliderProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileRangeSliderProxy.prototype = new JQueryMobileSliderProxy();&#xA;&#xA;JQueryMobileRangeSliderProxy.prototype._jqueryslidergetValue=JQueryMobileRangeSliderProxy.prototype.getValue;&#xA;JQueryMobileRangeSliderProxy.prototype.getValue = function() {&#xA;&#x9;return this._jqueryslidergetValue(0) + &quot; - &quot; + this._jqueryslidergetValue(1);&#xA;};&#xA;&#xA;JQueryMobileRangeSliderProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.rangeMin = this._jqueryslidergetValue(0);&#xA;&#x9;parameters.rangeMax = this._jquerysl</values>
		<values>idergetValue(1);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryMobileRangeSliderProxy.prototype._jqui2executeAction = JQueryMobileRangeSliderProxy.prototype.executeAction;&#xA;JQueryMobileRangeSliderProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileRangeSliderProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;var rangeMin = webGuiUtil.jQuery(this.element).find(&quot;input&quot;)[0];&#xA;&#x9;&#x9;var rangeMax = webGuiUtil.jQuery(this.element).find(&quot;input&quot;)[1];&#xA;&#x9;&#x9;if (rangeMin &amp;&amp; rangeMax) {&#xA;&#x9;&#x9;&#x9;var jobjMin = webGuiUtil.jQuery(rangeMin);&#xA;&#x9;&#x9;&#x9;var jobjMax = webGuiUtil.jQuery(rangeMax);&#xA;&#x9;&#x9;&#x9;if (jobjMin.val &amp;&amp; jobjMax.val &amp;&amp; jobjMin.slider &amp;&amp; jobjMax.slider) {&#xA;&#x9;&#x9;&#x9;&#x9;var valMin = null;&#xA;&#x9;&#x9;&#x9;&#x9;var valMax = null;&#xA;&#x9;&#x9;&#x9;&#x9;if (action.parameters[0].name == &quot;rangeMin&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valMin = action.parameters[0].value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valMax = action.parameters[1].value;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valMin = action.parameters[1].value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;valMax = a</values>
		<values>ction.parameters[0].value;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;jobjMin.val(valMin);&#xA;&#x9;&#x9;&#x9;&#x9;jobjMin.slider(&quot;refresh&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;jobjMax.val(valMax);&#xA;&#x9;&#x9;&#x9;&#x9;jobjMax.slider(&quot;refresh&quot;);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._jqui2executeAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////////// JQueryMobileRangeSliderProxy End ////////////////&#xA;&#xA;///////////////////////////// JQueryMobileSelectProxy /////////////////////////&#xA;JQueryMobileSelectProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;select&quot;)); // 50857&#xA;};&#xA;JQueryMobileSelectProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileSelectProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;this.element.rmotOriginalHandler[eventName] = this.element[eventNa</values>
		<values>me];&#xA;&#xA;&#x9;&#x9;this.element[eventName] = function(event) {&#xA;&#x9;&#x9;&#x9;// if already handled then ignore the event&#xA;&#x9;&#x9;&#x9;if (!event.recorded) handler(this, eventName, event);&#xA;&#xA;&#x9;&#x9;&#x9;var ret = this.rmotOriginalHandler[eventName] ? &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rmotOriginalHandler[eventName].apply(this, arguments) : true;&#xA;&#x9;&#x9;&#x9;this.proxy.domainObj._parseDocument();&#xA;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;};&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;rmotHierarchy.setSavedProperties(this); // 51980&#xA;&#x9;}&#x9;&#x9;&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;&#xA;&#x9;// 41256: data-native-menu=&quot;false&quot;&#xA;&#x9;// Record click instead of change event when native select menu is disabled&#xA;&#x9;var nativeMenu = proxy.getNativeMenu();&#xA;&#xA;&#x9;if (eventName == RMOT_TRIGGER_EVENT) {&#xA;&#x9;&#x9;if (!nativeMenu) {&#xA;&#x9;&#x9;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;}&#xA;&#x9;else if (eventName == &quot;onchange&quot; &amp;&amp; nativeMenu) {&#xA;&#x9;&#x9;var tagName = proxy.getPr</values>
		<values>operty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiConstants.CONTENT_PROP];&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype._jquerygetProperty=JQueryMobileSelectProxy.prototype.getProperty;&#xA;JQueryMobileSelectProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;length&quot;:&#xA;&#x9;&#x9;propValue = this.getNativeElement().options.length;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;options&quot;:&#xA;&#x9;&#x9;var select = this.getNativeElement();&#xA;&#x9;&#x9;propValue = &quot;&quot;;&#xA;&#x9;&#x9;for (var i = 0; i &lt; select.options.length; i++) {&#xA;&#x9;&#x9;&#x9;propValue += select.options[i].text + &apos;, &apos;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;propValue = propValue.substring(0, propValue.length-2);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype._jqueryapplyDecoratedProps = JQu</values>
		<values>eryMobileSelectProxy.prototype.applyDecoratedProps;&#xA;JQueryMobileSelectProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.options = this.getProperty(WebGuiConstants.OPTIONS_PROP);&#xA;&#x9;targetElement.length = this.getProperty(WebGuiConstants.OPTIONSLENGTH_PROP);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getNativeElement = function() {&#xA;&#x9;return webGuiUtil.jQuery(this.element).find(&apos;select&apos;)[0];&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getNativeMenu = function() {&#xA;&#x9;return webGuiUtil.jQuery(this.getNativeElement()).selectmenu( &quot;option&quot;, &quot;nativeMenu&quot; );&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getValue = function() {&#xA;&#x9;var selection = &apos;&apos;;&#xA;&#x9;var select = this.getNativeElement();&#xA;&#x9;webGuiUtil.jQuery(select).find(&apos;:selected&apos;).each(function () {&#xA;&#x9;&#x9;var option = webGuiUtil.jQuery(this);&#xA;&#x9;&#x9;if (option.length) {&#xA;&#x9;&#x9;&#x9;selection += &apos;, &apos;+option.text();&#xA;&#x9;&#x9;}&#xA;&#x9;});&#xA;&#x9;return selection.substring(2, selection.leng</values>
		<values>th);&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getValue();&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryMobileSelectProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT, &quot;onchange&quot;];&#xA;};&#xA;&#xA;&#xA;JQueryMobileSelectProxy.prototype._jqui3executeAction = JQueryMobileSelectProxy.prototype.executeAction;&#xA;JQueryMobileSelectProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileSelectProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onclick&quot; :&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.getNativeElement()).selectmenu(&apos;open&apos;);&#xA;&#x9;&#x9;return RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;this.setTarget(this.getNativeElement());&#xA;&#x9;&#x9;var RMoTselectedOptions = action.parameters[0].value.split(&quot;, &quot;);&#xA;&#x9;&#x9;for(var i=0; i&lt;RMoTselectedOptions.length; i++) {&#xA;&#x9;&#x9;&#x9;var RMoTtext = RMoTselectedOptions[i];&#xA;&#x9;&#x9;&#x9;var RMoToptions = webGuiUtil.jQuery(this.get</values>
		<values>Target()).find(&apos;option:contains(&apos;+RMoTtext+&apos;)&apos;);&#xA;&#x9;&#x9;&#x9;if (RMoToptions.length == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;action.message = &apos;&quot;&apos; + RMoTtext + &apos;&quot; not found in [&apos; + this.getProperty(&apos;options&apos;) + &apos;]&apos;;&#xA;&#x9;&#x9;&#x9;&#x9;return RMOT_FAILURE;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;for (var j=0; j&lt;RMoToptions.length; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;if (webGuiUtil.jQuery(RMoToptions[j]).text() == RMoTtext) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(RMoToptions[j]).prop(&apos;selected&apos;, true);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;this.dispatchEvent(HTML_EVENT, &apos;change&apos;, false, false);&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.getTarget()).selectmenu(&apos;refresh&apos;);&#xA;&#x9;&#x9;return RMOT_SUCCESS;&#xA;&#x9;default:&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;retStatus = this._jqui3executeAction(action);&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;///////////////////////////// JQueryMobileSelectProxy End /////////////////////&#xA;&#xA;///////////////////////////// JQueryCheckBoxRadioProxy //////////////////////////&#xA;JQueryCheckBoxRadioProxy = function(domainObj,element) {&#xA;&#x9;if (arguments.length == 0) return;&#xA;&#x9;JQueryMobileWidgetProxy.apply(this, arguments);&#xA;};&#xA;JQueryCheckBoxRadioProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryCheckBoxRa</values>
		<values>dioProxy.prototype._applyDecoratedProps = JQueryCheckBoxRadioProxy.prototype.applyDecoratedProps;&#xA;JQueryCheckBoxRadioProxy.prototype.applyDecoratedProps = function(targetElement){&#xA;&#x9;this._applyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checked = this.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryCheckBoxRadioProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiConstants.CHECKED_PROP];&#xA;};&#xA;&#xA;JQueryCheckBoxRadioProxy.prototype._jquerygetProperty=JQueryCheckBoxRadioProxy.prototype.getProperty;&#xA;JQueryCheckBoxRadioProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;propValue = this.getNativeElement().checked;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryCheckBoxRadioProxy.prototype.getNativeElement = function() {&#xA;&#x9;return webGuiUtil.jQuery(this.element).find(&apos;input&apos;)[0];&#xA;};&#xA;&#xA;JQueryCh</values>
		<values>eckBoxRadioProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT, &quot;onchange&quot;];&#xA;};&#xA;&#xA;JQueryCheckBoxRadioProxy.prototype.handleEvent = function(element,methodName,event) {&#xA;&#x9;if (methodName != RMOT_TRIGGER_EVENT) {&#xA;&#x9;&#x9;JQueryMobileWidgetProxy.prototype.handleEvent(element, &quot;onclick&quot;, event);&#xA;&#x9;}&#xA;&#x9;event.recorded = true;&#xA;};&#xA;///////////////////////////// JQueryCheckBoxRadioProxy End //////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileFlipSwitchProxy ///////////////////////&#xA;JQueryMobileFlipSwitchProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileFlipSwitchProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;onswipe&quot;, &quot;onchange&quot;];&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype.getPropertiesToSave = function() {&#xA;&#x9;return [WebGuiConstants.CONTENT_PROP, WebGuiConstants.CHECKED_PROP];&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchPr</values>
		<values>oxy.prototype._jqueryapplyDecoratedProps = JQueryMobileFlipSwitchProxy.prototype.applyDecoratedProps;&#xA;JQueryMobileFlipSwitchProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checked = this.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype.getChecked = function() {&#xA;&#x9;// Flip switch may contain input or select element&#xA;&#x9;var input = webGuiUtil.jQuery(this.element).children(&apos;input&apos;)[0];&#xA;&#x9;if (input) return input.checked;&#xA;&#x9;&#xA;&#x9;var select = webGuiUtil.jQuery(this.element).children(&apos;select&apos;)[0];&#xA;&#x9;if (select) {&#xA;&#x9;&#x9;for(var i = 0; i &lt; select.options.length; i++) { &#xA;&#x9;&#x9;&#x9;if(select.options[i].selected) {&#xA;&#x9;&#x9;&#x9;&#x9;return (i == 0) ? false : true;&#xA;&#x9;&#x9;&#x9;} &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return &apos;&apos;;&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype.getValue = function() {&#xA;&#x9;var className = this.getChecked() ? &quot;.ui-flipswitch-on&quot; : &quot;.ui-flipswitch-off&quot;;&#xA;&#x9;&#xA;&#x9;var elt = webGuiUtil.jQuery(this.element</values>
		<values>).children(className)[0];&#xA;&#x9;if (elt) return elt.textContent;&#xA;&#x9;&#xA;&#x9;return &apos;&apos;;&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype._jquerygetProperty=JQueryMobileFlipSwitchProxy.prototype.getProperty;&#xA;JQueryMobileFlipSwitchProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.getValue();&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;propValue = this.getChecked();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype._jqueryhandleEvent=JQueryMobileFlipSwitchProxy.prototype.handleEvent;&#xA;JQueryMobileFlipSwitchProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;if (eventName==&apos;onswipe&apos;) {&#xA;&#x9;&#x9;var start = event.swipestart;&#xA;&#x9;&#x9;var stop = event.swipestop;&#xA;&#x9;&#x9;if (start &amp;&amp; stop) {&#xA;&#x9;&#x9;&#x9;proxy.swipeDirection = (stop.coords[0] - start.coords[0] &gt; 0) ? 1 : 0; // right : left&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;eventN</values>
		<values>ame = &apos;onclick&apos;;&#xA;&#x9;&#x9;var parameters = {}&#xA;&#x9;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (proxy.swipeDirection != null) {&#xA;&#x9;&#x9;&#x9;eventName = &apos;onswipe&apos;;&#xA;&#x9;&#x9;&#x9;parameters = proxy.getParameters();&#xA;&#x9;&#x9;&#x9;proxy.swipeDirection = null;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, parameters);&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.direction = this.swipeDirection;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryMobileFlipSwitchProxy.prototype._jqui6executeAction = JQueryMobileFlipSwitchProxy.prototype.executeAction;&#xA;JQueryMobileFlipSwitchProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileFlipSwitchProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onswipe&quot; :&#xA;&#x9;&#x9;// Trigger events in the order they are fired during recording phase&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.element).trigger(&apos;swipe&apos;);&#xA;&#x9;&#x9;webGuiUt</values>
		<values>il.jQuery(this.element).trigger(&apos;change&apos;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var eventDirName = (action.parameters[0].value == 1) ? &apos;swiperight&apos; : &apos;swipeleft&apos; ;&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.element).trigger(eventDirName);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._jqui6executeAction(action);&#xA;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////////// JQueryMobileFlipSwitchProxy End ///////////////////&#xA;&#xA;///////////////////////////// JQueryMobile_13x_FlipSwitchProxy //////////////////&#xA;JQueryMobile_13x_FlipSwitchProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileFlipSwitchProxy.apply(this,arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element.parentElement).children(&quot;select&quot;));&#xA;};&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype._jqueryapplyDecoratedProps = JQueryMobile_13x_FlipSwitchProxy.prototype.applyDecoratedProps;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.applyDecoratedPro</values>
		<values>ps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.checked = this.checked;&#xA;&#x9;targetElement.content = this.content;&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.getFlipButton = function(active) {&#xA;&#x9;var selector = (active) ? &apos;.ui-btn-active&apos; : &apos;:not(.ui-btn-active)&apos;;&#xA;&#x9;return webGuiUtil.jQuery(this.element).find(selector);&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.getContent = function() {&#xA;&#x9;return this.getFlipButton(this.getChecked())[0].textContent;&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.getChecked = function() {&#xA;&#x9;var btn = this.getFlipButton(true);&#xA;&#x9;if (btn.length) {&#xA;&#x9;&#x9;var btnWidth = btn[0].style.width;&#xA;&#x9;&#x9;return (btnWidth == &quot;0%&quot;) ? false : true;&#xA;&#x9;}&#xA;&#x9;return &apos;&apos;;&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype._jquerygetProperty=JQueryMobile_13x_FlipSwitchProxy.prototype.getProperty;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch </values>
		<values>(propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = this.getContent();&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;var label = webGuiUtil.jQuery(this.element.parentElement).find(&apos;label&apos;);&#xA;&#x9;&#x9;propValue = (label.length) ? webGuiUtil.jQuery(label[0]).text() : &quot;&quot;;&#xA;&#x9;&#x9;propValue = jsUtil.trim(propValue);&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;propValue = this.getChecked();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.installWrappers = function() {&#xA;&#x9;var eventName = this.getEventsToRegister()[0];&#xA;&#x9;if (!this.element[eventName + &quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;this.element[eventName + &quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var select = webGuiUtil.jQuery(this.element.parentElement).find(&apos;select&apos;)[0];&#xA;&#x9;&#x9;webGuiUtil.jQuery(select).on( eventName, function( event, ui ) {&#xA;&#x9;&#x9;&#x9;var flip = webGuiUtil.jQuery(this.parentElement).find(&apos;div&apos;)[0];&#xA;&#x9;&#x9;&#x9;var proxy = domainManager.getProxy(flip);&#xA;&#x9;&#x9;&#x9;proxy.handleEvent(flip,&quot;onclick&quot;,</values>
		<values>event);&#x9;&#xA;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// 51376: props init&#xA;&#x9;&#x9;this.checked = this.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;&#x9;this.content = this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype._jqueryhandleEvent=JQueryMobile_13x_FlipSwitchProxy.prototype.handleEvent;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;proxy._jqueryhandleEvent(element, eventName, event);&#xA;&#x9;&#xA;&#x9;// 51376: props update&#xA;&#x9;proxy.checked = proxy.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;proxy.content = proxy.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;slidestop&quot;];&#xA;};&#xA;&#xA;JQueryMobile_13x_FlipSwitchProxy.prototype.isContainer = function(){&#xA;&#x9;return false;&#xA;};&#xA;///////////////////////////// JQueryMobile_13x_FlipSwitchProxy End //////////////&#xA;&#xA;&#xA;///////////////////////////// JQueryMobileCollapsibleProxy //////////////////</values>
		<values>//&#xA;JQueryMobileCollapsibleProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileCollapsibleProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileCollapsibleProxy.prototype.getInnerProperty = function(elem, prop) {&#xA;&#x9;if (elem.attributes) {&#xA;&#x9;&#x9;for (var j=0; j &lt; elem.attributes.length; j++)&#xA;&#x9;&#x9;&#x9;if (elem.attributes[j].name == prop)&#xA;&#x9;&#x9;&#x9;&#x9;return elem.attributes[j].value;&#xA;&#x9;}&#xA;&#xA;&#x9;if (elem.hasChildNodes()) {&#xA;&#x9;&#x9;for (var i=0; i &lt; elem.childNodes.length; i++) {&#xA;&#x9;&#x9;&#x9;var ret = this.getInnerProperty(elem.childNodes[i], prop);&#xA;&#x9;&#x9;&#x9;if (ret != undefined)&#xA;&#x9;&#x9;&#x9;&#x9;return ret;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return undefined;&#xA;};&#xA;&#xA;JQueryMobileCollapsibleProxy.prototype._jquerygetProperty=JQueryMobileCollapsibleProxy.prototype.getProperty;&#xA;JQueryMobileCollapsibleProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#x9;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;// 55942: Get the content of the first text node.&#xA;&#x9;&#x9;// Might a</values>
		<values>ppear complicated but works for jQuery Mobile 1.3.x and 1.4.x&#xA;&#x9;&#x9;var textNodes = webGuiUtil.jQuery(this.element).find(&apos;*&apos;).addBack().contents().filter(function() { return this.nodeType == 3; });&#xA;&#x9;&#x9;propValue = (textNodes.length &gt; 0) ? textNodes[0].textContent : this.element.textContent;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.COLLAPSED_PROP:&#xA;&#x9;&#x9;propValue=this.getInnerProperty(this.element.parentElement.nextSibling, &quot;aria-hidden&quot;);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryMobileCollapsibleProxy.prototype._jqueryapplyDecoratedProps = JQueryMobileCollapsibleProxy.prototype.applyDecoratedProps;&#xA;JQueryMobileCollapsibleProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;var hidden = this.getProperty(WebGuiConstants.COLLAPSED_PROP);&#xA;&#x9;targetElement.collapsed = hidden;&#xA;};&#xA;&#xA;JQueryMobileCollapsibleProxy.prototype._jqui4executeAction = JQueryMobileCollapsibleProxy.prototype.executeAction;&#xA;JQueryMobileCollap</values>
		<values>sibleProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryMobileCollapsibleProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onexpand&quot; :&#xA;&#x9;case &quot;oncollapse&quot; :&#xA;&#x9;&#x9;var hidden = this.getProperty(WebGuiConstants.COLLAPSED_PROP);&#xA;&#x9;&#x9;if (((hidden == &quot;true&quot;) &amp;&amp; (actionType == &quot;onexpand&quot;)) || ((hidden == &quot;false&quot;) &amp;&amp; (actionType == &quot;oncollapse&quot;))) {&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;action.type = &quot;onclick&quot;;&#xA;&#x9;&#x9;&#x9;retStatus = this._jqui4executeAction(action);&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._jqui4executeAction(action);&#xA;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;///////////////////////////// JQueryMobileCollapsibleProxy End ////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileCollapsibleContentProxy /////////////////&#xA;JQueryMobileCollapsibleContentProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileCollapsibl</values>
		<values>eContentProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileCollapsibleContentProxy.prototype.isVisible = function() {&#xA;&#x9;var ret = this._htmlisVisible();&#xA;&#x9;ret.propagation = false;&#xA;&#x9;return ret;&#xA;};&#xA;/////////////////////////// JQueryMobileCollapsibleContentProxy End ///////////////&#xA;&#xA;///////////////////////////// JQueryMobileDatePickerProxy /////////////////////////&#xA;JQueryMobileDatePickerProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileDatePickerProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileDatePickerProxy.prototype._jqueryinstallEventWrapper=JQueryMobileDatePickerProxy.prototype.installEventWrapper;&#xA;JQueryMobileDatePickerProxy.prototype.installEventWrapper = function (eventName, handler) {&#xA;&#x9;this._jqueryinstallEventWrapper(eventName, handler);&#xA;&#x9;var hls = webGuiUtil.jQuery(&apos;.ui-datepicker&apos;).find(&quot;a&quot;);&#xA;&#x9;for (var i = 0; i &lt; hls.length; i++) {&#xA;&#x9;&#x9;hls[i].registeredDomain = 0;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQuer</values>
		<values>yMobileDatePickerProxy.prototype.isContainer = function(){&#xA;&#x9;return true;&#xA;};&#xA;///////////////////////////// JQueryMobileDatePickerProxy End /////////////////////////&#xA;&#xA;///////////////////////////// JQueryMobileControlGroupProxy //////////////////////////&#xA;JQueryMobileControlGroupProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryMobileControlGroupProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryMobileControlGroupProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;// Do not log any events for this widget&#xA;&#x9;event.recorded = true;&#xA;};&#xA;///////////////////////////// JQueryMobileControlGroupProxy End //////////////////////////&#xA;/*&#xA; *&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2018. All Rights Reserved. &#xA; *  (C) Copyright HCL Technologies Ltd. 2017, 2018. All Rights Reserved. &#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricte</values>
		<values>d Rights:  &#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp. &#xA; *&#xA; */&#xA;&#xA;///////////////////////////// JQueryUIButtonProxy ////////////////////////////////&#xA;&#xA;&#xA;JQueryUIButtonProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;&#xA;JQueryUIButtonProxy.prototype._JQWidgetgetProperty = JQueryUIButtonProxy.prototype.getProperty;&#xA;JQueryUIButtonProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;propValue = this.getLabelProperty();&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.CHECKED_PROP:&#xA;&#x9;&#x9;// get the native radio or checkbox input element &#xA;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;propValue = nativeElement.checked;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;retur</values>
		<values>n propValue;&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUIButtonProxy.prototype.applyDecoratedProps;&#xA;JQueryUIButtonProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapplyDecoratedProps(targetElement);&#xA;&#x9;var proxyName = this.getProxyName();&#xA;&#x9;if(proxyName == JQM_CHECKBOX || proxyName == JQM_RADIO){&#xA;&#x9;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP); &#xA;&#x9;&#x9;targetElement.checked = this.getProperty(WebGuiConstants.CHECKED_PROP);&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype.getProxyName = function() {&#xA;&#x9;if(this.btnTagName)&#xA;&#x9;&#x9;return this.btnTagName;&#xA;&#x9;&#xA;&#x9;var tagName = this.element.tagName;&#xA;&#x9;this.btnTagName = JQM_BUTTON;&#xA;&#x9;// For CheckBox or Radio buttons&#xA;&#x9;if(tagName.toLowerCase() == &quot;label&quot;){&#xA;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;var elementType = nativeElement.type&#xA;&#x9;&#x9;&#x9;if(elementType == &quot;checkbox&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;this.btnTagName = JQM_CHECKBOX;&#xA;&#x9;&#x9;&#x9;}else if(elementType == &quot;radio&quot;){&#xA;&#x9;&#x9;&#x9;&#x9;this.btnTagName = JQM_RADIO;&#xA;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#x9;// TODO: Have a new Logger Class&#xA;&#x9;&#x9;&#x9;&#x9;//console.log(&quot;RTW_WEBGUI_ERR:Unsupported button type &quot;+elementType);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return this.btnTagName;&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype.getNativeInputElement = function(){&#xA;&#x9;var nativeElement = null;&#xA;&#x9;//generally defined for checkbox and radio buttons&#xA;&#x9;if(this.element.control){&#xA;&#x9;&#x9;nativeElement = this.element.control;&#xA;&#x9;}else{// go for label way&#xA;&#x9;&#x9;var ownerDoc = this.element.ownerDocument;&#xA;&#x9;&#x9;var results = webGuiUtil.jQuery(ownerDoc).find(&quot;#&quot;+this.element.getAttribute(&quot;for&quot;));&#xA;&#x9;&#x9;if(results &amp;&amp; results.length &gt; 0){&#xA;&#x9;&#x9;&#x9;nativeElement = results[0];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if(nativeElement == null){&#xA;&#x9;&#x9;// TODO: Create a Logger Class&#xA;&#x9;&#x9;//console.log(&quot;RTW_WEBGUI_ERR:Unable to find native input element for &quot;, this.element);&#xA;&#x9;}&#xA;&#x9;return nativeElement;&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype.getLabelProperty = function() {&#xA;&#x9;var label = &quot;&quot;;&#xA;&#x9;if(this.element.tagName.toLowerCase() == &quot;input&quot;){//JQuery submit button&#xA;&#x9;&#x9;label = this.element.value;&#xA;&#x9;}else{&#xA;&#x9;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;&#x9;label = this.element.textCo</values>
		<values>ntent;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype._JQWidgetexecuteAction = JQueryUIButtonProxy.prototype.executeAction;&#xA;JQueryUIButtonProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUIButtonProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#xA;&#x9;var webGuiTagName = this.getProperty(WebGuiConstants.TAGNAME_PROP); &#xA;&#x9;if(webGuiTagName == JQM_CHECKBOX || webGuiTagName == JQM_RADIO){&#xA;&#x9;&#x9;var htmlinputObject = this.getNativeInputElement();&#xA;&#x9;&#x9;this.setTarget(htmlinputObject);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return this._JQWidgetexecuteAction(action);&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT];&#xA;};&#xA;&#xA;JQueryUIButtonProxy.prototype.handleEvent = function(element,methodName,event){&#xA;&#x9;rmotRecorder.log(&quot;RMoTJSI: JQueryUIButtonProxy:handleEvent Method=&quot;+methodName+&quot;, Element =&quot;+element.className+&quot;, DomainName= &quot;+element.domainName+&quot;, Event= &quot;+event);&#xA;&#x9;if(element.domainName != JQUERY_DOMAIN_NAME){//49392&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;var parameters = {};&#xA;&#x9;parameter</values>
		<values>s.enableasyncaction = false;&#xA;&#x9;var eventName = &quot;onclick&quot;;&#xA;&#x9;var jqueryproxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = jqueryproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;jqueryproxy.domainObj._recordEvent(event, eventName, tagName, element, parameters);&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;&#xA;///////////////////////////////JQueryUIButtonProxy ends ///////////////////////////&#xA;&#xA;///////////////////////////// JQueryUITabProxy ////////////////////////////////&#xA;JQueryUITabProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;};&#xA;&#xA;JQueryUITabProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;&#xA;JQueryUITabProxy.prototype._JQWidgetgetProperty = JQueryUITabProxy.prototype.getProperty;&#xA;JQueryUITabProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.TABHEADER_PROP:&#xA;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;</values>
		<values>&#xA;JQueryUITabProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUITabProxy.prototype.applyDecoratedProps;&#xA;JQueryUITabProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapplyDecoratedProps(targetElement);&#xA;&#x9;var elementTag = this.proxyName;&#xA;&#x9;if(elementTag==JQUI_TABPANNEL)&#xA;&#x9;{&#xA;&#x9;&#x9;targetElement.tabheader = this.getLabel(); &#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUITabProxy.prototype.getLabel = function() {&#xA;&#x9;var label = &quot;&quot;;&#xA;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;var elementTag = this.proxyName;&#xA;&#x9;&#x9;if(elementTag==JQUI_TABPANNEL)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var labelElementId = this.element.getAttribute(&quot;aria-labelledby&quot;);&#xA;&#x9;&#x9;&#x9;var&#x9;tabelement=&#x9;webGuiUtil.jQuery(this.element).parent();&#xA;&#x9;&#x9;&#x9;if(tabelement)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var tabs = webGuiUtil.jQuery(tabelement).find(&quot;LI&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (var i =0; i&lt;tabs.length;i++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currTab = tabs[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currTabLable =currTab.getAttribute(&quot;aria-labelledby&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    if(labelElementId==currTabLable)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;&#x9;var mylabel= currTab.textContent;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;&#x9;return mylabel;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;</values>
		<values>&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(elementTag==JQUI_TAB)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;label=this.element.content;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return label;&#xA;&#xA;&#x9;};&#xA;&#x9;&#xA;&#xA;JQueryUITabProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT];&#xA;};&#xA;///////////////////////////////JQueryUITabProxy ends ///////////////////////////&#xA;&#xA;///////////////////////////// JQueryUIDateInputProxy Starts ////////////////////////////////&#xA;&#xA;&#xA;JQueryUIDateInputProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;&#x9;leftLabel = null ;&#xA;&#x9;topLabel = null ;&#xA;&#x9;bottomLabel =null;&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIDateInputProxy.prototype._installEventWrapper = JQueryUIDateInputProxy.prototype.installEventWrapper;&#xA;JQueryUIDateInputProxy.prototype.installEventWrapper = function(eventName, handler) {&#xA;&#x9;try {&#xA;&#x9;&#x9;// https://github.com/primefaces/primefaces/issues/3054&#xA;&#x9;&#x9;const proto = PrimeFaces.widget.Calendar.prototype;&#xA;&#x9;&#x9;if (!proto.$alreadyInstalled) {&#xA;&#x9;&#x9;&#x9;proto.$alreadyInst</values>
		<values>alled = true;&#xA;&#x9;&#x9;&#x9;proto.fireDateSelectEvent = function() {&#xA;&#x9;&#x9;&#x9;&#x9;const elt = this.jqEl || this.input;&#xA;&#x9;&#x9;&#x9;&#x9;if (elt) elt.trigger(&apos;change&apos;);&#xA;&#x9;&#x9;&#x9;};&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch(e) {}&#xA;&#x9;&#xA;&#x9;this._installEventWrapper(eventName, handler);&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype._JQWidgetgetProperty = JQueryUIDateInputProxy.prototype.getProperty;&#xA;JQueryUIDateInputProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = (this.element.RMoTcontent!= undefined) ? this.element.RMoTcontent : this.element.value;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP :&#xA;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;if(propValue)&#xA;&#x9;&#x9;&#x9;propValue = propValue.trim();&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype._getLabel = JQueryUIDateInputProxy.prototype.getLabel;&#xA;JQueryUIDateInputProxy.prototype.getLabel = function () {&#xA;&#x9;var label = this._JQWidgetgetProperty(WebGuiConstants.LABEL_PROP );&#xA;&#x9;&#x9;if (typeo</values>
		<values>f(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;label = this._getLabel();&#xA;&#x9;&#x9;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top&#xA;JQueryUIDateInputProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.botttomLabel;&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype.handleEvent = function(element, eventName, event){&#xA;&#x9;&#xA;&#x9;if (eventName == &quot;onchange&quot;) {&#xA;&#x9;&#x9;eventName=&quot;oninput&quot;;&#xA;&#x9;&#x9;if (element.RMoTcontent == undefined) {&#xA;&#x9;&#x9;&#x9;element.RMoTcontent = &quot;&quot;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element,proxy.getParameters()</values>
		<values>);&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;element.RMoTcontent = element.value; // update value&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype._jqueryapplyDecoratedProps = JQueryUIDateInputProxy.prototype.applyDecoratedProps;&#xA;JQueryUIDateInputProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.element.value;//this.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryUIDateInputProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;onchange&quot;];&#xA;};&#xA;&#xA;///////////////////////////// JQueryProgressBarProxy Starts ////////////////////////////////&#xA;JQueryProgressBarProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return;&#xA;&#x9;JQueryUIElementProxy.apply(this,arguments);&#xA;};&#xA;&#xA;JQueryProgressBarProxy.prototype = new JQueryUIElement</values>
		<values>Proxy();&#xA;&#xA;&#xA;JQueryProgressBarProxy.prototype._JQElementapplyDecoratedProps = JQueryProgressBarProxy.prototype.applyDecoratedProps;&#xA;JQueryProgressBarProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQElementapplyDecoratedProps(targetElement);&#xA;&#x9;try {&#xA;&#x9;&#x9;targetElement.max = webGuiUtil.jQuery(this.element).progressbar(&quot;option&quot;,&quot;max&quot;).toString();&#xA;&#x9;&#x9;targetElement.progressvalue = webGuiUtil.jQuery(this.element).progressbar(&quot;option&quot;,&quot;value&quot;).toString();&#xA;&#x9;}&#xA;&#x9;catch(e) {&#xA;&#x9;&#x9;//console.log(&quot;JQueryProgressBarProxy.applyDecoratedProps&quot;, e);&#xA;&#x9;}&#xA;};&#xA;&#xA;&#xA;JQueryProgressBarProxy.prototype._JQElementgetProperty = JQueryProgressBarProxy.prototype.getProperty;&#xA;JQueryProgressBarProxy.prototype.getProperty = function(propName){&#xA;&#x9;&#xA;&#x9;try {&#xA;&#x9;&#x9;var propValue = &quot;&quot;;&#xA;&#x9;&#x9;switch (propName) {&#xA;&#x9;&#x9;&#x9;case &quot;progressvalue&quot;:&#xA;&#x9;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(this.element).progressbar(&quot;option&quot;,&quot;value&quot;).toString();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;case &quot;max&quot;:&#xA;&#x9;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(this.element).progressbar(&quot;option&quot;, propName).toString();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;</values>
		<values>default:&#xA;&#x9;&#x9;&#x9;&#x9;propValue = this._JQElementgetProperty(propName);&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;} catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryProgressBarProxy.getProperty caught exception&apos;);&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, e);&#xA;&#x9;}&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;///////////////////////////// JQueryProgressBarProxy Ends ////////////////////////////////&#xA;&#xA;///////////////////////////// JQueryUIDateInputProxy Ends ////////////////////////////////&#xA;&#xA;JQueryUIDateProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this,arguments);&#xA;};&#xA;&#xA;JQueryUIDateProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIDateProxy.prototype.isContainer =  function() {&#xA;  return false;&#xA;};&#xA;&#xA;JQueryUIDateProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;// Do not log any events for this widget&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;///////////////////////////////JQueryUITextInputProxy starts ///////////////////////////&#xA;&#xA;JQueryUITextInputProxy = function(domainObj,element){&#xA;&#x9;if (arguments.length == 0) retu</values>
		<values>rn; // don&apos;t do anything&#xA;&#x9;JQueryMobileTextInputProxy.apply(this,arguments);&#xA;&#x9;leftLabel = null ;&#xA;&#x9;topLabel = null ;&#xA;&#x9;bottomLabel =null;&#xA;};&#xA;JQueryUITextInputProxy.prototype = new JQueryMobileTextInputProxy();&#xA;&#xA;JQueryUITextInputProxy.prototype.getParameters = function () {&#xA;&#x9;var params = {};&#xA; &#x9;params.newtext = this.RMoTcontent;&#xA; &#x9;params.enableasyncaction = false;&#xA; &#x9;return params;&#xA;};&#xA;//JQueryUITextInputProxy.prototype._jquerygetProperty=JQueryUITextInputProxy.prototype.getProperty;&#xA;JQueryUITextInputProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue=webGuiUtil.jQuery(this.getNativeElement()).val();&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.LABEL_PROP:&#xA;&#x9;&#x9;var results = webGuiUtil.jQuery(this.element).parents(&quot;*[class~=ui-widget]&quot;);&#xA;&#x9;&#x9;if(results.length &gt; 0){&#xA;&#x9;&#x9;&#x9;var parent = results[0];//jQuery(results[0]).parent();&#xA;&#x9;&#x9;&#x9;var elem =webGuiUtil.jQuery(parent).find(&quot;label&quot;);//var elem = jsUtil.getElementByAttribute(&apos;for&apos;, new Array(this.element</values>
		<values>.id), parent);&#xA;&#x9;&#x9;&#x9;if (elem &amp;&amp; elem.length &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;propValue = elem[0].textContent;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(!propValue){&#xA;&#x9;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;&#x9;if(propValue)&#xA;&#x9;&#x9;&#x9;&#x9;propValue = propValue.trim();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._jquerygetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;JQueryUITextInputProxy.prototype._getLabel = JQueryUITextInputProxy.prototype.getLabel;&#xA;JQueryUITextInputProxy.prototype.getLabel = function () {&#xA;&#x9;var label = this._getLabel();&#xA;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top&#xA;JQueryUITextInputProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.botttomLabel;&#xA;};&#xA;&#xA;JQueryUITextInputProxy.prototype.getRepeatedAction = </values>
		<values>function () {&#xA;&#x9;return {&quot;onkeyup&quot;: &quot;oninput&quot;,&#xA;&#x9;&#x9;&#x9;&quot;onkeydown&quot;: &quot;oninput&quot;};&#xA;};&#xA;&#xA;JQueryUITextInputProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [RMOT_TRIGGER_EVENT,&quot;onkeyup&quot;, &quot;onkeydown&quot;];&#xA;};&#xA;&#xA;JQueryUITextInputProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;var proxy = domainManager.getProxy(element);&#xA;&#xA;&#x9;if (eventName == &quot;onkeydown&quot;) {&#xA;&#x9;&#x9;if (event.keyCode == 13) { // need to capture enter key&#xA;&#x9;&#x9;&#x9;eventName=&quot;onkeypress&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// else will be managed as a repeated action&#xA;&#x9;} else if (eventName == &quot;onkeyup&quot;) {&#xA;&#x9;&#x9;proxy.RMoTcontent = proxy.getProperty(WebGuiConstants.CONTENT_PROP);&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;var tagName = proxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;proxy.domainObj._recordEvent(event, eventName, tagName, element, proxy.getParameters());&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;///////////////////////////// JQueryUIaccordionHeaderProxy begin////////////////////////////////&#xA;&#xA;&#xA;JQueryUIaccordionHeaderProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(</values>
		<values>this, arguments);&#xA;};&#xA;&#xA;JQueryUIaccordionHeaderProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIaccordionHeaderProxy.prototype._installWrappers = JQueryUIaccordionHeaderProxy.prototype.installWrappers;&#xA;JQueryUIaccordionHeaderProxy.prototype.installWrappers = function () {&#xA;&#x9;var accordion = webGuiUtil.jQuery(this.element).closest(&apos;.ui-accordion&apos;);&#xA;&#x9;if (!accordion[&quot;$alreadyInstalled&quot;]) {&#xA;&#x9;&#x9;accordion[&quot;$alreadyInstalled&quot;] = true;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;accordion.on(&apos;accordionactivate&apos;, function( event, ui ) {&#xA;&#x9;&#x9;&#x9;// Take a snapshot when the animation is complete&#xA;&#x9;&#x9;&#x9;rmotRecorder.cacheScreenshot();&#xA;&#x9;&#x9;});&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;return this._installWrappers();&#xA;};&#xA;&#xA;JQueryUIaccordionHeaderProxy.prototype._JQWidgetgetProperty = JQueryUIaccordionHeaderProxy.prototype.getProperty;&#xA;JQueryUIaccordionHeaderProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.COLLAPSED_PROP:&#xA;&#x9;&#x9;var collapsed = this.element.getAttribute(&apos;aria-expanded&apos;);&#xA;&#x9;&#x9;propValue = (collapsed==&apos;true&apos;) ? false : true;&#xA;&#x9;&#x9;break;&#xA;</values>
		<values>&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryUIaccordionHeaderProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUIaccordionHeaderProxy.prototype.applyDecoratedProps;&#xA;JQueryUIaccordionHeaderProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.collapsed = this.getProperty(WebGuiConstants.COLLAPSED_PROP);&#xA;};&#xA;&#xA;JQueryUIaccordionHeaderProxy.prototype._JQWidgetexecuteAction = JQueryUIaccordionHeaderProxy.prototype.executeAction;&#xA;JQueryUIaccordionHeaderProxy.prototype.executeAction = function(action) {&#xA;&#x9;&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onexpand&quot; :&#xA;&#x9;&#x9;var expanded = this.element.getAttribute(&quot;aria-expanded&quot;);&#xA;&#x9;&#x9;if(expanded==&quot;false&quot;){&#xA;&#x9;&#x9;&#x9;action.type=&quot;onclick&quot;;&#xA;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;oncollapse&quot; :&#xA;&#x9;&#x9;var collapse = this.element.getAttribute(&quot;aria-expanded&quot;);&#xA;&#x9;&#x9;if(collapse==&quot;true&quot;){&#xA;</values>
		<values>&#x9;&#x9;&#x9;action.type=&quot;onclick&quot;;&#xA;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;}&#xA;&#x9;break;&#x9;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;///////////////////////////// JQueryUIaccordionHeaderProxy begin////////////////////////////////&#xA;&#xA;///////////////////////////// JQueryUISliderProxy begin////////////////////////////////&#xA;&#xA;&#xA;JQueryUISliderProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;*&quot;));&#xA;};&#xA;&#xA;JQueryUISliderProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUISliderProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;slidestart&quot;,&quot;slidestop&quot;];//&quot;slidechange&quot;,&#xA;};&#xA;&#xA;JQueryUISliderProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;//&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(&quot;JQu</values>
		<values>eryUISliderProxy installWrappers: &quot;+events[i]);&#xA;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(this.element).on( events[i], this.handleEvent );&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;JQueryUISliderProxy.prototype._JQWidgetgetProperty=JQueryUISliderProxy.prototype.getProperty;&#xA;JQueryUISliderProxy.prototype.getProperty=function(propName){&#xA;&#x9;var propValue = null;&#xA;&#x9;switch (propName) {&#xA;&#x9;case &quot;max&quot;:&#xA;&#x9;case &quot;min&quot;:&#xA;&#x9;case &quot;step&quot;:&#xA;&#x9;&#x9;propValue = webGuiUtil.jQuery(this.element).slider(&quot;option&quot;,propName)+&quot;&quot;;&#xA;&#x9;&#x9;break;&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;case &quot;value&quot;:&#xA;&#x9;&#x9;var tagName = this.getProxyName();&#xA;&#x9;&#x9;if(tagName == JQM_RANGESLIDER ){&#xA;&#x9;&#x9;&#x9;// Add Range Slider specific properties&#xA;&#x9;&#x9;&#x9;var values = webGuiUtil.jQuery(this.element).slider(&quot;option&quot;,&quot;values&quot;);&#xA;&#x9;&#x9;&#x9;propValue = values[0]+&quot; - &quot;+values[1];&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(this.element).slider(&quot;option&quot;,&quot;value&quot;)+&quot;&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName</values>
		<values>);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return propValue;&#xA;}; &#xA;&#xA;JQueryUISliderProxy.prototype.getProxyName = function() {&#xA;&#x9;if(this.sliderTagName)&#xA;&#x9;&#x9;return this.sliderTagName;&#xA;&#x9;this.sliderTagName = JQM_SLIDER;&#xA;&#x9;var isRangeSlider = webGuiUtil.jQuery(this.element).slider( &quot;option&quot;, &quot;range&quot; );&#xA;&#x9;var type = typeof(isRangeSlider);&#xA;&#x9;if(type == &quot;boolean&quot;){&#xA;&#x9;&#x9;if(isRangeSlider){&#xA;&#x9;&#x9;&#x9;// Must be Range Slider&#xA;&#x9;&#x9;&#x9;this.sliderTagName = JQM_RANGESLIDER;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// No special treatment required for Multiple Slider Type.It is a range slider type but visually&#xA;&#x9;// it is just a simple Slider so record it as Normal Slider only&#xA;/*&#x9;else if(type == &quot;string&quot;){&#xA;&#x9;&#x9;// Must be multiple Slider type min or max&#xA;&#x9;&#x9;this.sliderTagName = JQM_RANGESLIDER;&#xA;&#x9;&#x9;if(isRangeSlider == &quot;min&quot;){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}else if(isRangeSlider == &quot;max&quot;){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}*/&#xA;&#x9;return this.sliderTagName;&#xA;};&#xA;&#xA;JQueryUISliderProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUISliderProxy.prototype.applyDecoratedProps;&#xA;JQueryUISliderProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapply</values>
		<values>DecoratedProps(targetElement);&#xA;&#x9;targetElement.max=this.getProperty(&quot;max&quot;);&#xA;&#x9;targetElement.value=this.getProperty(&quot;value&quot;);&#xA;&#x9;targetElement.min=this.getProperty(&quot;min&quot;);&#xA;&#x9;targetElement.step=this.getProperty(&quot;step&quot;);&#xA;&#x9;if(this.sliderTagName == JQM_RANGESLIDER ){&#xA;&#x9;&#x9;// Add Range Slider specific properties&#xA;&#x9;}&#xA;};&#xA;&#xA;&#xA;JQueryUISliderProxy.prototype.handleEvent = function( event, ui ){&#xA;&#x9;// event.originalEvent comes null when slider is changed programmatically &#xA;&#x9;if(event.originalEvent == null || event.recorded == true) return;&#xA;&#x9;rmotRecorder.log(&quot;RMoTJSI: JQueryUISliderProxy: Event=&quot;+event.type+&quot; Element =&quot;+event.target);&#xA;&#xA;&#x9;switch(event.type){&#xA;&#x9;case &quot;slidestart&quot;:&#xA;&#x9;&#x9;// Send request for snapshot here and store hierarchy in proxy&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(event.target);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(!jqueryproxy.started){&#xA;&#x9;&#x9;&#x9;jqueryproxy.started = 0;&#xA;    &#x9;}&#xA;    &#x9;if(jqueryproxy.started == 0){&#xA;    &#x9;&#x9;//console.log(&quot;Take screenshot and build hierarchy&quot;+ui.value);&#xA;    &#x9;&#x9;//jqueryproxy.RMoTContent = ui.value;&#xA;    &#x9;&#x9;jqueryproxy.screenshotid </values>
		<values>= jqueryproxy.domainObj._captureScreenshot();&#xA;    &#x9;&#x9;jqueryproxy.hierarchy = jqueryproxy.domainObj._updateHierarchy();&#xA;    &#x9;&#x9;jqueryproxy.started = 1;&#xA;    &#x9;&#x9;event.target.UID = jqueryproxy.getUID();&#xA;    &#x9;}&#xA;&#x9;&#x9;// Take snapshot here and set RMoTContent property here&#xA;&#x9;&#x9;//event.target.RMoTContent = ui.value ;//$(event.target).slider(&quot;option&quot;,&quot;value&quot;);&#xA;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;slidestop&quot;:&#xA;&#x9;&#xA;&#x9;&#x9;// record statement here&#xA;&#x9;&#x9;var parameters = {};&#xA;&#x9;&#x9;var eventName = &quot;onchange&quot;;&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(event.target);&#xA;&#x9;&#x9;if(jqueryproxy.sliderTagName==JQM_RANGESLIDER){&#xA;&#x9;&#x9;&#x9;var ranges = webGuiUtil.jQuery(event.target).slider(&quot;option&quot;,&quot;values&quot;);&#xA;&#x9;&#x9;&#x9;if(ranges.length == 2){&#xA;&#x9;&#x9;&#x9;&#x9;parameters.rangeMin = ranges[0];&#xA;&#x9;&#x9;&#x9;&#x9;parameters.rangeMax = ranges[1];&#xA;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;rmotRecorder.log(&quot;RMoTJSI: JQueryUISliderProxy:Error in recording action on RangeSlider&quot;+event.target);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;parameters.newtext = ui.value + &quot;&quot;;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;var tagName = jqueryproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;jqueryproxy.UID = event.target.UID</values>
		<values>;&#xA;&#x9;&#x9;// use hierarchy saved in proxy here&#xA;&#x9;&#x9;jqueryproxy.domainObj._recordEventWithExistingScreenshot(eventName, tagName, this,jqueryproxy.hierarchy,parameters,jqueryproxy.screenshotid);&#xA;&#x9;&#x9;jqueryproxy.hierarchy = null;&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;jqueryproxy.screenshotid = null;&#xA;&#x9;&#x9;jqueryproxy.started = 0;&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUISliderProxy.prototype._JQWidgetexecuteAction = JQueryUISliderProxy.prototype.executeAction;&#xA;JQueryUISliderProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUISliderProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;// Normal Slider&#xA;&#x9;&#x9;var ranges = webGuiUtil.jQuery(this.element).slider(&quot;option&quot;,&quot;values&quot;);&#xA;&#x9;&#x9;if(ranges !=null &amp;&amp; ranges.length == 2){&#xA;&#x9;&#x9;&#x9;// RangeSlider&#xA;&#x9;&#x9;&#x9;var valMin = null;&#xA;&#x9;&#x9;&#x9;var valMax = null;&#xA;&#x9;&#x9;&#x9;if (action.parameters[0].name == &quot;rangeMin&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;valMin = action.parameters[0].value;&#xA;&#x9;&#x9;&#x9;&#x9;valMax = action.parameters[1].value;&#xA;&#x9;&#x9;&#x9;}</values>
		<values> else {&#xA;&#x9;&#x9;&#x9;&#x9;valMin = action.parameters[1].value;&#xA;&#x9;&#x9;&#x9;&#x9;valMax = action.parameters[0].value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;webGuiUtil.jQuery(this.element).slider( &quot;values&quot;, [ valMin, valMax ] );&#xA;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;// Normal Slider&#xA;&#x9;&#x9;&#x9;webGuiUtil.jQuery(this.element).slider( &quot;value&quot;, action.parameters[0].value );&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;&#xA;JQueryUISliderProxy.prototype.isContainer =  function() {&#xA;&#x9;return false;&#xA;};&#xA;&#xA;///////////////////////////////JQueryUISliderProxy ends ///////////////////////////&#xA;&#xA;///////////////////////////// JQueryUISpinnerProxy begin////////////////////////////////&#xA;&#xA;&#xA;JQueryUISpinnerProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;&#x9;leftLabel = null ;&#xA;&#x9;topLabel = null ;&#xA;&#x9;bottomLabel =null;&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUISpinnerProxy.prototype.getRepeatedAction = function () {&#xA;&#x9;return {&quot;spinstart&quot;: &quot;oni</values>
		<values>nput&quot;};&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;spinstart&quot;,&quot;timespinnerstart&quot;];&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(this.element).on( events[i], this.handleEvent );&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype._JQWidgetgetProperty=JQueryUISpinnerProxy.prototype.getProperty;&#xA;JQueryUISpinnerProxy.prototype.getProperty=function(propName){&#xA;&#x9;var propValue = null;&#xA;&#x9;try{&#xA;&#x9;&#x9;switch (propName) {&#xA;&#x9;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;&#x9;propValue = nativeElement.value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.LABEL_PROP :&#xA;&#x9;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;</values>
		<values>&#x9;if(propValue)&#xA;&#x9;&#x9;&#x9;&#x9;propValue = propValue.trim();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;value&quot;:&#xA;&#x9;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(nativeElement).spinner(&quot;value&quot;)+&quot;&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;max&quot;:&#xA;&#x9;&#x9;case &quot;min&quot;:&#xA;&#x9;&#x9;case &quot;culture&quot;:&#xA;&#x9;&#x9;case &quot;numberFormat&quot;:&#xA;&#x9;&#x9;case &quot;step&quot;:&#xA;&#x9;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(nativeElement).spinner(&quot;option&quot;,propName)+&quot;&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;disabled&quot;:&#xA;&#x9;&#x9;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;&#x9;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;&#x9;&#x9;propValue = webGuiUtil.jQuery(nativeElement).spinner(&quot;option&quot;,propName);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;page&quot;:&#xA;&#x9;&#x9;&#x9;propValue = 10;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}catch(getPropErr){&#xA;&#x9;&#x9;if (typeof(rmotRecorder) != &apos;undefined&apos;) {&#xA;&#x9;&#x9;&#x9;rmotRecorder.log(&quot;JQueryUISpinnerProxy.getProperty: Error fetching value for property: &quot;+propName+&quot; -- &quot;+getPropErr);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (typ</values>
		<values>eof(LoggerService) != &apos;undefined&apos;) {&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &quot;JQueryUISpinnerProxy.getProperty: Error fetching value for property: &quot;+propName+&quot; -- &quot;+getPropErr);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;return propValue;&#xA;};&#xA;JQueryUISpinnerProxy.prototype._getLabel = JQueryUISpinnerProxy.prototype.getLabel;&#xA;JQueryUISpinnerProxy.prototype.getLabel = function () {&#xA;&#x9;var label = this.getLabelProperty();&#xA;&#x9;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;label = this._getLabel();&#xA;&#x9;&#x9;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top&#xA;JQueryUISpinnerProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel || this.bottomLabel ;&#xA;};&#xA;JQueryUISpinnerProxy.prototy</values>
		<values>pe.getLabelProperty=function(){&#xA;&#x9;var label = &quot;&quot;;&#xA;&#x9;var nativeElement = this.getNativeInputElement();&#xA;&#x9;if(nativeElement != null){&#xA;&#x9;&#x9;var name = nativeElement.name;&#xA;&#x9;&#x9;if(name != null){&#xA;&#x9;&#x9;&#x9;var results = webGuiUtil.jQuery(&quot;label[for=&quot;+name+&quot;]&quot;);&#xA;&#x9;&#x9;&#x9;if(results &amp;&amp; results.length &gt; 0){&#xA;&#x9;&#x9;&#x9;&#x9;label = results[0].textContent;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return label;&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype.getNativeInputElement=function(){&#xA;&#x9;var nativeElement =null;&#xA;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;var jqWidget = webGuiUtil.jQuery(this.element);&#xA;&#x9;&#x9;var spinnerinputs = jqWidget.find(&quot;input.ui-spinner-input&quot;);&#xA;&#x9;&#x9;if (spinnerinputs.length &gt; 0) {&#xA;&#x9;&#x9;&#x9;nativeElement = spinnerinputs[0];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;if(nativeElement == null){&#xA;&#x9;&#x9;//console.log(&quot;RTW_WEBGUI_ERR:Unable to find native input element for &quot;, this.element);&#xA;&#x9;}&#xA;&#x9;return nativeElement;&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUISpinnerProxy.prototype.applyDecoratedProps;&#xA;JQueryUISpinnerProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapplyDecoratedProps(ta</values>
		<values>rgetElement);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP); &#xA;&#x9;targetElement.max=this.getProperty(&quot;max&quot;);&#xA;&#x9;targetElement.value=this.getProperty(&quot;value&quot;);&#xA;&#x9;targetElement.min=this.getProperty(&quot;min&quot;);&#xA;&#x9;targetElement.step=this.getProperty(&quot;step&quot;);&#xA;&#x9;targetElement.culture=this.getProperty(&quot;culture&quot;);&#xA;&#x9;targetElement.numberFormat=this.getProperty(&quot;numberFormat&quot;);&#xA;&#x9;targetElement.disabled=this.getProperty(&quot;disabled&quot;);&#xA;&#x9;targetElement.page=this.getProperty(&quot;page&quot;);&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype.getParameters = function () {&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.newtext = this.getProperty(&quot;value&quot;);&#xA;&#x9;return parameters;&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype.handleEvent = function( event, ui ){&#xA;&#x9;// ui is empty&#xA;&#x9;// event.originalEvent comes null when spinner is changed programmatically &#xA;&#x9;if(event.originalEvent == null || event.recorded == true) return;&#xA;&#x9;rmotRecorder.log(&quot;RMoTJSI: JQueryUISpinnerProxy: Event=&quot;+event.type+&quot; Element =&quot;+event.target+&quot; Event= &quot;+ui.value);&#xA;&#xA;&#x9;switch(event.type) {&#xA;&#x9;&#x9;case &quot;timespin</values>
		<values>nerstart&quot;: &#xA;&#x9;&#x9;case &quot;spinstart&quot;:&#x9;&#xA;&#x9;&#x9;&#x9;var parameters = {};&#xA;&#x9;&#x9;&#x9;var eventName = &quot;spinstart&quot;;&#xA;&#x9;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(this);&#xA;&#x9;&#x9;&#x9;var tagName = jqueryproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;&#x9;jqueryproxy.domainObj._recordEvent(event, eventName, tagName, this, parameters);&#xA;&#x9;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUISpinnerProxy.prototype._JQWidgetexecuteAction = JQueryUISpinnerProxy.prototype.executeAction;&#xA;JQueryUISpinnerProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUISpinnerProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var htmlinputObject = this.getNativeInputElement();&#xA;&#x9;this.setTarget(htmlinputObject);&#xA;&#x9;//jQuery(this.element).spinner( &quot;value&quot;, action.parameters[0].value );&#x9;&#xA;&#x9;return this._JQWidgetexecuteAction(action);&#xA;};&#xA;&#xA;///////////////////////////// JQueryUIDialogProxy begin////////////////////////////////&#xA;&#xA;&#xA;JQueryUIDialogProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply</values>
		<values>(this, arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;.ui-dialog-titlebar-close&quot;));&#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIDialogProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;dialogbeforeclose&quot;,&quot;dialogclose&quot;];&#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype.installWrappers = function(){&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(this.element).on( events[i], this.handleJQEvent );&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return true; // Continue with ELEMENT_NODE children&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return false; // Don&apos;t visit knon ELEMENT_NODE childrenreturn true;&#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype.handleJQEvent = function( event, ui ){&#xA;&#x9;// The ui object is empty but included for consistency with other events.&#xA;&#x9;// event.originalEvent comes null when dialog is closed programmatically &#xA;&#x9;if(event.originalEvent == null || event.recorded == true) return;&#xA;&#x9;</values>
		<values>rmotRecorder.log(&quot;RMoTJSI: JQueryUIDialogProxy: Event=&quot;+event.type+&quot; Element =&quot;+event.target);&#xA;&#xA;&#xA;&#x9;switch(event.type){&#xA;&#x9;case &quot;dialogbeforeclose&quot;:&#xA;&#x9;&#x9;// Take snapshot and hierarchy here&#xA;&#x9;&#x9;var parameters = {};&#xA;&#x9;&#x9;var eventName = &quot;onclose&quot;;&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(this);&#xA;&#x9;&#x9;var tagName = jqueryproxy.getProperty(WebGuiConstants.TAGNAME_PROP);&#xA;&#x9;&#x9;jqueryproxy.domainObj._recordEvent(event, eventName, tagName, this, parameters);&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;dialogclose&quot;:&#xA;&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype._JQWidgetapplyDecoratedProps = JQueryUIDialogProxy.prototype.applyDecoratedProps;&#xA;JQueryUIDialogProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._JQWidgetapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.title = this.getProperty(&quot;title&quot;); &#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype._JQWidgetgetProperty=JQueryUIDialogProxy.prototype.getProperty;&#xA;JQueryUIDialogProxy.prototype.getProperty=function(propName){&#xA;&#x9;var propValue = null;&#xA;&#x9;try{&#xA;&#x9;&#x9;switch (propName) {&#xA;&#x9;&#x9;case &quot;title</values>
		<values>&quot;:&#xA;&#x9;&#x9;&#x9;propValue = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;var results = webGuiUtil.jQuery(this.element).find(&quot;*[class~=ui-dialog-title]&quot;);//.find(&quot;span.ui-dialog-title&quot;);&#xA;&#x9;&#x9;&#x9;if (results &amp;&amp; results.length &gt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;propValue = results[0].textContent;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;&#x9;propValue=&quot;&quot;;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}catch(getPropErr){&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUIDialogProxy getPropertyError:&apos;+propName);&#xA;&#x9;}&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryUIDialogProxy.prototype._JQWidgetexecuteAction = JQueryUIDialogProxy.prototype.executeAction;&#xA;JQueryUIDialogProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUIDialogProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onclose&quot; :&#xA;&#x9;&#x9;webGuiUtil.jQuery(this.element).find(&apos;.ui-dialog-content&apos;).dialog(&apos;close&apos;);&#xA;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._JQWi</values>
		<values>dgetexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;///////////////////////////// JQueryUIDialogProxy end////////////////////////////////&#xA;&#xA;/////////////////////////// JQueryUIMenuItemProxy begin////////////////////////////////&#xA;&#xA;JQueryUIMenuItemProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).children(&quot;:first&quot;));&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIMenuItemProxy.prototype._JQWidgetgetProperty = JQueryUIMenuItemProxy.prototype.getProperty;&#xA;JQueryUIMenuItemProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;propValue = jQueryMenuItemGetText(this.element);&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.isVisible = function() {&#xA;&#x9;// override default behaviour because the m</values>
		<values>enu item is always reachable&#xA;&#x9;return { visibility: true, propagation: false, reachable: true };&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.executeAction = function(action) {&#xA;&#x9;var retStatus = RMOT_FAILURE;&#xA;&#x9;var actionType = action.type;&#xA;&#xA;&#x9;switch (actionType) {&#xA;&#x9;&#x9;case &quot;onclick&quot; :&#xA;&#x9;&#x9;&#x9;// 1. find parent &apos;ui-menu&apos; of given &apos;ui-menu-item&apos;&#xA;&#x9;&#x9;&#x9;// 2. invoke &quot;focus&quot; on &apos;ui-menu-item&apos; for result of 1&#xA;&#x9;&#x9;&#x9;// 3. invoke &quot;expand&quot; on result of 2&#xA;&#x9;&#x9;&#x9;// 4. invoke &quot;select&quot; on result of 3 (after looping)&#xA;&#x9;&#x9;&#x9;// $($(&quot;.ui-menu-item#id).parent(&apos;.ui-menu&apos;)[0]).menu(&quot;focus&quot;, null $(&quot;.ui-menu-item#id)).menu(&quot;expand&quot;)&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;var dollar = webGuiUtil.jQuery;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;var elem = dollar(this.element);&#xA;&#x9;&#x9;        var ancestors = dollar(elem).parents(&apos;.ui-menu-item&apos;);&#xA;&#x9;&#xA;&#x9;&#x9;        var submenu_depth = (ancestors &amp;&amp; ancestors.length) || 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// the menu item is located in sub-menu, expand all of them&#xA;&#x9;&#x9;        if (submenu_depth &gt; 0) {&#xA;&#x9;&#x9;            var menuObject = dollar(ancestors[submenu_depth-1]).parents(&apos;.ui-menu&apos;)[0];&#xA;&#x9;&#x9;            var curr_</values>
		<values>item = dollar(menuObject).menu(&quot;focus&quot;, null, dollar(ancestors[submenu_depth-1])).menu(&quot;expand&quot;);&#xA;&#x9;&#x9;                                                &#xA;&#x9;&#x9;            for (var i = submenu_depth - 2 ; i &gt;= 0 ; i--) {&#xA;&#x9;&#x9;                curr_item = curr_item.menu(&quot;focus&quot;, null, dollar(ancestors[i])).menu(&quot;expand&quot;);&#xA;&#x9;&#x9;            }&#xA;&#xA;&#x9;&#x9;            // finished expanding all the sub-menus, first focus the menu-item and execute the &apos;select&apos; event&#xA;&#x9;&#x9;            var _proxyObj = this;&#xA;&#xA;&#x9;&#x9;            setTimeout(function() {&#xA;&#x9;&#x9;            &#x9; _proxyObj.drawRectangle(&quot;solid red&quot;);&#xA;&#x9;&#x9;            &#x9;dollar(menuObject).menu(&quot;focus&quot;, null, dollar(menuObject).menu().find(elem));&#xA;&#x9;&#x9;            &#x9;}, 200);&#xA;&#x9;&#x9;            setTimeout(function(){&#xA;&#x9;&#x9;            &#x9;_proxyObj.removeRectangle();&#xA;&#x9;&#x9;            &#x9;// if the click is not on a menu-item&#xA;&#x9;&#x9;            &#x9;// but on a sub-menu, it should be expanded explicitly as &#xA;&#x9;&#x9;            &#x9;// the &apos;select&apos; action doesn&apos;t expand the sub-menu&#xA;&#x9;&#x9;            &#x9;dollar(menuObject).menu(&quot;focus&quot;, null, dollar(menu</values>
		<values>Object).menu().find(elem)).menu(&quot;select&quot;).menu(&quot;expand&quot;);&#xA;&#x9;&#x9;            &#x9;}, 700);&#xA;&#x9;&#x9;        } &#xA;&#x9;&#x9;        else { // menu item directly visible&#xA;&#x9;&#x9;        &#x9;// find the parent &apos;menu&apos; to focus the &apos;menu item&apos;&#xA;&#x9;&#x9;        &#x9;var _parent = dollar(elem).parents(&apos;.ui-menu&apos;)[0];&#xA;&#x9;&#x9;        &#x9;// now execute &apos;focus&apos; on the menu item through parent &apos;menu&apos;&#xA;&#x9;&#x9;        &#x9;dollar(_parent).menu(&quot;focus&quot;, null, dollar(_parent).menu().find(elem));&#xA;&#x9;&#x9;        &#x9;// and then deliver the click&#xA;&#x9;&#x9;        &#x9;// this can be done directly&#xA;&#x9;&#x9;        &#x9;dollar(elem).click();&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;        retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch(e) {&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTError, &apos;JQueryUIMenuItem: Unknown exception: &apos; + e);&#xA;&#x9;&#x9;&#x9;}&#x9;       &#x9;   &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;break;&#x9;&#x9;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.drawRectangle = function(_color) {&#xA;&#x9;var rect = this.element.getBoundingClientRect();&#xA;&#x9;var _doc = this.element.ownerDocument;&#xA;&#x9;var _top = rect.top;&#xA;&#x9;var _left = rect.left;&#xA;&#x9;var</values>
		<values> _right = rect.right;&#xA;&#x9;var _bottom = rect.bottom;&#xA;&#x9;var _width = rect.width;&#xA;&#x9;var _height = rect.height;&#xA;&#x9;this.RMoTRect = _doc.createElement(&apos;div&apos;);&#xA;&#x9;var rectStyle = &apos;border:&apos;+2+&apos;px &apos;+ _color+&apos;;position:absolute;background:none;top:&apos;+_top+&apos;px;left:&apos;+_left+&apos;px;width:&apos;+_width+&apos;px;height:&apos;+_height+&apos;px;z-index:1000000;pointer-events: none;&apos;;&#xA;&#x9;&#xA;&#x9;this.RMoTRect.setAttribute( &quot;style&quot;, rectStyle );&#xA;&#x9;_doc.body.appendChild(this.RMoTRect);&#xA;&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.removeRectangle = function() {&#xA;&#x9;if (this.RMoTRect &amp;&amp; this.RMoTRect.ownerDocument.body) {&#xA;&#x9;&#x9;this.RMoTRect.ownerDocument.body.removeChild(this.RMoTRect);&#xA;&#x9;&#x9;this.RMoTRect = null;&#xA;&#x9;}&#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.installWrappers = function() {&#x9;&#xA;&#x9;// &lt;a&gt; element contained in ui-menu-item should not handle&#xA;&#x9;// clicks in this context&#xA;//&#x9;this.setWidgetChild(jQuery(this.element).children(&quot;:first&quot;));&#xA;&#x9;return false; &#xA;};&#xA;&#xA;JQueryUIMenuItemProxy.prototype.getEventsToRegister = function() {&#x9;&#xA;&#x9;return [];&#xA;};&#xA;&#xA;/////////////////////////// JQueryUIMenuItemProxy end</values>
		<values>////////////////////////////////&#xA;&#xA;jQueryMenuItemGetText = function (elem) {&#xA;&#x9;var retVal = jQueryExtractTextForMenuItem(elem);&#xA;    var labels = [];&#xA;&#xA;    // get current menu item&#xA;    labels.push(retVal);&#xA;    var ancestors = webGuiUtil.jQuery(elem).parents(&apos;.ui-menu-item&apos;);&#xA;    &#xA;    // get its ancestors, begin with imm. parent and goes up&#xA;    // all the way till topmost menu item&#xA;    for (var i = 0; i &lt; ancestors.length; i++) {&#xA;        labels.push(jQueryExtractTextForMenuItem(ancestors[i]));&#xA;    }&#xA;    &#xA;    // the labels are in reverse order as we fetched them bottom up&#xA;    // for display it should be in top down order&#xA;    if (labels.length &gt; 1) {&#xA;        labels.reverse();&#xA;        retVal = labels.join(&quot;-&gt;&quot;);&#xA;    }&#xA;    return retVal;&#xA;  };&#xA;&#xA;  jQueryExtractTextForMenuItem = function (elem) {&#xA;&#x9;// assume the menu item node has &lt;a&gt; which&#xA;&#x9;// contains the text for prior to v1.10 and &#xA;&#x9;// later with text node incase of submenus or text of menu item&#xA;&#x9;  if(webGuiUtil.jQuery(elem).children().length &gt; 0) {&#xA;&#x9;&#x9;  var childAncho</values>
		<values>rs = webGuiUtil.jQuery(elem).find(&quot;a,div&quot;);&#xA;&#x9;&#x9;if(childAnchors.length &gt; 0) {&#xA;&#x9;&#x9;&#x9;return childAnchors.first().text();&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;return webGuiUtil.jQuery(elem).contents().filter(function() {&#xA;&#x9;&#x9;&#x9;&#x9;    return this.nodeType === 3; //Node.TEXT_NODE&#xA;&#x9;&#x9;&#x9;&#x9;  }).first().text().trim();&#xA;&#x9;&#x9;}&#xA;&#x9;  }&#xA;&#x9;  return webGuiUtil.jQuery(elem).text();&#xA;  };&#xA;&#x9;&#xA;/////////////////////////// JQueryUIMenuProxy begin////////////////////////////////&#xA;&#xA;JQueryUIMenuProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == 0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;};&#xA;&#xA;JQueryUIMenuProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUIMenuProxy.prototype.getEventsToRegister = function(){&#xA;&#x9;return [&quot;menuselect&quot;, &quot;mouseenter&quot;];&#xA;};&#xA;&#xA;JQueryUIMenuProxy.prototype.installWrappers = function() {&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;var handler = this.handleJQMenuEvent;&#xA;&#x9;&#x9;var elem = this.element;&#xA;&#x9;&#x9;if(events != null){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;</values>
		<values>&#x9;webGuiUtil.jQuery(this.element).on( events[i], function(event, ui) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handler(event, ui, elem);&#xA;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false; // Don&apos;t continue with children&#xA;&#x9;}&#x9;&#xA;&#x9;return false; &#xA;};&#xA;&#xA;JQueryUIMenuProxy.prototype._handleJQMenuEvent = JQueryUIMenuProxy.prototype.handleEvent;&#xA;JQueryUIMenuProxy.prototype.handleJQMenuEvent = function( event, ui, element ) {&#xA;&#x9;if(event.originalEvent == null || event.recorded == true) return;&#xA;&#x9;var menuRole = webGuiUtil.jQuery(element).attr(&quot;role&quot;);&#xA;&#x9;if(menuRole &amp;&amp; menuRole ==&quot;listbox&quot;) return;&#xA;&#x9;&#xA;&#x9;if (event.type === &apos;mouseenter&apos;) {&#xA;&#x9;&#x9;webGuiRecorderInterfaceObj.cachedScreenshotId = webGuiRecorderInterfaceObj.captureScreenshot();&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;element.clickedElement = ui.item;&#xA;&#x9;var parameters = {};&#xA;&#x9;parameters.enableasyncaction = false;&#xA;&#x9;var eventName = &quot;onclick&quot;;&#xA;&#x9;var jqueryproxy = domainManager.getProxy(element);&#xA;&#x9;var tagName = &quot;jquimenuitem&quot;;&#xA;&#x9;// tagName is not used for identifying the click, hence the changing the &apos;element &apos;&#xA;&#x9;// to reflect the actual element (menu item) that</values>
		<values> was clicked&#xA;&#x9;jqueryproxy.domainObj._recordEvent(event, eventName, tagName, ui.item[0], parameters);&#xA;&#x9;event.recorded = true;&#xA;};&#xA;&#xA;JQueryUIMenuProxy.prototype._JQWidgetgetProperty = JQueryUIMenuProxy.prototype.getProperty;&#xA;JQueryUIMenuProxy.prototype.getProperty = function(propName) {&#xA;&#x9;var propValue = null;&#xA;&#xA;&#x9;switch (propName) {&#xA;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;var item = this.element.clickedElement;&#xA;&#x9;&#x9;//this.element.clickedElement = null; //reset&#xA;&#x9;&#x9;propValue = (item != null) ? jQueryMenuItemGetText(item) : &quot;&quot;;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#xA;&#x9;return propValue;&#xA;};&#xA;&#xA;JQueryUIMenuProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = { visibility: true, propagation: false, reachable: true };&#xA;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;/////////////////////////// JQueryUIMenuProxy end////////////////////////////////&#xA;&#xA;/////////////////////////// JQueryUISelectmenuProxy begin////////////////////////////////&#xA;&#xA;JQueryUISelectmenuProxy = function(domainObj, element) {&#xA;&#x9;if (arguments.length == </values>
		<values>0)&#xA;&#x9;&#x9;return;&#xA;&#x9;JQueryUIWidgetProxy.apply(this, arguments);&#xA;&#x9;leftLabel = null ;&#xA;&#x9;topLabel = null ;&#xA;&#x9;&#xA;&#x9;this.setWidgetChild(webGuiUtil.jQuery(this.element).find(&quot;span&quot;));&#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype = new JQueryUIWidgetProxy();&#xA;&#xA;JQueryUISelectmenuProxy.prototype.getEventsToRegister = function(){&#x9;&#xA;&#x9;return [&quot;selectmenuopen&quot;, &quot;selectmenuchange&quot;];&#xA;};&#xA;&#xA;&#xA;JQueryUISelectmenuProxy.prototype.installWrappers = function() {&#xA;&#x9;if (this.element &amp;&amp; this.element.nodeType == window.Node.ELEMENT_NODE) {&#xA;&#x9;&#x9;var events = this.getEventsToRegister();&#xA;&#x9;&#x9;var handler = this.handleJQSelectmenuEvent;&#xA;&#x9;&#x9;var elem = this.element;&#xA;&#x9;&#x9;var selelem = this.getNativeSelectElement();&#xA;&#x9;&#x9;if(selelem &amp;&amp; (events != null) ){&#xA;&#x9;&#x9;&#x9;for(var i=0;i&lt;events.length;i++){&#xA;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(selelem).on( events[i], function(event, ui) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handler(event, ui, elem);&#xA;&#x9;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return false; // Don&apos;t continue with children&#xA;&#x9;}&#x9;&#xA;&#x9;return false; &#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype.handleJQSelectmenuEvent = function( event, ui, element ) {&#xA;&#x9;if(event.o</values>
		<values>riginalEvent == null || event.recorded == true) return;&#xA;&#x9;switch(event.type) {&#xA;&#x9;case &quot;selectmenuopen&quot;:&#xA;&#x9;&#x9;// Send request for snapshot here and store hierarchy in proxy&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(element);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(!jqueryproxy.started){&#xA;&#x9;&#x9;&#x9;jqueryproxy.started = 0;&#xA;    &#x9;}&#xA;    &#x9;if(jqueryproxy.started == 0){&#xA;    &#x9;&#x9;jqueryproxy.screenshotid = webGuiRecorderInterfaceObj.cachedScreenshotId;&#xA;    &#x9;&#x9;jqueryproxy.hierarchy = jqueryproxy.domainObj._updateHierarchy();&#xA;    &#x9;&#x9;jqueryproxy.started = 1;&#xA;    &#x9;}&#xA;    &#x9;element.UID = jqueryproxy.getUID();&#xA;&#x9;&#x9;break;&#xA;&#x9;case &quot;selectmenuchange&quot;:&#xA;&#x9;&#x9;var parameters = {};&#xA;&#x9;&#x9;parameters.newtext = ui.item.label;&#xA;&#x9;&#x9;var eventName = &quot;onchange&quot;;&#xA;&#x9;&#x9;var jqueryproxy = domainManager.getProxy(element);&#xA;&#x9;&#x9;var tagName = &quot;jqmselect&quot;;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;jqueryproxy.UID = element.UID;&#xA;&#x9;&#x9;jqueryproxy.domainObj._recordEventWithExistingScreenshot(eventName, tagName, element, jqueryproxy.hierarchy, parameters, jqueryproxy.screenshotid);&#xA;&#x9;&#x9;jqueryproxy.hierarchy = null;&#xA;&#x9;&#x9;event.recorded = true;&#xA;&#x9;&#x9;jqueryproxy.screens</values>
		<values>hotid = null;&#xA;&#x9;&#x9;jqueryproxy.started = 0;&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;&#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype.isVisible =  function() {&#xA;&#x9;var ret = { visibility: true, propagation: false, reachable: true };&#xA;&#xA;&#x9;return ret;&#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype.getNativeSelectElement=function(){&#xA;&#x9;var nativeElement =null;&#xA;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;var idstr = webGuiUtil.jQuery(this.element).attr(&quot;id&quot;);&#xA;&#x9;&#x9;if (idstr == null || idstr == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;return nativeElement;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;idstr = jsUtil.escapeCSS(idstr);&#xA;&#x9;&#x9;var selmenuid = idstr.substr(0, idstr.lastIndexOf(&quot;-button&quot;));&#xA;&#x9;&#x9;var ownerDoc = this.element.ownerDocument;&#xA;&#x9;&#x9;var results = webGuiUtil.jQuery(ownerDoc).find(&quot;#&quot;+ selmenuid);&#xA;&#x9;&#x9;if(results &amp;&amp; results.length &gt; 0){&#xA;&#x9;&#x9;&#x9;nativeElement = results[0];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;//if(nativeElement == null)&#xA;&#x9;//&#x9;rmotRecorder.log(&quot;RTW_WEBGUI_ERR:Unable to find native select element for &quot;, this.element);&#xA;&#x9;&#x9;&#xA;&#x9;return nativeElement;&#xA;};&#xA;&#xA;&#xA;JQueryUISelectmenuProxy.prototype.getNativeMenuElement=function(){&#xA;&#x9;var nativeElement =null;&#xA;&#x9;if (window.jQuery) {&#xA;&#x9;&#x9;var idstr=webGui</values>
		<values>Util.jQuery(this.element).attr(&quot;id&quot;);&#xA;&#x9;&#x9;idstr = jsUtil.escapeCSS(idstr);&#xA;&#x9;&#x9;var selmenuid = idstr.substr(0, idstr.lastIndexOf(&quot;-button&quot;)).concat(&quot;-menu&quot;);&#xA;&#x9;&#x9;var ownerDoc = this.element.ownerDocument;&#xA;&#x9;&#x9;var results = webGuiUtil.jQuery(ownerDoc).find(&quot;#&quot;+ selmenuid);&#xA;&#x9;&#x9;if(results &amp;&amp; results.length &gt; 0){&#xA;&#x9;&#x9;&#x9;nativeElement = results[0];&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;//if(nativeElement == null)&#xA;&#x9;//&#x9;rmotRecorder.log(&quot;RTW_WEBGUI_ERR:Unable to find native menu element for &quot;, this.element);&#xA;&#x9;&#x9;&#xA;&#x9;return nativeElement;&#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype._JQWidgetgetProperty=JQueryUISelectmenuProxy.prototype.getProperty;&#xA;JQueryUISelectmenuProxy.prototype.getProperty=function(propName){&#xA;&#x9;var propValue = null;&#xA;&#x9;try{&#xA;&#x9;&#x9;switch (propName) {&#xA;&#x9;&#x9;case WebGuiConstants.CONTENT_PROP:&#xA;&#x9;&#x9;&#x9;var select = this.getNativeSelectElement();&#xA;&#x9;&#x9;&#x9;if(select != null){&#xA;&#x9;&#x9;&#x9;&#x9;selValue = select.value;&#xA;&#x9;&#x9;&#x9;&#x9;propValue = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; select.options.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(selValue == select.options[i].value) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;propValue = select.options[i].text;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;</values>
		<values>&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;length&quot;:&#xA;&#x9;&#x9;&#x9;propValue = this.getNativeSelectElement().options.length;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case &quot;options&quot;:&#xA;&#x9;&#x9;&#x9;var select = this.getNativeSelectElement();&#xA;&#x9;&#x9;&#x9;propValue = &quot;&quot;;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; select.options.length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;propValue += select.options[i].text + &apos;, &apos;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;propValue = propValue.substring(0, propValue.length-2);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;case WebGuiConstants.LABEL_PROP :&#xA;&#x9;&#x9;&#x9;propValue = this.getLabel();&#xA;&#x9;&#x9;&#x9;if(propValue)&#xA;&#x9;&#x9;&#x9;&#x9;propValue = propValue.trim();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;propValue = this._JQWidgetgetProperty(propName);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}catch(getPropErr){&#xA;&#x9;&#x9;//rmotRecorder.log(&quot;Error fetching value for property: &quot;+propName+&quot; -- &quot;+getPropErr);&#xA;&#x9;}&#xA;&#xA;&#x9;&#xA;&#x9;return propValue;&#xA;};&#xA;JQueryUISelectmenuProxy.prototype._getLabel = JQueryUISelectmenuProxy.prototype.getLabel;&#xA;JQueryUISelectmenuProxy.prototype.getLabel = function () {&#xA;&#x9;var label = this._JQWidgetgetProperty(WebGuiConstants.LABEL_PROP );&#xA;&#x9;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;label = this._get</values>
		<values>Label();&#xA;&#x9;&#x9;&#x9;if (typeof(label)==&apos;undefined&apos; || label == null || label == &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;&#x9;if(this.bestComputedLabel()){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.bestComputedLabel();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var direction = traversal.LEFT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( jsUtil.isRTLLanguage() == true){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;direction = traversal.RIGHT;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;label = this.computeLabel(direction);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;return label;&#xA;};&#xA;//Priority index : Left &gt; Top&#xA;JQueryUISelectmenuProxy.prototype.bestComputedLabel = function () {&#xA;&#x9;return this.leftLabel || this.topLabel ;&#xA;};&#xA;JQueryUISelectmenuProxy.prototype._jqueryapplyDecoratedProps = JQueryUISelectmenuProxy.prototype.applyDecoratedProps;&#xA;JQueryUISelectmenuProxy.prototype.applyDecoratedProps=function(targetElement){&#xA;&#x9;this._jqueryapplyDecoratedProps(targetElement);&#xA;&#x9;targetElement.options = this.getProperty(WebGuiConstants.OPTIONS_PROP);&#xA;&#x9;targetElement.length = this.getProperty(WebGuiConstants.OPTIONSLENGTH_PROP);&#xA;&#x9;targetElement.label = this.getProperty(WebGuiConstants.LABEL_PROP);&#xA;};&#xA;&#xA;JQueryUISelectmenuProxy.prototype._JQWidgetexe</values>
		<values>cuteAction = JQueryUISelectmenuProxy.prototype.executeAction;&#xA;JQueryUISelectmenuProxy.prototype.executeAction = function(action) {&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUISelectmenuProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;var retStatus = RMOT_INCONCLUSIVE;&#xA;&#x9;var actionType = action.type;&#xA;&#x9;switch (actionType) {&#xA;&#x9;case &quot;onchange&quot; :&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;var option = action.parameters[0].value;&#xA;&#x9;&#x9;&#x9;var selectElement = this.getNativeSelectElement();&#xA;&#x9;&#x9;&#x9;var dropdownMenuElement = this.getNativeMenuElement();&#xA;&#x9;&#x9;&#x9;if (selectElement &amp;&amp; dropdownMenuElement) {&#xA;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(selectElement).selectmenu().selectmenu(&apos;open&apos;);&#xA;&#x9;&#x9;&#x9;&#x9;var optionElement = null;&#xA;&#x9;&#x9;&#x9;&#x9;var _max = 0;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; webGuiUtil.jQuery(dropdownMenuElement).children().length; i++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var _child = webGuiUtil.jQuery(dropdownMenuElement).children()[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var _w = jsUtil.computeStringSimilarity(webGuiUtil.jQuery(_child).text(), option);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (_w == 10) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;optionElement = webGuiUtil.jQuery(dropdownMenuElement).children()[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;</values>
		<values>&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else if (RMOT_GuidedHealing == true) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (_w &gt; _max) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_max = _w;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;optionElement = webGuiUtil.jQuery(dropdownMenuElement).children()[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_RECOVERY;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (optionElement) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;webGuiUtil.jQuery(dropdownMenuElement).menu(&quot;focus&quot;, null, webGuiUtil.jQuery(dropdownMenuElement).find(optionElement)).menu(&quot;select&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;JQueryUISelectmenu: Tried with Invalid option :&apos; + option);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} catch (Err) {&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;Error in JQueryUISelectmenuProxy.prototype.executeAction(&apos;+ action.type +&apos;)&apos;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;break;&#xA;&#x9;default:&#xA;&#x9;&#x9;retStatus = this._JQWidgetexecuteAction(action);&#xA;&#x9;&#x9;break;&#xA;&#x9;}&#xA;&#x9;return retStatus;&#xA;};&#xA;&#xA;/////////////////////////// JQueryUISelectmenuProxy end////////////////////////////////&#xA;&#xA;///////////////////////////// JQueryUIControlGroupProxy //////////////////////////&#xA;JQueryUIControlGroupProxy = function(domainObj,element){&#xA;&#x9;if</values>
		<values> (arguments.length == 0) return; // don&apos;t do anything&#xA;&#x9;JQueryMobileWidgetProxy.apply(this,arguments);&#xA;};&#xA;JQueryUIControlGroupProxy.prototype = new JQueryMobileWidgetProxy();&#xA;&#xA;JQueryUIControlGroupProxy.prototype.handleEvent = function(element, eventName, event) {&#xA;&#x9;// Do not log any events for this widget&#xA;&#x9;event.recorded = true;&#xA;};&#xA;///////////////////////////// JQueryUIControlGroupProxy End //////////////////////////&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2019. All Rights Reserved. &#xD;&#xA; *  (C) Copyright HCL Technologies Ltd. 2017, 2019. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/* cf com.ibm.rational.test.mobile.android.runtime.dynamicfinding.DynamicFinder */&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Inserts the specified element at the specified position in this list.&#xD;&#xA; * Shifts the element currently at</values>
		<values> that position (if any) and any subsequent &#xD;&#xA; * elements to the right (adds one to their indices).&#xD;&#xA; */&#xD;&#xA;function RMoTaddElemAtToArray(index, elem, tab) {&#xD;&#xA;&#x9;var copy = new Array();&#xD;&#xA;&#x9;var i=0;&#xD;&#xA;&#x9;var ll=tab.length;&#xD;&#xA;&#x9;// duplicate the tab and reset it&#xD;&#xA;&#x9;for (i=0; i&lt;ll; i++) {&#xD;&#xA;&#x9;&#x9;copy.push(tab.shift());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// recreate the tab with the elem to insert&#xD;&#xA;&#x9;for (i=0; i&lt;=ll; i++) {&#xD;&#xA;&#x9;&#x9;if (index == i) {&#xD;&#xA;&#x9;&#x9;&#x9;tab.push(elem);&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;tab.push(copy.shift());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return tab;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;RMoTArea = function() {&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;RMoTArea.prototype = {&#xD;&#xA;&#x9;RMoTInit: function(x1, y1, x2, y2) {&#xD;&#xA;&#x9;&#x9;this.x1 = x1;&#xD;&#xA;&#x9;&#x9;this.y1 = y1;&#xD;&#xA;&#x9;&#x9;this.x2 = x2;&#xD;&#xA;&#x9;&#x9;this.y2 = y2;&#xD;&#xA;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;RMoTcreateAreaFromView: function(obj) {&#xD;&#xA;&#x9;&#x9;this.x1 = RMoTgetX(obj);&#xD;&#xA;&#x9;&#x9;this.y1 = RMoTgetY(obj);&#xD;&#xA;&#x9;&#x9;this.x2 = RMoTgetX(obj) + RMoTgetWidth(obj);&#xD;&#xA;&#x9;&#x9;this.y2 = RMoTgetY(obj) + RMoTgetHeight(obj);&#xD;&#xA;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;RMoTintersects: function (area) {&#xD;&#xA;&#x9;&#x9;return ((this.x1 &lt; area.x2) &amp;&amp; (area.x1 &lt; this.x2) &amp;&amp; (this.y1 &lt; area.y2) &amp;&amp; (area.y1 &lt; this.y2));&#xD;&#xA;&#x9;},&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * this funct</values>
		<values>ion returns the distance from the point ref to the point o1&#xD;&#xA; * direction is TypeLocator: left, right, above, ...&#xD;&#xA; */&#xD;&#xA;function RMoTDistanceComparator(direction, ref, o1) {&#xD;&#xA;&#x9;var d1;&#xD;&#xA;&#x9;switch (direction) {&#xD;&#xA;&#x9;case &apos;LLeft&apos;:&#xD;&#xA;&#x9;case &apos;LRight&apos;:&#xD;&#xA;&#x9;&#x9;var cx  = RMoTgetX(ref) + RMoTgetWidth(ref)/2;&#xD;&#xA;&#x9;&#x9;d1 = Math.abs(RMoTgetX(o1) + RMoTgetWidth(o1)/2 - cx);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LAbove&apos;:&#xD;&#xA;&#x9;case &apos;LUnder&apos;:&#xD;&#xA;&#x9;&#x9;var cy = RMoTgetY(ref) + RMoTgetHeight(ref)/2;&#xD;&#xA;&#x9;&#x9;d1 = Math.abs(RMoTgetY(o1) + RMoTgetHeight(o1)/2 - cy);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LNear&apos;:&#xD;&#xA;&#x9;&#x9;var cx  = RMoTgetX(ref) + RMoTgetWidth(ref)/2;&#xD;&#xA;&#x9;&#x9;var d1x = Math.abs(RMoTgetX(o1) + RMoTgetWidth(o1)/2 - cx);&#xD;&#xA;&#x9;&#x9;var cy = RMoTgetY(ref) + RMoTgetHeight(ref)/2;&#xD;&#xA;&#x9;&#x9;var d1y = Math.abs(RMoTgetY(o1) + RMoTgetHeight(o1)/2 - cy);&#xD;&#xA;&#x9;&#x9;d1 = Math.sqrt(d1x*d1x + d1y*d1y);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;default:&#xD;&#xA;&#x9;&#x9;return 0;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return d1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * Add &quot;elem&quot; or its descendants to &quot;views&quot; if &quot;elem&quot; is compatible with &quot;typename&quot; and &quot;identifyby&quot;&#xD;&#xA; */&#xD;&#xA;function RMoTfindMachingObjectElementWithIdOnly(views, elem, typ</values>
		<values>ename, identifyby) {&#xD;&#xA;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;if (elem.nodeType == window.Node.ELEMENT_NODE) {&#xD;&#xA;&#x9;&#x9;var visible = proxy.isVisible();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (!visible.visibility &amp;&amp; visible.propagation || proxy.isWidgetChild) return;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (visible.reachable) {&#xD;&#xA;&#x9;&#x9;&#x9;if (typename != null &amp;&amp; RMoTisCompatibleWith(elem, typename)) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (identifyby == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;views.push(elem);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (RMoTisElemOKWithId(elem, identifyby)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;views.push(elem);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;if (proxy.isContainer()) {&#xD;&#xA;&#x9;&#x9;if (isFrameElement(elem) &amp;&amp; elem.contentDocument) { // 37668&#xD;&#xA;&#x9;&#x9;&#x9;jsUtil.setOwnerDocumentCoordinates(elem);&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;elem = elem.contentDocument || elem.contentWindow.document;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// loop on children&#xD;&#xA;&#x9;&#x9;var children = new Array();&#xD;&#xA;&#x9;&#x9;if ((elem.shadowRoot != null) &amp;&amp; (elem.shadowRoot.hasChildNodes())) {&#xD;&#xA;&#x9;&#x9;&#x9;for (var i0 = 0; i0 &lt; elem.shadowRoot.childNodes.length; i0++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;children.push(elem.shadowRoot.childNodes[i0]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (elem.hasChildNodes()) {&#xD;&#xA;&#x9;&#x9;&#x9;for</values>
		<values> (var i1 = 0; i1 &lt; elem.childNodes.length; i1++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;children.push(elem.childNodes[i1]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;RMoTfindMachingObjectElementWithIdOnly(views, children[i], typename, identifyby);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTisElemOKWithId(/*Object*/ elem, /*DeviceId*/ id) {&#xD;&#xA;&#x9;var idTrim = jsUtil.trimAndFormat(&quot;TString&quot;, id.parameter.value);&#xD;&#xA;&#x9;var valTrim = jsUtil.trimAndFormat(id.parameter.type, RMoTgetIdentifiedByValue(elem, id));&#xD;&#xA;&#xD;&#xA;//LoggerService.logMsg(RMoTTrace, &apos;RMoTisElemOKWithId(&apos; + idTrim + &apos; ,&apos; + valTrim + &apos;)&apos;);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;var ret = null;&#xD;&#xA;&#x9;if (id.operator == undefined)&#xD;&#xA;&#x9;&#x9;ret = idTrim == valTrim;&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;ret = jsUtil.applySimpleOperator(valTrim, idTrim, id.operator);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if (!ret) {&#xD;&#xA;&#x9;&#x9;ret = RMoTisElemOKWithDeprecatedId(elem, id, idTrim);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * go through views and returns the object pointed at &quot;loc&quot;&#xD;&#xA; */&#xD;&#xA;function RMoTselect(loc, views, candidatesAfterMainLocation) {&#xD;&#xA;&#x9;var type = loc.type;&#xD;&#xA;&#xD;&#xA;&#x9;var ll = (views == null) ? 0 : views.le</values>
		<values>ngth;&#xD;&#xA;&#xD;&#xA;&#x9;switch (type) {&#xD;&#xA;&#x9;case &apos;LFirst&apos;:&#xD;&#xA;&#x9;&#x9;// deprecated&#xD;&#xA;&#x9;&#x9;return RMoTselectFirst(views);&#xD;&#xA;&#x9;case &apos;LLast&apos;:&#xD;&#xA;&#x9;&#x9;// deprecated&#xD;&#xA;&#x9;&#x9;return RMoTselectLast(views);&#xD;&#xA;&#x9;case &apos;LPosition&apos;:&#xD;&#xA;&#x9;&#x9;// no secondary locator&#xD;&#xA;&#x9;&#x9;var r = loc.parameter.value;&#xD;&#xA;&#x9;&#x9;return RMoTselectPosition(views,r);&#xD;&#xA;&#x9;case &apos;LLeft&apos;:&#xD;&#xA;&#x9;case &apos;LRight&apos;:&#xD;&#xA;&#x9;case &apos;LAbove&apos;:&#xD;&#xA;&#x9;case &apos;LUnder&apos;:&#xD;&#xA;&#x9;case &apos;LNear&apos;:&#xD;&#xA;&#x9;&#x9;if (loc.parameter.type == &apos;TUIObject&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;var uiobject = loc.parameter.object;&#xD;&#xA;&#x9;&#x9;&#x9;var elems = RMoTfindElement(uiobject); &#xD;&#xA;&#x9;&#x9;&#x9;if (elems &amp;&amp; elems.length == 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;return RMoTselectByLocation(elems[0], views, type, candidatesAfterMainLocation);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LCover&apos;:&#xD;&#xA;&#x9;case &apos;LCovered&apos;:&#xD;&#xA;&#x9;case &apos;LContain&apos;:&#xD;&#xA;&#x9;case &apos;LContained&apos;:&#xD;&#xA;&#x9;&#x9;if (loc.parameter.type == &apos;TUIObject&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;var uiobject = loc.parameter.object;&#xD;&#xA;&#x9;&#x9;&#x9;var elems = RMoTfindElement(uiobject); &#xD;&#xA;&#x9;&#x9;&#x9;if (elems &amp;&amp; elems.length == 1) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;switch (type) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;case &apos;LCover&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;case &apos;LCovered&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return RMoTselectCover(type, elems[0], views, candidatesAfterMainLocation);&#xD;&#xA;</values>
		<values>&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;case &apos;LContain&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;case &apos;LContained&apos;:&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return RMoTselectContain(type, elems[0], views, candidatesAfterMainLocation);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;default:&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTselectFirst(views) {&#xD;&#xA;&#x9;var res;&#xD;&#xA;&#x9;if (views.length &gt; 0) {&#xD;&#xA;&#x9;&#x9;res = views[0];&#xD;&#xA;&#x9;&#x9;/*int*/var X = RMoTgetX(res);&#xD;&#xA;&#x9;&#x9;/*int*/var Y = RMoTgetY(res);&#xD;&#xA;&#x9;&#x9;for (var i = 1; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var X2 = RMoTgetX(views[i]);&#xD;&#xA;&#x9;&#x9;&#x9;var Y2 = RMoTgetY(views[i]);&#xD;&#xA;&#x9;&#x9;&#x9;if ((Y2 &lt; Y) || ((Y2 == Y) &amp;&amp; (X2 &lt; X))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Y = Y2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;X = X2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;res = views[i];&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;&#x9;return res;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTselectLast(views) {&#xD;&#xA;&#x9;var res;&#xD;&#xA;&#x9;if (views.length &gt; 0) {&#xD;&#xA;&#x9;&#x9;res = views[0];&#xD;&#xA;&#x9;&#x9;/*int*/var X = RMoTgetX(res);&#xD;&#xA;&#x9;&#x9;/*int*/var Y = RMoTgetY(res);&#xD;&#xA;&#x9;&#x9;for (var i = 1; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var X2 = RMoTgetX(views[i]);&#xD;&#xA;&#x9;&#x9;&#x9;var Y2 = RMoTgetY(views[i]);&#xD;&#xA;&#x9;&#x9;&#x9;if ((Y2 &gt; Y) || ((Y2 == Y) &amp;&amp; (X2 &gt; X))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Y = Y2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;X = X2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;res = views[i];&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return res;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;</values>
		<values>function RMoTaddSorttingView(views,&#x9;// original list&#xD;&#xA;&#x9;&#x9;l,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// index of object to be sorted&#xD;&#xA;&#x9;&#x9;sortedList,&#x9;&#x9;&#x9;&#x9;&#x9;// list of sorted index&#xD;&#xA;&#x9;&#x9;v&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// object to be sorted&#xD;&#xA;)&#xD;&#xA;{&#xD;&#xA;&#x9;var X = RMoTgetX(v);&#xD;&#xA;&#x9;var Y = RMoTgetY(v);&#xD;&#xA;&#x9;var i = 0;&#xD;&#xA;&#x9;for (; (i &lt; l); i++) {&#xD;&#xA;&#x9;&#x9;var X2 = RMoTgetX(views[sortedList[i]]);&#xD;&#xA;&#x9;&#x9;var Y2 = RMoTgetY(views[sortedList[i]]);&#xD;&#xA;&#x9;&#x9;if ((Y2 &lt; Y) || ((Y2 == Y) &amp;&amp; (X2 &lt; X))) {&#xD;&#xA;&#x9;&#x9;&#x9;continue;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return i;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTselectPosition(views, position) {&#xD;&#xA;&#x9;var res;&#xD;&#xA;&#x9;if (views.length &gt;= position) {&#xD;&#xA;&#x9;&#x9;var sortedList = new Array();&#xD;&#xA;&#x9;&#x9;for (var j = 0; j &lt; views.length; j++) sortedList.push(-1);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var visible = domainManager.getProxy(views[i]).isVisible();&#xD;&#xA;&#x9;&#x9;&#x9;if (visible.reachable == true) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var pos = RMoTaddSorttingView(views, i, sortedList, views[i]);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// insertion&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (pos &lt; i) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (var k = i; k &gt; pos; k--)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sortedList[k] = sortedList[k-1];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;sortedList[pos] = i;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;res = vie</values>
		<values>ws[sortedList[position-1]]; // position starts at 1, not 0&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return res;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Select the best widget depending on the location type (left, right, .....) */&#xD;&#xA;function /*Object*/ RMoTselectByLocation(/*Object*/ view, /*List&lt;Object&gt;*/ candidates, /*TypeLocator*/ location, /*ArrayList&lt;Object&gt;*/ candidatesAfterMainLocation) {&#xD;&#xA;&#x9;// set to null candidates that are not in the search area &#xD;&#xA;&#x9;RMoTfilterCandidates(view, candidates, location);&#xD;&#xA;&#xD;&#xA;&#x9;//- right now all candidates have at least a part inside the search area&#xD;&#xA;&#x9;//- returns the closest candidate&#xD;&#xA;&#x9;if (candidatesAfterMainLocation != null) {&#xD;&#xA;&#x9;&#x9;for (var i1=0; i1&lt;candidates.length; i1++) {&#xD;&#xA;&#x9;&#x9;&#x9;if (candidates[i1] != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;candidatesAfterMainLocation.push(candidates[i1]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//&#xD;&#xA;&#x9;var ret = -1;&#xD;&#xA;&#x9;var mini = Number.MAX_VALUE;&#xD;&#xA;&#x9;for (var i=0; i&lt;candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;if (candidates[i] != null) {&#xD;&#xA;&#x9;&#x9;&#x9;var dist = RMoTDistanceComparator(location, view, candidates[i]);&#xD;&#xA;&#x9;&#x9;&#x9;if (dist &lt; mini) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;mini = dist;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret = i;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;</values>
		<values>return (ret &gt;= 0) ? candidates[ret] : null;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * return the filiation level of view according to v&#xD;&#xA; * -1 view is not a descendant of v&#xD;&#xA; * 0 view is v&#xD;&#xA; * 1 view is the child of v&#xD;&#xA; * 2 view is the grandchild of v&#xD;&#xA; * ...&#xD;&#xA; */&#xD;&#xA;function RMoTisFiliationOf(view, v) {&#xD;&#xA;&#x9;var ret = -1;&#xD;&#xA;&#x9;var node = view;&#xD;&#xA;&#x9;var i = 0;&#xD;&#xA;&#x9;while (node != null) {&#xD;&#xA;&#x9;&#x9;if (node == v) {&#xD;&#xA;&#x9;&#x9;&#x9;ret = i;&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;&#x9;node = node.parentNode;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Select the closest container widget of the view */&#xD;&#xA;function RMoTselectCover(op, view, views, candidatesAfterMainLocation) {&#xD;&#xA;&#x9;var res = null;&#xD;&#xA;&#x9;for (var i = 0; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;var v = views[i];&#xD;&#xA;&#x9;&#x9;var cond;&#xD;&#xA;&#x9;&#x9;if (op == &apos;LCover&apos;)&#xD;&#xA;&#x9;&#x9;&#x9;cond = RMoTisIncludedIn(view, v);&#xD;&#xA;&#x9;&#x9;else if (op == &apos;LCovered&apos;)&#xD;&#xA;&#x9;&#x9;&#x9;cond = RMoTisIncludedIn(v, view);&#xD;&#xA;&#x9;&#x9;//&#xD;&#xA;&#x9;&#x9;if (cond) {&#xD;&#xA;&#x9;&#x9;&#x9;if (res == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;res = v;&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;res = RMoTgetSmallest(v, res);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (candidatesAfterMainLocation != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTaddCoveringCandidate(v, candidatesAfterMa</values>
		<values>inLocation, false);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return res;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/* seek among views the closest item of view */&#xD;&#xA;function RMoTselectContain(op, view, views, candidatesAfterMainLocation) {&#xD;&#xA;&#x9;var itemsTab = new Array();&#xD;&#xA;&#x9;// first loop on views to compute filiation&#xD;&#xA;&#x9;for (var i = 0; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;var v = views[i];&#xD;&#xA;&#x9;&#x9;if (op == &apos;LContain&apos;)&#xD;&#xA;&#x9;&#x9;&#x9;itemsTab.push(RMoTisFiliationOf(view, v));&#xD;&#xA;&#x9;&#x9;else if (op == &apos;LContained&apos;)&#xD;&#xA;&#x9;&#x9;&#x9;itemsTab.push(RMoTisFiliationOf(v, view));&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// get the closest item&#xD;&#xA;&#x9;var index = -1;&#xD;&#xA;&#x9;for (var i = 0; i &lt; views.length; i++) {&#xD;&#xA;&#x9;&#x9;if (itemsTab[i] &gt; 0) {&#xD;&#xA;&#x9;&#x9;&#x9;if ((index &lt; 0) || (itemsTab[i] &lt; itemsTab[index])) index = i;&#xD;&#xA;&#x9;&#x9;&#x9;if (candidatesAfterMainLocation != null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTaddContainmentCandidate(views[i], candidatesAfterMainLocation, false);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return (index &lt; 0) ? null : views[index];&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTaddCoveringCandidate(view, candidatesAfterMainLocation, smallestFirst) {&#xD;&#xA;&#x9;var index = 0;&#xD;&#xA;&#x9;for (index = 0; index &lt; candidatesAfterMainLocation.length; index++) {&#xD;&#xA;&#x9;&#x9;var c</values>
		<values>urrent = candidatesAfterMainLocation[index];&#xD;&#xA;&#x9;&#x9;if (smallestFirst) {&#xD;&#xA;&#x9;&#x9;&#x9;if (RMoTisSmaller(view, current)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;if (RMoTisSmaller(current, view)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;candidatesAfterMainLocation = RMoTaddElemAtToArray(index, view, candidatesAfterMainLocation);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTaddContainmentCandidate(view, candidatesAfterMainLocation, deepestFirst) {&#xD;&#xA;&#x9;var index = 0;&#xD;&#xA;&#x9;for (index = 0; index &lt; candidatesAfterMainLocation.length; index++) {&#xD;&#xA;&#x9;&#x9;var current = candidatesAfterMainLocation[index];&#xD;&#xA;&#x9;&#x9;if (deepestFirst) {&#xD;&#xA;&#x9;&#x9;&#x9;if (RMoTisIncludedIn(view, current)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;if (RMoTisIncludedIn(current, view)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;candidatesAfterMainLocation = RMoTaddElemAtToArray(index, view, candidatesAfterMainLocation);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function /*Object*/ RMoTgetSmallest(/*Object*/ v1, /*Object*/ v2) {&#xD;&#xA;&#x9;return RMoTisSmaller(v1, v2) ? v1 : v2;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTisSmaller(v1, v2) {&#xD;&#xA;&#x9;/*int*/var w1 = RMoTgetWidth(v1);&#xD;&#xA;&#x9;/*int*/var h1 = RMoTgetHeigh</values>
		<values>t(v1);&#xD;&#xA;&#x9;/*int*/var w2 = RMoTgetWidth(v2);&#xD;&#xA;&#x9;/*int*/var h2 = RMoTgetHeight(v2);&#xD;&#xA;&#x9;if (w1*h1 &lt;= w2*h2) return true;&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*boolean*/ RMoTisIncludedIn(/*Object*/ view, /*Object*/ v) {&#xD;&#xA;&#x9;/*int*/var x1 = RMoTgetX(view);&#xD;&#xA;&#x9;/*int*/var y1 = RMoTgetY(view);&#xD;&#xA;&#x9;/*int*/var w1 = RMoTgetWidth(view);&#xD;&#xA;&#x9;/*int*/var h1 = RMoTgetHeight(view);&#xD;&#xA;&#x9;/*int*/var x2 = RMoTgetX(v);&#xD;&#xA;&#x9;/*int*/var y2 = RMoTgetY(v);&#xD;&#xA;&#x9;/*int*/var w2 = RMoTgetWidth(v);&#xD;&#xA;&#x9;/*int*/var h2 = RMoTgetHeight(v);&#xD;&#xA;&#x9;return (x2&lt;=x1) &amp;&amp; (y2&lt;=y1) &amp;&amp; (x2+w2&gt;=x1+w1) &amp;&amp; (y2+h2&gt;=y1+h1) ;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Filters the given candidates list by removing candidates that are not in the search area &#xD;&#xA; * (relatively to the given reference element and the search direction)&#xD;&#xA; * @param view reference element&#xD;&#xA; * @param candidates list of candidates to filter&#xD;&#xA; * @param location the direction of the search&#xD;&#xA; */&#xD;&#xA;function RMoTfilterCandidates(/*Object*/ view, /*List&lt;Object&gt;*/ candidates,&#x9;/*TypeLocator*/ location) {&#xD;&#xA;&#x9;// For near locator, no filter&#xD;&#xA;&#x9;if (location == &apos;LNe</values>
		<values>ar&apos;) return;&#xD;&#xA;&#x9;var searchArea = RMoTgetSearchableArea(view, location);&#xD;&#xA;&#x9;var oppositeArea = null;&#xD;&#xA;&#x9;switch (location) {&#xD;&#xA;&#x9;case &apos;LLeft&apos;:&#xD;&#xA;&#x9;&#x9;oppositeArea = RMoTgetSearchableArea(view, &apos;LRight&apos;);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LRight&apos;:&#xD;&#xA;&#x9;&#x9;oppositeArea = RMoTgetSearchableArea(view, &apos;LLeft&apos;);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LAbove&apos;:&#xD;&#xA;&#x9;&#x9;oppositeArea = RMoTgetSearchableArea(view, &apos;LUnder&apos;);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LUnder&apos;:&#xD;&#xA;&#x9;&#x9;oppositeArea = RMoTgetSearchableArea(view, &apos;LAbove&apos;);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;default:&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;for (var i = 0; i &lt; candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;/*Area*/var candidate = new RMoTArea();&#xD;&#xA;&#x9;&#x9;candidate.RMoTcreateAreaFromView(candidates[i]);&#xD;&#xA;&#x9;&#x9;//- if a candidate area does not intersect the search area we can drop it&#xD;&#xA;&#x9;&#x9;if ( ! candidate.RMoTintersects(searchArea)) {&#xD;&#xA;&#x9;&#x9;&#x9;candidates[i] = null;&#xD;&#xA;&#x9;&#x9;} else if (oppositeArea != null &amp;&amp; candidate.RMoTintersects(oppositeArea)) {&#xD;&#xA;&#x9;&#x9;&#x9;// If a candidate intersects both on the left and right areas of the view, then let&apos;s no longer consider it&#xD;&#xA;&#x9;&#x9;&#x9;// Same for up and down&#xD;&#xA;&#x9;&#x9;&#x9;candidates[i] = null;&#xD;&#xA;</values>
		<values>&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * According to the given location, returns the area in which the searched element could be relatively to the given ref element.&#xD;&#xA; * @param v reference element&#xD;&#xA; * @param location direction relatively to the reference element &#xD;&#xA; * @return an area where the searched element could be&#xD;&#xA; */&#xD;&#xA;function /*Area*/ RMoTgetSearchableArea(/*Object*/ v, /*TypeLocator*/ location) {&#xD;&#xA;&#x9;/*Area*/var ref = new RMoTArea();&#xD;&#xA;&#x9;ref.RMoTcreateAreaFromView(v);&#xD;&#xA;&#xD;&#xA;&#x9;var ret = new RMoTArea();&#xD;&#xA;&#xD;&#xA;&#x9;switch(location) {&#xD;&#xA;&#x9;case &apos;LLeft&apos;:&#xD;&#xA;&#x9;&#x9;ret.RMoTInit(Number.MIN_VALUE, ref.y1, ref.x1, ref.y2);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LRight&apos;:&#xD;&#xA;&#x9;&#x9;ret.RMoTInit(ref.x2, ref.y1, Number.MAX_VALUE, ref.y2);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LAbove&apos;:&#xD;&#xA;&#x9;&#x9;ret.RMoTInit(ref.x1, Number.MIN_VALUE, ref.x2, ref.y1);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;LUnder&apos;:&#xD;&#xA;&#x9;&#x9;ret.RMoTInit(ref.x1, ref.y2, ref.x2, Number.MAX_VALUE);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;default:&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*Object*/ RMoTfindMatchingXpath(mainDoc, value) {&#xD;&#xA;&#x9;if (typeof(document.evaluate)==&apos;undefined&apos;) return null; // N</values>
		<values>o support for IE&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;var elt = null;&#xD;&#xA;    var frames = mainDoc.querySelectorAll(&apos;iframe, frame&apos;);&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; frames.length; i++) {&#xD;&#xA;    &#x9;if (isFrameElement(frames[i])) {&#xD;&#xA;    &#x9;&#x9;elt = RMoTfindMatchingXpath(frames[i].contentWindow.document, value);&#xD;&#xA;            if (elt != null) return elt;&#x9;&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return mainDoc.evaluate(value, &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;mainDoc,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;XPathResult.FIRST_ORDERED_NODE_TYPE,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.singleNodeValue;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*List&lt;Object&gt;*/ RMoTfindElement(uiobject) {&#xD;&#xA;&#x9;if ( ! uiobject) return null;&#xD;&#xA;&#x9;RMOT_GuidedHealing = false;&#xD;&#xA;&#x9;var mainDoc = document;&#xD;&#xA;&#x9;if(jsUtil.isDesktop()){&#xD;&#xA;&#x9;&#x9;mainDoc = jsUtil.getMainDocument();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// Select reachable objects&#xD;&#xA;&#x9;var children = new Array();&#xD;&#xA;&#x9;if ((mainDoc.shadowRoot != null) &amp;&amp; (mainDoc.shadowRoot.hasChildNodes())) {&#xD;&#xA;&#x9;&#x9;for (var i0 = 0; i0 &lt; mainDoc.shadowRoot.childNodes.length; i0++) {&#xD;&#xA;&#x9;&#x9;&#x9;children.push(mainDoc.shadowRoot.childNodes[i0]);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (mainDoc.hasChildNodes()) {&#xD;&#xA;&#x9;&#x9;for (var i1 = 0; i1 &lt;</values>
		<values> mainDoc.childNodes.length; i1++) {&#xD;&#xA;&#x9;&#x9;&#x9;children.push(mainDoc.childNodes[i1]);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;var/*List&lt;Object&gt;*/ views = new Array();&#xD;&#xA;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xD;&#xA;&#x9;&#x9;RMoTfindMachingObjectElementWithIdOnly(views, children[i], uiobject.type, (uiobject.identifier) ? uiobject.identifier : null);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// Custom Xpath, try to find a matching element&#xD;&#xA;&#x9;if (views.length == 0 &amp;&amp; uiobject.identifier &amp;&amp; uiobject.identifier.name == WebGuiConstants.XPATH_PROP) {&#xD;&#xA;&#x9;&#x9;var elt = RMoTfindMatchingXpath(mainDoc, uiobject.identifier.parameter.value);&#xD;&#xA;&#x9;&#x9;if (elt != null) views.push(elt);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if (views.length &gt; 0) {&#xD;&#xA;&#x9;&#x9;if (uiobject.locator != null &amp;&amp; !RMoTisImageType(uiobject.identifier)) {&#xD;&#xA;&#x9;&#x9;&#x9;var candidatesAfterFirstLocation = uiobject.secondaryLocator != null ? new Array() : null;&#xD;&#xA;&#x9;&#x9;&#x9;var view = RMoTselect(uiobject.locator, views, candidatesAfterFirstLocation);&#xD;&#xA;&#x9;&#x9;&#x9;if (view == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;views = new Array();&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (uiobject.secondaryLocator != null &amp;&amp; candidatesAfterFirstLocation.length &gt; </values>
		<values>0) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;  --&gt; appel RMoTselect(&apos; + uiobject.secondaryLocator + &apos; ,&apos; + candidatesAfterFirstLocation.length +&apos;)&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;view = RMoTselect(uiobject.secondaryLocator, candidatesAfterFirstLocation, null);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (view == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;views = new Array();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;views = new Array();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;views.push(view);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;views = new Array();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;views.push(view);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return views;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; * cf com.ibm.rational.test.lt.ui.moeb.views.elements.MoebElementInformationProvider&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;function /*int*/ RMoTgetX(/*Object*/ elem) {&#xD;&#xA;&#x9;var left = 0;&#xD;&#xA;&#x9;if (elem != undefined &amp;&amp; elem != null) {&#xD;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (proxy != undefined &amp;&amp; proxy != null) {&#xD;&#xA;&#x9;&#x9;&#x9;left = parseInt(proxy.getProperty(&quot;left&quot;));&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;var e = elem;&#xD;&#xA;&#x9;&#x9;&#x9;while (e.offsetParent != undefined &amp;&amp; e.offsetParent != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;left += e.offsetLeft + (e.clientLeft != null ? e.clientLeft : 0);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;e = e.offsetParent;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}</values>
		<values>&#xD;&#xA;&#x9;&#x9;// Add the ownerDocument (potentially iframe element) left coordinate&#xD;&#xA;&#x9;&#x9;left += jsUtil.getOwnerDocumentCoordinates(elem).left;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return left;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*int*/ RMoTgetY(/*Object*/ elem) {&#xD;&#xA;&#x9;var top = 0;&#xD;&#xA;&#x9;if (elem != undefined &amp;&amp; elem != null) {&#xD;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (proxy != undefined &amp;&amp; proxy != null) {&#xD;&#xA;&#x9;&#x9;&#x9;top = parseInt(proxy.getProperty(&quot;top&quot;));&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;var e = elem;&#xD;&#xA;&#x9;&#x9;&#x9;while (e.offsetParent != undefined &amp;&amp; e.offsetParent != null)&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;top += e.offsetTop + (e.clientTop != null ? e.clientTop : 0);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;e = e.offsetParent;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;// Add the ownerDocument (potentially iframe element) top coordinate&#xD;&#xA;&#x9;&#x9;top += jsUtil.getOwnerDocumentCoordinates(elem).top;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return top;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*int*/ RMoTgetWidth(/*Object*/ elem) {&#xD;&#xA;&#x9;var width = 0;&#xD;&#xA;&#x9;if (elem != undefined &amp;&amp; elem != null) {&#xD;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (proxy != undefined &amp;&amp; proxy != null) {&#xD;&#xA;&#x9;&#x9;&#x9;width = parseInt(proxy.getProperty(&quot;right&quot;)) - parseInt(proxy.getP</values>
		<values>roperty(&quot;left&quot;));&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;width = (elem.offsetWidth) ? elem.offsetWidth : 0;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return width;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*int*/ RMoTgetHeight(/*Object*/ elem) {&#xD;&#xA;&#x9;var height = 0;&#xD;&#xA;&#x9;if (elem != undefined &amp;&amp; elem != null) {&#xD;&#xA;&#x9;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (proxy != undefined &amp;&amp; proxy != null) {&#xD;&#xA;&#x9;&#x9;&#x9;height = parseInt(proxy.getProperty(&quot;bottom&quot;)) - parseInt(proxy.getProperty(&quot;top&quot;));&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;height = (elem.offsetHeight) ? elem.offsetHeight : 0;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return height;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTgetComputedStyle(element, prop) {&#xD;&#xA;&#x9;var computedStyle = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;if (window.getComputedStyle) {&#xD;&#xA;&#x9;&#x9;var ret = jsUtil.getMainWindow().getComputedStyle(element);&#xD;&#xA;&#x9;&#x9;if (ret != null) {&#xD;&#xA;&#x9;&#x9;&#x9;computedStyle = ret.getPropertyValue(prop);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return computedStyle;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Returns the value of the property given by id of the given element */&#xD;&#xA;function /*Object*/ RMoTgetIdentifiedByValue(/*Object*/ elem, /*DeviceId*/ id) {&#xD;&#xA;&#x9;var ret = null;&#xD;&#xA;&#x9;if (id &amp;&amp; id.name) {&#xD;&#xA;&#x9;&#x9;ret = domainManager.getProxy(ele</values>
		<values>m).getProperty(id.name);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Returns whether the given type is compatible with the type of the given element */ &#xD;&#xA;function /*boolean*/ RMoTisCompatibleWith(/*Object*/ elem, /*String*/ type) {&#xD;&#xA;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#x9;var proxyName = &quot;html.&quot; + proxy.getProxyName();&#xD;&#xA;&#x9;if (proxyName == type) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//extended the logic to check the type of the control based on the assigned proxy classname&#xD;&#xA;&#x9;var typeClass = htmlProxyMap[type.substring(5)];&#xD;&#xA;&#x9;if(proxy.proxyClass == typeClass) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function /*boolean*/ RMoTisImageType(identifyby) {&#xD;&#xA;&#x9;return (identifyby !== undefined &amp;&amp; identifyby.parameter.type === &apos;TImage&apos;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; The extraction of &apos;content&apos; and &apos;label&apos; have been modified in version 10.1.2 and then in version 10.2.&#xD;&#xA; The purpose of this method is to calculate the &apos;content&apos; / &apos;label&apos; as it was done at recording.&#xD;&#xA; This ensures that scripts recorded in a version &lt;= 10.1.2 can be played back by the current version</values>
		<values>.&#xD;&#xA; NB: if the getProperty() method is redefined by a proxy this means that the content extraction has not changed&#xD;&#xA; and therefore the proxy is not concerned.&#xD;&#xA;*/&#xD;&#xA;function RMoTisElemOKWithDeprecatedId(elem, id, idTrim) {&#xD;&#xA;&#x9;const getContentPropertyisRedefined = [&apos;HtmlInput5Proxy&apos;, &apos;HtmlSelectProxy&apos;, &apos;HtmlMediaProxy&apos;, &apos;HtmlSubmitProxy&apos;, &apos;HtmlTextInputProxy&apos;];&#xD;&#xA;&#x9;const getLabelPropertyisRedefined = [&apos;HtmlCheckBoxRadioProxy&apos;, &apos;HtmlInput5Proxy&apos;, &apos;HtmlSelectProxy&apos;, &apos;HtmlTextInputProxy&apos;];&#xD;&#xA;&#x9;const proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;const p = id.parameter;&#xD;&#xA;&#x9;const op = id.operator;&#xD;&#xA;&#x9;if (p.name === WebGuiConstants.CONTENT_PROP) {&#xD;&#xA;&#x9;&#x9;if (getContentPropertyisRedefined.indexOf(proxy.proxyClass) != -1) return false;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (jsUtil.applySimpleOperator(jsUtil.trimAndFormat(p.type, RMoTgetContent_1012(elem, id)), idTrim, op)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;|| jsUtil.applySimpleOperator(jsUtil.trimAndFormat(p.type, RMoTgetContent_102(elem, id)), idTrim, op))&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (p.name === WebGuiConstants.LABEL_PROP) {&#xD;&#xA;&#x9;&#x9;if (getLabelProp</values>
		<values>ertyisRedefined.indexOf(proxy.proxyClass) != -1) return false;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (jsUtil.applySimpleOperator(jsUtil.trimAndFormat(p.type, elem.placeholder), idTrim, op))&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Content property compatibility until 1012 */&#xD;&#xA;function RMoTgetContent_1012(elem, id) {&#xD;&#xA;&#x9;var textContent = elem.textContent;&#xD;&#xA;&#x9;return jsUtil.trimAndFormat(id.parameter.type, (textContent) ? textContent.trim() : &apos;&apos;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* Content property compatibility until 102 */&#xD;&#xA;function RMoTgetContent_102(elem, id) {&#xD;&#xA;&#x9;return jsUtil.getTrimText(elem);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// trace constants&#xD;&#xA;if (typeof(RMoTFatal)==&apos;undefined&apos;) {&#xD;&#xA;&#x9;var RMoTFatal=0;&#xD;&#xA;&#x9;var RMoTError=1;&#xD;&#xA;&#x9;var RMoTWarning=2;&#xD;&#xA;&#x9;var RMoTInfo=3;&#xD;&#xA;&#x9;var RMoTDebug=4;&#xD;&#xA;&#x9;var RMoTTrace=5;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// result of the dynamic finding is stored in this global variable&#xD;&#xA;var foundObject;&#xD;&#xA;var endOfResearch;&#xD;&#xA;var nbAttempts;&#xD;&#xA;var rmotRectangle;&#xD;&#xA;var rmotTimeout;&#xD;&#xA;&#xD;&#xA;function RMoTRepeatedfindElement(uiobject, reveal, period) {&#xD;&#xA;&#x9;foundObject = null;&#xD;&#xA;&#x9;rmotRectangle = null;&#xD;&#xA;&#x9;nbAttempts++;&#xD;&#xA;&#x9;</values>
		<values>var status = -1;&#xD;&#xA;&#xD;&#xA;&#x9;var views = RMoTfindElement(uiobject);&#xD;&#xA;&#xD;&#xA;&#x9;// if one and only one object found - means that everything is allright&#xD;&#xA;&#x9;if (views &amp;&amp; (views.length &gt;= 1)) {&#xD;&#xA;&#x9;&#x9;foundObject = views[0];&#xD;&#xA;&#x9;&#x9;if (views.length == 1) {&#xD;&#xA;&#x9;&#x9;&#x9;status = RMOT_SUCCESS;&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTDebug, &quot;---&gt; object &quot; + domainManager.getProxy(foundObject).getProperty(WebGuiConstants.TAGNAME_PROP) + &quot; found after &quot; + nbAttempts + &quot; attempt(s)&quot;);&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;status = RMOT_SUCCESS;&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTDebug, &quot;---&gt; &quot; + views.length + &quot; objects found after &quot; + nbAttempts + &quot; attempt(s)&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (reveal == true) {&#xD;&#xA;&#x9;&#x9;&#x9;rmotRectangle = new RMoTRectangle(foundObject);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;LoggerService.logFinderStatus(status, nbAttempts, views.length);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// if run out of the time&#xD;&#xA;&#x9;} else if (((new Date()).getTime() &gt; endOfResearch)) {&#xD;&#xA;&#x9;&#x9;status = RMOT_FAILURE;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTDebug, &quot;---&gt; object NOT found after &quot; + nbAttempts + &quot; attempt(s)&quot;);&#xD;&#xA;&#x9;&#x9;LoggerService.logFinderStatus(status, nbAttempts, 0);&#xD;&#xA;&#x9;} else</values>
		<values> {&#xD;&#xA;&#x9;&#x9;rmotTimeout = setTimeout(function(){ RMoTRepeatedfindElement(uiobject, reveal, period); }, period);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTdynamicFinding(strObj, timeout, period, reveal) {&#xD;&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTdynamicFinding &apos; + RMOT_VERSION + &apos; reveal=&apos; + reveal + &apos; with &apos; + jsUtil.getVersions() + &apos; json string: &apos;+ strObj);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;domainManager.init();&#xD;&#xA;&#x9;&#x9;endOfResearch = (new Date()).getTime() + timeout;&#xD;&#xA;&#x9;&#x9;var arg=eval(&apos;(&apos; + strObj + &apos;)&apos;);&#xD;&#xA;&#x9;&#x9;nbAttempts = 0;&#xD;&#xA;&#x9;&#x9;if (rmotTimeout != null) {&#xD;&#xA;&#x9;&#x9;&#x9;// In case we have two concurrent dynamic findings, because we were looking for some web element while a native dialog was open&#xD;&#xA;&#x9;&#x9;&#x9;// If a native dialog is open, the mobile web view is no longer running the javascript; the native code will timeout and go on with&#xD;&#xA;&#x9;&#x9;&#x9;// further steps but this lost dynamic finding will actually start when the webview is focused again; hence the concurrency&#xD;&#xA;&#x9;&#x9;&#x9;clearTimeout(rmotTimeout);&#xD;&#xA;&#x9;&#x9;&#x9;rmotTimeout = null;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;RMoTRepeatedfindElement(arg, reveal, period);&#xD;&#xA;&#xD;&#xA;&#x9;} </values>
		<values>catch (e) {&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(RMOT_ERROR, e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM and/or HCL&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2018, 2019. All Rights Reserved. &#xD;&#xA; *  (C) Copyright HCL Technologies Ltd. 2018, 2019. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * select objects with a property compliant with the reference&#xD;&#xA; */&#xD;&#xA;function RMoTselectCandidateswithSimilarIdentifier(candidates, identifier) {&#xD;&#xA;&#x9;if (identifier != null) {&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var idTrim = jsUtil.trimAndFormat(&quot;TString&quot;, identifier.parameter.value);&#xD;&#xA;&#x9;&#x9;&#x9;var valTrim = jsUtil.trimAndFormat(identifier.parameter.type, RMoTgetIdentifiedByValue(candidates[i].candidate, identifier));&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var score = 0;&#xD;&#xA;&#x9;&#x9;&#x9;if (identifier.parameter.type == &quot;TString&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;score = jsUtil.computeStringSimila</values>
		<values>rity(idTrim, valTrim);&#xD;&#xA;&#x9;&#x9;&#x9;} else if (identifier.operator == undefined) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;score = ((idTrim != &quot;&quot;) &amp;&amp; (idTrim == valTrim)) ? 10 : 0;&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;score = jsUtil.applySimpleOperator(valTrim, idTrim, identifier.operator) ? 10 : 0;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;candidates[i].score += score;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * select objects with a classname compliant with the reference&#xD;&#xA; */&#xD;&#xA;function RMoTcomputeClassWeigth(candidates, className, minScore) {&#xD;&#xA;&#x9;if (className != null) {&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var idTrim = jsUtil.trimAndFormat(&quot;TString&quot;, className);&#xD;&#xA;&#x9;&#x9;&#x9;var valTrim = jsUtil.trimAndFormat(&quot;TString&quot;, domainManager.getProxy(candidates[i].candidate).getProperty(&quot;class&quot;));&#xD;&#xA;&#x9;&#x9;&#x9;if (candidates[i].score &gt;= minScore)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;candidates[i].score += jsUtil.computeStringSimilarity(idTrim, valTrim);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * select objects with a xPath compliant with the reference&#xD;&#xA; */&#xD;&#xA;function RMoTcomputeClassXPath(candidates, xpath, minScore) {&#xD;&#xA;&#x9;if (xpath != null) {&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; candidates.le</values>
		<values>ngth; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;var idTrim = jsUtil.trimAndFormat(&quot;TString&quot;, xpath);&#xD;&#xA;&#x9;&#x9;&#x9;var valTrim = jsUtil.trimAndFormat(&quot;TString&quot;, jsUtil.getXPath(candidates[i].candidate));&#xD;&#xA;&#x9;&#x9;&#x9;if (candidates[i].score &gt;= minScore)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;candidates[i].score += jsUtil.computeStringSimilarity(idTrim, valTrim);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * select objects with a type compliant with the reference&#xD;&#xA; */&#xD;&#xA;function RMoTselectCandidateswithSimilarType(candidates, typename) {&#xD;&#xA;&#x9;for (var i = 0; i &lt; candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;if (RMoTisCompatibleWith(candidates[i].candidate, typename)) {&#xD;&#xA;&#x9;&#x9;&#x9;candidates[i].score += 10;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * compute the &quot;position weight&quot; of first candidates&#xD;&#xA; * the more an object is close to (x,y) the more the weight is high&#xD;&#xA; */&#xD;&#xA;function RMoTcomputeLocationWeigth(candidates, x, y) {&#xD;&#xA;&#x9;var MaxX = 500;&#xD;&#xA;&#x9;var MaxY = 300;&#xD;&#xA;&#x9;var MaxH = Math.sqrt((MaxX * MaxX) + (MaxY * MaxY));&#xD;&#xA;&#xD;&#xA;&#x9;var refScore = candidates[0].score;&#xD;&#xA;&#x9;for (var i = 0; refScore == candidates[i].score; i++) {&#xD;&#xA;&#x9;&#x9;var DeltaX = Math.abs(RMoTgetX(candidates[i</values>
		<values>].candidate) - x);&#xD;&#xA;&#x9;&#x9;var DeltaY = Math.abs(RMoTgetY(candidates[i].candidate) - y);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;var W = Math.sqrt((DeltaX * DeltaX) + (DeltaY * DeltaY));&#xD;&#xA;&#x9;&#x9;W = (W &lt; MaxH) ? (10 - ((10 * W) / MaxH)) : 0;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;candidates[i].score += Math.round(W);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Select reachable objects not too far from the reference&#xD;&#xA; */&#xD;&#xA;function RMoTselectReachableCandidates(candidates, elem, x, y) {&#xD;&#xA;&#x9;var proxy = domainManager.getProxy(elem);&#xD;&#xA;&#xD;&#xA;&#x9;if (elem.nodeType == window.Node.ELEMENT_NODE) {&#xD;&#xA;&#x9;&#x9;var visible = proxy.isVisible();&#xD;&#xA;&#x9;&#x9;if (!visible.visibility &amp;&amp; visible.propagation || proxy.isWidgetChild) return;&#xD;&#xA;&#x9;&#x9;if (visible.reachable) {&#xD;&#xA;&#x9;&#x9;&#x9;var record = {candidate: elem, score: 0};&#xD;&#xA;&#x9;&#x9;&#x9;candidates.push(record);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (proxy.isContainer()) {&#xD;&#xA;&#x9;&#x9;if (isFrameElement(elem) &amp;&amp; elem.contentDocument) { // 37668&#xD;&#xA;&#x9;&#x9;&#x9;jsUtil.setOwnerDocumentCoordinates(elem);&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;elem = elem.contentDocument || elem.contentWindow.document;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// loop on children&#xD;&#xA;&#x9;&#x9;var children = new Array();&#xD;&#xA;&#x9;&#x9;if ((elem.shadowRoot != null) &amp;&amp; (elem.</values>
		<values>shadowRoot.hasChildNodes())) {&#xD;&#xA;&#x9;&#x9;&#x9;for (var i0 = 0; i0 &lt; elem.shadowRoot.childNodes.length; i0++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;children.push(elem.shadowRoot.childNodes[i0]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (elem.hasChildNodes()) {&#xD;&#xA;&#x9;&#x9;&#x9;for (var i1 = 0; i1 &lt; elem.childNodes.length; i1++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;children.push(elem.childNodes[i1]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;RMoTselectReachableCandidates(candidates, children[i], x, y);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * DEBUG&#xD;&#xA; */&#xD;&#xA;function RMoTTraceTab(candidates) {&#xD;&#xA;&#x9;LoggerService.logMsg(&quot;--&gt; RMoTTraceTab&quot;);&#xD;&#xA;&#x9;candidates.sort(function (a, b) { return b.score - a.score; });&#xD;&#xA;&#x9;var _CINQ = 6;&#xD;&#xA;&#x9;var _rtwMAX = (candidates.length &lt; _CINQ) ? candidates.length : _CINQ;&#xD;&#xA;&#x9;for (var i = 0; i &lt; _rtwMAX; i++) {&#xD;&#xA;&#x9;&#x9;var DeltaX = Math.abs(RMoTgetX(candidates[i].candidate));&#xD;&#xA;&#x9;&#x9;var DeltaY = Math.abs(RMoTgetY(candidates[i].candidate));&#xD;&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;    &quot; + i + &quot; tagname = html.&quot; + domainManager.getProxy(candidates[i].candidate).getProxyName() + &quot; x = &quot; + DeltaX + &quot;, y = &quot; + DeltaY + &quot;, score = &quot;</values>
		<values> + candidates[i].score);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Seek for an object similar to an &quot;uiobject&quot; with the properties &quot;elemProps&quot;&#xD;&#xA; */&#xD;&#xA;function RMoTfindSimilarElement(uiobject, elemProps) {&#xD;&#xA;&#x9;RMOT_GuidedHealing = true;&#xD;&#xA;&#x9;var ret = new Array();&#xD;&#xA;&#x9;var candidates = new Array();&#xD;&#xA;&#xD;&#xA;&#x9;if (typeof uiobject !== &apos;undefined&apos;) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;var mainDoc = (jsUtil.isDesktop()) ? jsUtil.getMainDocument() : document;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// Select reachable objects&#xD;&#xA;&#x9;&#x9;&#x9;var children = new Array();&#xD;&#xA;&#x9;&#x9;&#x9;if ((mainDoc.shadowRoot != null) &amp;&amp; (mainDoc.shadowRoot.hasChildNodes())) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i0 = 0; i0 &lt; mainDoc.shadowRoot.childNodes.length; i0++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;children.push(mainDoc.shadowRoot.childNodes[i0]);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if (mainDoc.hasChildNodes()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i1 = 0; i1 &lt; mainDoc.childNodes.length; i1++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;children.push(mainDoc.childNodes[i1]);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;for (var i = 0; i &lt; children.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTselectReachableCandidates(candidates, children[i]);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// compute score according tag, class, xpath and identifyBy&#xD;&#xA;&#x9;</values>
		<values>&#x9;&#x9;RMoTselectCandidateswithSimilarType(candidates, uiobject.type);&#xD;&#xA;&#x9;&#x9;&#x9;RMoTselectCandidateswithSimilarIdentifier(candidates, uiobject.identifier);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// at least MANDATORY_SCORE is required&#xD;&#xA;&#x9;&#x9;&#x9;var MANDATORY_SCORE = 9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if (typeof elemProps != &apos;undefined&apos;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTcomputeClassWeigth(candidates, elemProps.class, MANDATORY_SCORE);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTcomputeClassXPath(candidates, elemProps.xpathProp, MANDATORY_SCORE);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// sort candidates depending on the score&#xD;&#xA;&#x9;&#x9;&#x9;candidates.sort(function (a, b) { return b.score - a.score; });&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// compute a weight depending on the position only if there are several candidates with the same weight&#xD;&#xA;&#x9;&#x9;&#x9;if ((typeof elemProps != &apos;undefined&apos;) &amp;&amp; (candidates.length &gt; 1) &amp;&amp; (candidates[0].score &gt; MANDATORY_SCORE) &amp;&amp; (candidates[0].score == candidates[1].score)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;RMoTcomputeLocationWeigth(candidates, elemProps.Geometry.x, elemProps.Geometry.y);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// sort again&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;candidates.sort(function (a, b) { return b.score - a.score; });&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// push best candidate</values>
		<values>s into the result tab&#xD;&#xA;&#x9;&#x9;&#x9;if ((candidates.length &gt; 0) &amp;&amp; (candidates[0].score &gt; MANDATORY_SCORE)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;var winner = candidates[0].score;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;for (var i = 0; i &lt; candidates.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (candidates[i].score == winner) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ret.push(candidates[i].candidate);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;} catch(err) {&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;RMoTfindSimilarElement() raised &quot; + err);&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;if (candidates.length &gt; 0)&#xD;&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;RMoTfindSimilarElement() found &quot; + ret.length + &quot; candidate with a score of &quot; + candidates[0].score);&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;RMoTfindSimilarElement() found 0 candidate&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA; *&#xD;&#xA; *&#x9;Licensed Materials - Property of IBM&#xD;&#xA; *&#xD;&#xA; *&#x9;IBM Rational Mobile Test&#xD;&#xA; *&#xD;&#xA; *&#x9;(C) Copyright IBM Corporation 2014. All Rights Reserved. &#xD;&#xA; *&#xD;&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:  &#xD;&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xD;&#xA; *&#x9;Schedule Contract with IBM Corp. &#xD;&#xA; *&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;/* ------------------------------------ */&#xD;&#xA;/*  V E R I F I</values>
		<values> C A T I O N   P O I N T */&#xD;&#xA;/* ------------------------------------ */&#xD;&#xA;&#xD;&#xA;var LoggerService = {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;logFinderStatus: function(status, nbAttempts, nbObjs) {&#xD;&#xA;&#x9;&#x9;&#x9;var jsonObj = new Object();&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.action = &quot;RMoTexecuteWebAction&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.status = status;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.nbAttempts = nbAttempts;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.nbObjs = nbObjs;&#xD;&#xA;&#x9;&#x9;&#x9;prompt(&quot;RMOTPLAYBACK &quot; + jsUtil.stringify(jsonObj), &quot;&quot;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;logStatus: function(status, msg) {&#xD;&#xA;&#x9;&#x9;&#x9;var jsonObj = new Object();&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.action = &quot;RMoTlogStatus&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.status = status;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.msg = msg;&#xD;&#xA;&#x9;&#x9;&#x9;prompt(&quot;RMOTPLAYBACK &quot; + jsUtil.stringify(jsonObj), &quot;&quot;);&#xD;&#xA;&#x9;&#x9;},&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;/* level in { Fatal=0, Error=1, Warning=2, Info=3, Debug=4, Trace=5 } */&#xD;&#xA;&#x9;&#x9;logMsg: function(level, str) {&#xD;&#xA;&#x9;&#x9;&#x9;var jsonObj = new Object();&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.action = &quot;RMoTlog&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.level = level;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.msg = str;&#xD;&#xA;&#x9;&#x9;&#x9;prompt(&quot;RMOTPLAYBACK &quot; + jsUtil.stringify(jsonObj), &quot;&quot;);&#xD;&#xA;&#x9;&#x9;},&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;logE2EMsg: function(url , startTimeStamp, endTimeStamp){&#xD;&#xA;&#x9;&#x9;&#x9;var jsonObj = new Object();&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj</values>
		<values>.action = &quot;RMoTE2ELog&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.url = url;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.starttimestamp = startTimeStamp;&#xD;&#xA;&#x9;&#x9;&#x9;jsonObj.stoptimestamp = endTimeStamp;&#xD;&#xA;&#x9;&#x9;&#x9;prompt(&quot;RMOTPLAYBACK &quot; + jsUtil.stringify(jsonObj), &quot;&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTexecuteSimpleVP(vp) {&#xD;&#xA;&#x9;var ret = { status: false, msg: &quot;&quot; };&#xD;&#xA;&#xD;&#xA;&#x9;var vpVal = jsUtil.trimAndFormat(&quot;TString&quot;, vp.parameter.value);&#xD;&#xA;&#x9;var foundVal = RMoTgetIdentifiedByValue(foundObject, vp.parameter);&#xD;&#xA;&#x9;var val = jsUtil.trimAndFormat(vp.parameter.type, foundVal);&#xD;&#xA;&#x9;ret.status = jsUtil.applySimpleOperator(val, vpVal, vp.operator);&#xD;&#xA;&#xD;&#xA;&#x9;// if the property belongs to an array we could have to remove a &quot;px&quot; suffix&#xD;&#xA;&#x9;if ((ret.status == false) &amp;&amp; (vp.parameter.type == &apos;TString&apos;)) {&#xD;&#xA;&#x9;&#x9;val = jsUtil.trimAndFormat(&apos;TFloat&apos;, foundVal);&#xD;&#xA;&#x9;&#x9;if (jsUtil.applySimpleOperator(val, vpVal, vp.operator)) {&#xD;&#xA;&#x9;&#x9;&#x9;ret.status = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// Custom Xpath, try to find a matching element&#xD;&#xA;&#x9;&#x9;if (vp.parameter.name == WebGuiConstants.XPATH_PROP) {&#xD;&#xA;&#x9;&#x9;&#x9;var mainDoc = (jsUtil.isDesktop()) ? jsUtil.getMainDocument() : doc</values>
		<values>ument;&#xD;&#xA;&#x9;&#x9;&#x9;if (RMoTfindMatchingXpath(mainDoc, vp.parameter.value) != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.status = true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;if (!ret.status) {&#xD;&#xA;&#x9;&#x9;ret.status = RMoTisElemOKWithDeprecatedId(foundObject, vp, vpVal);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;var name = (vp.parameter.name == WebGuiConstants.XPATH_PROP) ? vp.parameter.name.replace(&quot;Prop&quot;, &quot;&quot; ) : vp.parameter.name;&#xD;&#xA;&#x9;ret.msg = &quot;[&quot; + name + &quot;: &quot; + val + &quot;]&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function RMoTexecuteLogicalVP(vp) {&#xD;&#xA;&#x9;var ret = { status: true, msg: &quot;&quot; };&#xD;&#xA;&#xD;&#xA;&#x9;var sz = vp.operands.length;&#xD;&#xA;&#x9;var res = new Array;&#xD;&#xA;&#x9;for (var i = 0; i &lt; sz; i++) {&#xD;&#xA;&#x9;&#x9;var vpRes = RMoTexecuteVPOnce(vp.operands[i]);&#xD;&#xA;&#x9;&#x9;res.push(vpRes.status);&#xD;&#xA;&#x9;&#x9;ret.msg += vpRes.msg + &quot; &quot;;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;var op = vp.operator;&#xD;&#xA;&#xD;&#xA;&#x9;switch (op) {&#xD;&#xA;&#x9;case &apos;TAnd&apos;:&#xD;&#xA;&#x9;&#x9;ret.status = res[0];&#xD;&#xA;&#x9;&#x9;for (var i = 1; i &lt; res.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;ret.status = ret.status &amp;&amp; res[i];&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;TOr&apos;:&#xD;&#xA;&#x9;&#x9;ret.status = res[0];&#xD;&#xA;&#x9;&#x9;for (var i = 1; i &lt; res.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;ret.status = ret.status || res[i];&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;TNot&apos;:&#xD;&#xA;&#x9;&#x9;ret.stat</values>
		<values>us = ( ! res[0]);&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;TNone&apos;:&#xD;&#xA;&#x9;&#x9;// TODO: Should be removed: this one cannot be selected from the test editor&#xD;&#xA;&#x9;&#x9;ret.status = true;&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; res.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;if (res[i] == true) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ret.status = false;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;case &apos;TXor&apos;:  // exactly one&#xD;&#xA;&#x9;&#x9;ret.status = false;&#xD;&#xA;&#x9;&#x9;nbFailure = 0;&#xD;&#xA;&#x9;&#x9;for (var i = 0; i &lt; res.length; i++) {&#xD;&#xA;&#x9;&#x9;&#x9;if (res[i] == false) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;nbFailure++;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (nbFailure == res.length-1) {&#xD;&#xA;&#x9;&#x9;&#x9;ret.status = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;default:&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return ret;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;var rmotVPTimeout;&#xD;&#xA;function RMoTexecuteVP(expression, timeout, period) {&#xD;&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTexecuteVP(&apos;+ expression +&apos;)&apos;);&#xD;&#xA;&#x9;if (typeof(timeout) == &apos;undefined&apos;) timeout = 5000;&#xD;&#xA;&#x9;if (typeof(period) == &apos;undefined&apos;) period = 500;&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;if (rmotRectangle != null)&#xD;&#xA;&#x9;&#x9;&#x9;rmotRectangle.removeRectangle();&#xD;&#xA;&#x9;&#x9;var vpStatus;&#xD;&#xA;&#x9;&#x9;if (foundObject != null) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;var endOfVerification = (new Date()).getTime() + timeout - period;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (rmotVPTimeout !=</values>
		<values> null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;clearTimeout(rmotVPTimeout);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;rmotVPTimeout = null;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;RMoTRetryExecuteVP(expression, endOfVerification, period);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(RMOT_ERROR, e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTRetryExecuteVP (expression, endOfVerification, period) {&#xD;&#xA;&#x9;var devExpr = eval(&apos;(&apos; + expression + &apos;)&apos;); /* expression contains a JSON of a DeviceExpression */&#xD;&#xA;&#x9;var vpStatus = RMoTexecuteVPOnce(devExpr);&#xD;&#xA;&#x9;if (vpStatus) {&#xD;&#xA;&#x9;&#x9;if (vpStatus.status) {&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logStatus(RMOT_SUCCESS, vpStatus.msg);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else if (((new Date()).getTime() &gt; endOfVerification)) {&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logStatus(RMOT_FAILURE, vpStatus.msg);&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;rmotVPTimeout = setTimeout(function(){ RMoTRetryExecuteVP(expression, endOfVerification, period); }, period);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTexecuteVPOnce(devExpr) {&#xD;&#xA;&#x9;var vpStatus;&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;if (devExpr.declaredClass == &quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceSimpleExpression&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;vpStatus = RMoTexecuteSimpleV</values>
		<values>P(devExpr);&#xD;&#xA;&#x9;&#x9;} else if (devExpr.declaredClass == &quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceLogicalExpression&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;vpStatus = RMoTexecuteLogicalVP(devExpr);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(RMOT_ERROR, e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return vpStatus;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* --------------------------------------- */&#xD;&#xA;/*  V A R I A B L E    A S S I G N M E N T */&#xD;&#xA;/* --------------------------------------- */&#xD;&#xA;&#xD;&#xA;function RMoTexecuteVarAssignment(property) {&#xD;&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTexecuteVarAssignment(&apos;+ property +&apos;)&apos;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;if (rmotRectangle != null)&#xD;&#xA;&#x9;&#x9;&#x9;rmotRectangle.removeRectangle();&#xD;&#xA;&#x9;&#x9;var retStatus = RMOT_FAILURE;&#xD;&#xA;&#x9;&#x9;var val;&#xD;&#xA;&#x9;&#x9;if (foundObject &amp;&amp; property) {&#xD;&#xA;&#x9;&#x9;&#x9;val = domainManager.getProxy(foundObject).getProperty(property);&#xD;&#xA;&#x9;&#x9;&#x9;if (val != null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(retStatus, val);&#xD;&#xA;&#xD;&#xA;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(RMOT_ERROR, e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;/* ---------------------------------- */&#xD;&#xA;/* E2E Listeners     </values>
		<values>                 */&#xD;&#xA;/* -----------------------------------*/&#xD;&#xA;&#xD;&#xA;function collectPageLoadTiming(){&#xD;&#xA;&#x9;if(window){&#xD;&#xA;        if(window.performance){&#xD;&#xA;             var perfData = window.performance.timing;&#xD;&#xA;             var pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;&#xD;&#xA;             LoggerService.logE2EMsg(&quot;E2E Page Load&quot; , perfData.navigationStart, perfData.loadEventEnd);&#xD;&#xA;             // Resource Timing - looks like it is not yet supported on 4.x, tried on 4.3, could be added later&#xD;&#xA;            /* var resEntries = window.performance.getEntriesByType(&quot;resource&quot;);&#xD;&#xA;             var i=0;&#xD;&#xA;             for(i=0;i&lt;resEntries.length;i++){&#xD;&#xA;            &#x9; var r0 = resEntries[i];&#xD;&#xA;            &#x9; //var resLoadtime = r0.duration;&#xD;&#xA;                 var resTime = r0.responseEnd - r0.requestStart;&#xD;&#xA;                 var resName = r0.name;&#xD;&#xA;                 LoggerService.logMsg(RMoTTrace, &apos;Resource name : &apos; + resName + &apos; :::: load time is  : &apos; + resTime);&#xD;&#xA;             }*/             &#xD;&#xA;        } else{&#xD;&#xA;      </values>
		<values>       LoggerService.logMsg(RMoTTrace, &apos;window.performance not supported : &apos; + window.performance);&#xD;&#xA;        }&#xD;&#xA;     } else{&#xD;&#xA;           LoggerService.logMsg(RMoTTrace, &apos;In RMoTexecuteAction : window = null&apos;);&#xD;&#xA;     }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Temp fix for 54305 until mPerf E2E is fully implemented on iOS&#xD;&#xA;var RMoTIOS = navigator.userAgent.indexOf(&apos;iPhone; &apos;) &gt;= 0 || navigator.userAgent.indexOf(&apos;iPad; &apos;) &gt;= 0;&#xD;&#xA;if (!RMoTIOS &amp;&amp; typeof e2eAjaxListener === &apos;undefined&apos; &amp;&amp; !jsUtil.isDesktop()) {&#xD;&#xA;    e2eAjaxListener = new Object();&#xD;&#xA;    if((e2eAjaxListener.tempOpen == null) || (e2eAjaxListener.tempOpen.toString().indexOf(&quot;e2eAjaxListener&quot;) &lt; 0)){&#xD;&#xA;           e2eAjaxListener.tempOpen = window.XMLHttpRequest.prototype.open;&#xD;&#xA;           window.XMLHttpRequest.prototype.open = function(a,b) {&#xD;&#xA;                    if (!a) var a=&apos;&apos;;&#xD;&#xA;                    if (!b) var b=&apos;&apos;;&#xD;&#xA;                    LoggerService.logMsg(RMoTTrace, &apos;XMLHttpRequest.prototype.open (&apos;+ a + &apos;,&apos; + b +&apos;)&apos;);                  &#xD;&#xA;                    e2eAjaxListener.method </values>
		<values>= a ; &#xD;&#xA;                    e2eAjaxListener.url = b; &#xD;&#xA;                    var startTime = (new Date()).getTime();&#xD;&#xA;                    //fill the send information for E2E log in the xmlhttprequest to be used for logging when response is received&#xD;&#xA;                    this.e2eReqURL = b;&#xD;&#xA;                    this.e2eStartTime = startTime;&#xD;&#xA;                    if(e2eAjaxListener.tempOpen){&#xD;&#xA;                          e2eAjaxListener.tempOpen.apply(this, arguments);&#xD;&#xA;                    }&#xD;&#xA;           }&#xD;&#xA;    }&#xD;&#xA;    if((e2eAjaxListener.tempSend == null) || (e2eAjaxListener.tempSend.toString().indexOf(&quot;e2eAjaxListener&quot;) &lt; 0)){&#xD;&#xA;           e2eAjaxListener.tempSend = window.XMLHttpRequest.prototype.send;&#xD;&#xA;           window.XMLHttpRequest.prototype.send = function() {&#xD;&#xA;               // Wrap onreadystaechange callback&#xD;&#xA;               var callback = this.onreadystatechange;&#xD;&#xA;               this.onreadystatechange = function() {            &#xD;&#xA;                    if (this.readyState == 4) {&#xD;&#xA;                           var </values>
		<values>endTime = (new Date()).getTime();&#xD;&#xA;                           LoggerService.logE2EMsg(this.e2eReqURL , this.e2eStartTime, endTime);&#xD;&#xA;                    }&#xD;&#xA;                    if (callback) callback.apply(this, arguments);&#xD;&#xA;               }&#xD;&#xA;               if(e2eAjaxListener.tempSend){&#xD;&#xA;                  e2eAjaxListener.tempSend.apply(this, arguments);&#xD;&#xA;               }&#xD;&#xA;           }&#xD;&#xA;    }      &#xD;&#xA;    // e2eAjaxListener.callback = function () {&#xD;&#xA;      // this.method :the ajax method used&#xD;&#xA;      // this.url    :the url of the requested script (including query string, if any) (urlencoded)&#xD;&#xA;      // this.data   :the data sent, if any ex: foo=bar&amp;a=b (urlencoded)  &#xD;&#xA;    //}     &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;window.print = function() {}; // 59114&#xD;&#xA;&#xD;&#xA;/* ------------------------------------ */&#xD;&#xA;/*   P E R F O R M      A C T I O N S   */&#xD;&#xA;/* ------------------------------------ */&#xD;&#xA;&#xD;&#xA;function __RMoTexecuteAction(strAction) {&#xD;&#xA;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTexecuteAction(&apos;+ strAction +&apos;)&apos;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;var retStatus;&#xD;&#xA;&#x9;&#x9;var action = e</values>
		<values>val(&apos;(&apos; + strAction + &apos;)&apos;);&#xD;&#xA;&#x9;&#x9;if (foundObject == null) {&#xD;&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTexecuteAction() with foundObject == null&apos;);&#xD;&#xA;&#x9;&#x9;&#x9;retStatus = RMOT_FAILURE;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;retStatus = domainManager.getProxy(foundObject).executeAction(action);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;var retMsg = (action &amp;&amp; action.type) ? action.type : &quot;&quot;;&#xD;&#xA;&#x9;&#x9;if (typeof action.message !== &apos;undefined&apos;) retMsg = action.message;&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(retStatus, retMsg);&#xD;&#xA;&#x9;} catch (e) {&#xD;&#xA;&#x9;&#x9;LoggerService.logMsg(RMoTTrace, &apos;RMoTexecuteAction() caught &apos; + e.message);&#xD;&#xA;&#x9;&#x9;LoggerService.logStatus(RMOT_ERROR, e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function RMoTexecuteAction(strAction) {&#xD;&#xA;&#x9;if((typeof populateE2ELogData !== &apos;undefined&apos;) &amp;&amp; populateE2ELogData){&#xD;&#xA;&#x9;&#x9;collectPageLoadTiming();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (rmotRectangle != null) rmotRectangle.removeRectangle();&#xD;&#xA;&#x9;setTimeout(__RMoTexecuteAction(strAction), 0);  // Could appear strange, please see defect 43908&#xD;&#xA;}&#xD;&#xA;var BROWSER_ZOOM_FACT = 1;&#xD;&#xA;var RMoTFrameOffsetLeft = 0;&#xD;&#xA;var RMoTFrameOffsetTop = 0;&#xD;&#xA;/*&#xA; *&#x9;Licensed Materials - P</values>
		<values>roperty of IBM&#xA; *&#xA; *&#x9;IBM Rational Mobile Test&#xA; *&#xA; *&#x9;(C) Copyright IBM Corporation 2014, 2016. All Rights Reserved.&#xA; *&#xA; *&#x9;Note to U.S. Government Users Restricted Rights:&#xA; *&#x9;Use, duplication or disclosure restricted by GSA ADP&#xA; *&#x9;Schedule Contract with IBM Corp.&#xA; *&#xA; */&#xA;//&#xA;var wgdebug = false;&#xA;domainManager.init();&#xA;var webDriverCallback;&#xA;var/* List&lt;Object&gt; */crossScriptIFrames = new Array();&#xA;&#xA;/**&#xA; * This object is is used to return values to the java callback. Use the functions in this object to return data back to java.&#xA; * @type {Object}&#xA; */&#xA;var theReturnObject = {&#xA;&#x9;/**&#xA;&#x9; * Do not use. private. (add closure ?)&#xA;&#x9; * @type {Object}&#xA;&#x9; */&#xA;&#x9;object : {&#xA;&#x9;&#x9;messageKeys : [],&#xA;&#x9;&#x9;traces : &quot;&quot;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Add a key value pair.&#xA;&#x9; * @param {String} key&#xA;&#x9; * @param {String} value&#xA;&#x9; */&#xA;&#x9;add : function(key, value) {&#xA;&#xA;&#x9;&#x9;this.object[key] = value;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Used by &quot;find&quot;&#xA;&#x9; * @param {boolean} found &quot;true&quot; if object is not found.&#xA;&#x9; */&#xA;&#x9;setObjectNotFound : function(found) {&#xA;&#xA;&#x9;&#x9;this.object.isObjectNotFound = found;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Used</values>
		<values> by &quot;find&quot;&#xA;&#x9; * @param {Object} element the elements that have been found.&#xA;&#x9; */&#xA;&#x9;setElements : function(element) {&#xA;&#x9;&#x9;if (browserDetails.name == &apos;Safari&apos;) element = null; // SafariDriver cyclic struture exception&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var isIFramed = (element &amp;&amp; element.ownerDocument != document);&#xA;&#x9;&#x9;if (!isIFramed) {&#xA;&#x9;&#x9;&#x9;this.object.elements = element;&#xA;&#x9;&#x9;}&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Set the response code&#xA;&#x9; * @param {Number} value RMOT_SUCCESS=1;RMOT_INCONCLUSIVE=2;RMOT_FAILURE=3;RMOT_ERROR=4;RMOT_FATAL=5; Check WebGuiLibBase.js&#xA;&#x9; */&#xA;&#x9;setResponseCode : function(value) {&#xA;&#xA;&#x9;&#x9;this.object.responseCode = value;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Message corresponding to the response code. Do not use. This was used to return vp and property values. Should deprecate/remove this.&#xA;&#x9; * @param {String} message&#xA;&#x9; */&#xA;&#x9;setMessage : function(message) {&#xA;&#xA;&#x9;&#x9;this.object.message = message;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Add a message key. The message will be retrieved from the property file and shown in the reports.&#xA;&#x9; * Add the new message to com.ibm.rational.test.lt.core.moeb\src\com\ibm\rational\tes</values>
		<values>t\lt\core\moeb\playback\Utils\Messages.properties&#xA;&#x9; * file, update the key in the com.ibm.rational.test.rtw.webgui.execution.playback.StatusMessage enum.&#xA;&#x9; * @param {String} messageKey Key corresponding to the message.&#xA;&#x9; */&#xA;&#x9;addMessageKey : function(messageKey) {&#xA;&#xA;&#x9;&#x9;this.object.messageKeys.push(messageKey);&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Helper method to setResponseCode and setMessage.&#xA;&#x9; * @param {Number} responseCode&#xA;&#x9; * @param {String} message&#xA;&#x9; */&#xA;&#x9;setMessageResponse : function(responseCode, message) {&#xA;&#xA;&#x9;&#x9;this.setResponseCode(responseCode);&#xA;&#x9;&#x9;this.setMessage(message);&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Do not use this. Use LoggerService.logMsg. LoggerService uses this internally and will format and add timestamps.&#xA;&#x9; * This will get added to the playback logs.&#xA;&#x9; * @param {String} str&#xA;&#x9; */&#xA;&#x9;addTrace : function(str) {&#xA;&#xA;&#x9;&#x9;var d = new Date();&#xA;&#x9;&#x9;var dateStr = getPrefixedString(d.getHours(), &quot;0&quot;, 2) + &quot;:&quot; + getPrefixedString(d.getMinutes(), &quot;0&quot;, 2) + &quot;:&quot;&#xA;&#x9;&#x9;&#x9;&#x9;+ getPrefixedString(d.getSeconds(), &quot;0&quot;, 2) + &quot;:&quot; + getPrefixedString(d.getMilliseconds(), &quot;0&quot;,</values>
		<values> 3);&#xA;&#x9;&#x9;this.object.traces += &quot;\n&quot; + dateStr + &quot; : &quot; + str;&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Set exception object. The exception message and stack trace will be logged. This is not shown in the reports.&#xA;&#x9; * @param {Exception} exception&#xA;&#x9; */&#xA;&#x9;setException : function(exception) {&#xA;&#xA;&#x9;&#x9;this.setMessageResponse(RMOT_FATAL, exception.message);&#xA;&#x9;&#x9;this.object.stacktrace = exception.stack;&#xA;&#x9;&#x9;//&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex:&quot;, exception.message);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex:&quot;, exception.stack);&#xA;&#x9;},&#xA;&#x9;/**&#xA;&#x9; * Returns the object with all the values that are set. Used by callback. Do not use.&#xA;&#x9; * @return {Object}&#xA;&#x9; */&#xA;&#x9;getObject : function() {&#xA;&#xA;&#x9;&#x9;return this.object;&#xA;&#x9;},&#xA;&#x9;setCrossScriptingIframes : function(crossScriptIFrames) {&#xA;&#xA;&#x9;&#x9;this.object.crossScriptIFrames = crossScriptIFrames;&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Found Cross Scripting IFrames/Frames : &quot;, crossScriptIFrames);&#xA;&#x9;}&#xA;};&#xA;&#xA;function getPrefixedString(str, prefix, len) {&#xA;&#xA;&#x9;var retstr = str.toString();&#xA;&#x9;if (retstr.length &lt; len) {&#xA;&#x9;&#x9;len = (len - retstr.length);&#xA;&#x9;&#x9;for (var i = 0; i &lt; len; i++) {&#xA;&#x9;&#x9;&#x9;re</values>
		<values>tstr = prefix + retstr;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return retstr;&#xA;}&#xA;&#xA;function getFoundObject(inputObj, object) {&#xA;&#xA;&#x9;var mainDoc = jsUtil.getMainDocument();&#xA;&#x9;var revealDuringAction = inputObj.revealDuringAction;&#xA;&#x9;if (mainDoc &amp;&amp; mainDoc.rmotElement &amp;&amp; mainDoc.stepId &amp;&amp; mainDoc.stepId == inputObj.stepId) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Getting found object from doc:&quot;, mainDoc.rmotElement);&#xA;&#x9;&#x9;// revealDuringAction value is set only during RFT script playback&#xA;&#x9;&#x9;if(revealDuringAction == true){&#xA;&#x9;&#x9;&#x9;highlightElement(mainDoc.rmotElement, inputObj.revealDuration);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return mainDoc.rmotElement;&#xA;&#x9;}&#xA;&#x9;else if (inputObj.wgXpath != null &amp;&amp; !jsUtil.contains(inputObj.wgXpath,&quot;elementIndex:&quot;)) {&#xA;&#x9;&#x9;return findElementByWgXpath(inputObj.wgXpath);&#xA;&#x9;}&#xA;&#x9;else if (object != null) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Using found object from args:&quot;, object);&#xA;&#x9;&#x9;highlightElement(object, inputObj.revealDuration);&#xA;&#x9;&#x9;addFoundObjectProperties(object, 1);&#xA;&#x9;&#x9;return object;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;var views = findAndHighlight(inputObj);&#xA;&#x9;&#x9;var found;&#xA;&#x9;&#x9;if (inputObj.wgXpath != null &amp;&amp;  jsUtil</values>
		<values>.contains(inputObj.wgXpath,&quot;elementIndex:&quot;)){&#xA;&#x9;&#x9;&#x9;found = returnFindStatusForImage (views);&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;found = returnFindStatus (views);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return found;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA;function getElementCoordinates(element) {&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;var coords = domainManager.getProxy(element).getCoordinates();&#xA;&#x9;&#x9;var mainDocument = jsUtil.getMainDocument();&#xA;&#x9;&#x9;var border = (window.outerWidth - window.innerWidth) / 2;&#xA;&#x9;&#x9;var ratio = window.devicePixelRatio ? window.devicePixelRatio : 1;&#xA;&#x9;&#x9;if (browserDetails.name === &apos;Safari&apos;) {&#xA;&#x9;&#x9;&#x9;ratio /= window.innerWidth / window.outerWidth; // TP-59605&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return {&#xA;&#x9;&#x9;&#x9;&quot;pxr&quot; : ratio,&#xA;&#x9;&#x9;&#x9;&quot;x&quot; : coords.left * ratio,&#xA;&#x9;&#x9;&#x9;&quot;y&quot; : coords.top * ratio,&#xA;&#x9;&#x9;&#x9;&quot;w&quot; : (coords.right - coords.left) * ratio,&#xA;&#x9;&#x9;&#x9;&quot;h&quot; : (coords.bottom - coords.top) * ratio,&#xA;&#x9;&#x9;&#x9;&quot;dx&quot; : Math.round(BROWSER_ZOOM_FACT * jsUtil.getMainDocLeft(mainDocument.defaultView)),&#xA;&#x9;&#x9;&#x9;&quot;dy&quot; : Math.round(BROWSER_ZOOM_FACT * jsUtil.getMainDocTop(mainDocument.defaultView)),&#xA;&#x9;&#x9;&#x9;&quot;cx&quot; : Math.round(window.screenX + border),&#xA;&#x9;&#x9;&#x9;&quot;cy&quot; : Math.round(window.screenY + (windo</values>
		<values>w.outerHeight - window.innerHeight) - border)&#xA;&#x9;&#x9;};&#xA;&#x9;}&#xA;&#x9;catch (exception) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex:&quot;, exception.message);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex:&quot;, exception.stack);&#xA;&#x9;}&#xA;}&#xA;&#xA;function addFoundObjectProperties(object, viewsLength) {&#xA;&#x9;var found = object;&#xA;&#x9;var isIFramed = (found.ownerDocument != document);&#xA;&#x9;theReturnObject.add(&quot;isIFramed&quot;, isIFramed);&#xA;&#x9;theReturnObject.add(&quot;elementCount&quot;, viewsLength);&#xA;&#x9;theReturnObject.add(&quot;bounds&quot;, JSON.stringify(getElementCoordinates(found)));&#xA;&#x9;theReturnObject.add(&quot;isTopWindow&quot;, (window.self == window.top));&#xA;&#x9;theReturnObject.setObjectNotFound(false);&#xA;}&#xA;&#xA;function returnFindStatus(views) {&#xA;&#x9;var found = null;&#xA;&#x9;if (!isEmpty(views)) {&#xA;&#x9;&#x9;found = views[0];&#xA;&#x9;&#x9;found.len = views.length;&#xA;&#x9;&#x9;addFoundObjectProperties(found, found.len);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;theReturnObject.setObjectNotFound(true);&#xA;&#x9;&#x9;theReturnObject.setResponseCode(RMOT_FAILURE);&#xA;&#x9;&#x9;theReturnObject.setCrossScriptingIframes(crossScriptIFrames);&#xA;&#x9;&#x9;theReturnObject.add(&quot;isTopWindow&quot;, (window.self == window.top));&#xA;&#x9;}&#xA;&#x9;return found;&#xA;}&#xA;&#xA;f</values>
		<values>unction returnFindStatusForImage(views) {&#xA;&#x9;var found = null;&#xA;&#x9;if (!isEmpty(views)) {&#xA;&#x9;&#x9;found = views[0];&#xA;&#x9;&#x9;addFoundObjectProperties(found, 1);&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;theReturnObject.setObjectNotFound(true);&#xA;&#x9;&#x9;theReturnObject.setResponseCode(RMOT_FAILURE);&#xA;&#x9;&#x9;theReturnObject.setCrossScriptingIframes(crossScriptIFrames);&#xA;&#x9;&#x9;theReturnObject.add(&quot;isTopWindow&quot;, (window.self == window.top));&#xA;&#x9;}&#xA;&#x9;return found;&#xA;}&#xA;&#xA;function removeHighlight() {&#xA;&#xA;&#x9;if (rmotRectangle != null) {&#xA;&#x9;&#x9;rmotRectangle.removeRectangle();&#xA;&#x9;}&#xA;}&#xA;&#xA;function highlightElement(firstElement, revealDuration) {&#xA;&#x9;if (rmotRectangle == null) {&#xA;&#x9;&#x9;rmotRectangle = new RMoTRectangle(firstElement);&#xA;&#x9;&#x9;setTimeout(function() {&#xA;&#x9;&#x9;&#x9;removeHighlight();&#xA;&#x9;&#x9;}, revealDuration);&#xA;&#x9;}&#xA;}&#xA;&#xA;function setCallback(callbackmethod) {&#xA;&#xA;&#x9;if (callbackmethod) {&#xA;&#x9;&#x9;webDriverCallback = function() {&#xA;&#xA;//&#x9;&#x9;&#x9;domainManager.deleteProxyCache();&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;Calling webdriver back&quot;);&#xA;&#x9;&#x9;&#x9;callbackmethod(theReturnObject.getObject());&#xA;&#x9;&#x9;};&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;webDriverCallback = function() {&#xA;&#xA;//&#x9;&#x9;&#x9;domainManager.de</values>
		<values>leteProxyCache();&#xA;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;No callback, no-op&quot;);&#xA;&#x9;&#x9;};&#xA;&#x9;}&#xA;}&#xA;&#xA;function setGlobalConfigs(inputObj) {&#xA;&#x9;if (inputObj.jsdebug) {&#xA;&#x9;&#x9;wgdebug = (inputObj.jsdebug == true);&#xA;&#x9;}&#xA;}&#xA;&#xA;function executeAction(input, object, callback) {&#xA;&#x9;&#xA;&#x9;if (!jsUtil.isDocReady()) return null; // Retry in a while...&#xA;&#x9;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;var action = inputObj.action;&#xA;&#x9;var dialogCallback = inputObj.dialogCallback;&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;LoggerService.logMsg(&quot;Execute action:&quot;, action.type);&#xA;&#x9;setCallback(callback);&#xA;&#x9;try {&#xA;&#x9;&#x9;var retStatus = RMOT_INCONCLUSIVE;&#xA;&#x9;&#x9;var found = getFoundObject(inputObj, object);&#xA;&#xA;&#x9;&#x9;if ((found == null || found.len &gt; 1) &amp;&amp; (inputObj.recordMode == true)) {&#xA;&#x9;&#x9;&#x9;// Guided Healing: Recovery mode&#xA;&#x9;&#x9;&#x9;inputObj.guidedHealing = true;&#xA;&#x9;&#x9;&#x9;var secondViews = findAndHighlight(inputObj);&#xA;&#x9;&#x9;&#x9;found = returnFindStatus(secondViews);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (found != null) {&#xA;&#x9;&#x9;&#x9;if (dialogCallback) {&#xA;&#x9;&#x9;&#x9;&#x9;overrideDialogs();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;RMOT_GuidedHealing = inputObj.recordMode; // allow to use rough string comparison for ac</values>
		<values>tion parameters&#xA;&#x9;&#x9;&#x9;retStatus = domainManager.getProxy(found).executeAction(action);&#xA;&#x9;&#x9;&#x9;switch (retStatus) {&#xA;&#x9;&#x9;&#x9;&#x9;case RMOT_SUCCESS:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (inputObj.guidedHealing == true) retStatus = RMOT_RECOVERY;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case RMOT_RECOVERY:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case RMOT_INCONCLUSIVE:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_FAILURE;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;default: // FATAL, ERROR, FAILURE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;theReturnObject.setElements(found);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;var retMsg = (action &amp;&amp; action.type) ? action.type : &quot;&quot;;&#xA;&#x9;&#x9;if (typeof action.message !== &quot;undefined&quot;) retMsg = action.message;&#xA;&#x9;&#x9;theReturnObject.setMessageResponse(retStatus, retMsg);&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;theReturnObject.setException(e);&#xA;&#x9;}&#xA;&#x9;webDriverCallback();&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function executeVP(input, object, callback) {&#xA;&#xA;&#x9;if (!jsUtil.isDocReady()) return null; // Retry in a while...&#xA;&#x9;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;var devExpr = inputObj.vpexpr;&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;LoggerService.logMsg(&quot;Execute VP:&quot;, devExpr);&#xA;&#x9;setCallback(callback);&#xA;&#x9;try {&#xA;&#x9;&#x9;var retSta</values>
		<values>tus = RMOT_INCONCLUSIVE;&#xA;&#x9;&#x9;foundObject = getFoundObject(inputObj, object);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if ((foundObject == null || foundObject.len &gt; 1) &amp;&amp; (inputObj.recordMode == true)) {&#xA;&#x9;&#x9;&#x9;// Guided Healing: Recovery mode&#xA;&#x9;&#x9;&#x9;inputObj.guidedHealing = true;&#xA;&#x9;&#x9;&#x9;var secondViews = findAndHighlight(inputObj);&#xA;&#x9;&#x9;&#x9;foundObject = returnFindStatus(secondViews);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (foundObject != null) {&#xA;&#x9;&#x9;&#x9;var vpstatus = RMoTexecuteVPOnce(devExpr);&#xA;&#x9;&#x9;&#x9;if (vpstatus) {&#xA;&#x9;&#x9;&#x9;&#x9;theReturnObject.add(inputObj.vpvalue, vpstatus.msg);&#xA;&#x9;&#x9;&#x9;&#x9;if (vpstatus.status) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (inputObj.guidedHealing == true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_RECOVERY;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_FAILURE;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;VP status missing&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_ERROR;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}else if(devExpr.parameter.name == WebGuiConstants.EXIST_PROP){&#xA;&#x9;&#x9;&#x9;theReturnObject.add(inputObj.vpvalue, &quot;exist: true&quot;);&#xA;&#x9;&#x9;&#x9;var vpVal = jsUtil.trimAndFormat(devExpr.parameter.type, devExpr.parameter.value);&#xA;&#x9;&#x9;&#x9;var val = jsUtil.trimAndFormat(devEx</values>
		<values>pr.parameter.type, false);&#xA;&#x9;&#x9;&#x9;if(jsUtil.applySimpleOperator(val, vpVal, devExpr.operator)){&#xA;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;}else{&#xA;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_FAILURE;&#xA;&#x9;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;theReturnObject.setResponseCode(retStatus);&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;theReturnObject.setException(e);&#xA;&#x9;}&#xA;&#x9;LoggerService.logMsg(&quot;Execute VP returning:&quot;, theReturnObject.getObject());&#xA;&#x9;webDriverCallback();&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function getProperty(input, object, callback) {&#xA;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;var strProperty = inputObj.action;&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;setCallback(callback);&#xA;&#x9;LoggerService.logMsg(&quot;Get Property:&quot;, strProperty);&#xA;&#x9;try {&#xA;&#x9;&#x9;var retStatus = RMOT_INCONCLUSIVE;&#xA;&#x9;&#x9;if (strProperty) {&#xA;&#x9;&#x9;&#x9;var found = getFoundObject(inputObj, object);&#xA;&#xA;&#x9;&#x9;&#x9;if ((found == null || found.len &gt; 1) &amp;&amp; (inputObj.recordMode == true)) {&#xA;&#x9;&#x9;&#x9;&#x9;// Guided Healing: Recovery mode&#xA;&#x9;&#x9;&#x9;&#x9;inputObj.guidedHealing = true;&#xA;&#x9;&#x9;&#x9;&#x9;var secondViews = findAndHighlight(inputObj);&#xA;&#x9;&#x9;&#x9;&#x9;found = returnFindStatus(secondViews);&#xA;&#x9;&#x9;&#x9;}else if(found == null &amp;&amp; (i</values>
		<values>nputObj.action == WebGuiConstants.EXIST_PROP)){&#xA;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if (found != null) {&#xA;&#x9;&#x9;&#x9;&#x9;var val = domainManager.getProxy(found).getProperty(strProperty);&#xA;&#x9;&#x9;&#x9;&#x9;if (val != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;theReturnObject.add(inputObj.propvalue, val);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (inputObj.guidedHealing == true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_RECOVERY;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;theReturnObject.setMessage(&quot;strProperty null&quot;);&#xA;&#x9;&#x9;&#x9;retStatus = RMOT_ERROR;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;theReturnObject.setResponseCode(retStatus);&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;theReturnObject.setException(e);&#xA;&#x9;}&#xA;&#x9;LoggerService.logMsg(&quot;Get Property returning:&quot;, theReturnObject.getObject());&#xA;&#x9;webDriverCallback();&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function setElementInMainDocument(element) {&#xA;&#xA;&#x9;var listOfObjects = [];&#xA;&#x9;var i = 0;&#xA;&#x9;try {&#xA;&#x9;&#x9;if(element!=null) {&#xA;&#x9;&#x9;&#x9;var mainDoc = jsUtil.getMainDocument();&#xA;&#x9;&#x9;&#x9;mainDoc.rmotElement = element;&#xA;&#x9;&#x9;&#x9;mainDoc.rmotElementXpath = jsUtil.getXPath(element);&#xA;&#x9;&#x9;&#x9;mainDoc.rmotElementframe = element.ownerDocument.defaultView.</values>
		<values>frameElement;&#xA;&#x9;&#x9;&#x9;while(mainDoc.rmotElementframe!=null)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;listOfObjects[i] = jsUtil.getXPath(mainDoc.rmotElementframe);&#xA;&#x9;&#x9;&#x9;&#x9;mainDoc.rmotElementframe = mainDoc.rmotElementframe.ownerDocument.defaultView.frameElement;&#xA;&#x9;&#x9;&#x9;&#x9;i=i+1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;mainDoc.listOfObjects = listOfObjects;&#xA;&#x9;&#x9;&#x9;return {retVal:true};&#xA;&#x9;&#x9;}&#xA;&#x9;} catch(err){}&#xA;&#x9;return {retVal:false};&#xA;}&#xA;&#xA;function dynamicFind(input, callback) {&#xA;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;LoggerService.logMsg(&quot;Find:&quot;, input);&#xA;&#x9;try {&#xA;&#x9;&#x9;setCallback(callback);&#xA;&#x9;&#x9;var views = findAndHighlight(inputObj);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var retStatus = RMOT_SUCCESS;&#xA;&#x9;&#x9;if ((views === null || views.length &gt; 1 || views.length === 0) &amp;&amp; (inputObj.recordMode === true)) {&#xA;&#x9;&#x9;&#x9;// Guided Healing: Recovery mode&#xA;&#x9;&#x9;&#x9;inputObj.guidedHealing = true;&#xA;&#x9;&#x9;&#x9;retStatus = RMOT_RECOVERY;&#xA;&#x9;&#x9;&#x9;views = findAndHighlight(inputObj);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var firstElement = returnFindStatus(views);&#xA;&#x9;&#x9;if (firstElement != null) {&#xA;&#x9;&#x9;&#x9;var mainDoc = jsUtil.getMainDocument();&#xA;&#x9;&#x9;&#x9;setElementInMainDocument(firstElement);&#xA;&#x9;&#x9;&#x9;Logg</values>
		<values>erService.logMsg(&quot;Setting views on doc:&quot;, firstElement, inputObj.stepId);&#xA;&#x9;&#x9;&#x9;if (mainDoc) {&#xA;&#x9;&#x9;&#x9;&#x9;mainDoc.rmotElement = firstElement;&#xA;&#x9;&#x9;&#x9;&#x9;mainDoc.stepId = inputObj.stepId;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;theReturnObject.setElements(firstElement);&#xA;&#x9;&#x9;&#x9;theReturnObject.setResponseCode(retStatus);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;theReturnObject.setException(e);&#xA;&#x9;}&#xA;&#x9;LoggerService.logMsg(&quot;Find returning:&quot;, theReturnObject.getObject());&#xA;&#x9;webDriverCallback();&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function findImageCandidates(input) {&#xA;&#xA;&#x9;if (!jsUtil.isDocReady()) return null; // Retry in a while...&#xA;&#x9;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;LoggerService.logMsg(&quot;Find image candidates&quot;);&#xA;&#x9;try {&#xA;&#x9;&#x9;var candidates = new Array();&#xA;&#x9;&#x9;var mainDoc = jsUtil.getMainDocument();&#xA;&#x9;&#x9;var uiobject = inputObj.object;&#xA;&#x9;&#x9;var list = RMoTfindElement(uiobject);&#xA;&#x9;&#x9;if (inputObj.recordMode == true &amp;&amp; list.length === 0) {&#xA;&#x9;&#x9;&#x9;// Try to ignore the tagName&#xA;&#x9;&#x9;&#x9;var elemProps = eval(&apos;(&apos; + uiobject.propList + &apos;)&apos;);&#xA;&#x9;&#x9;&#x9;list = RMoTfindSimilarElement(uiobject, elemP</values>
		<values>rops);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;window.scroll(0,0);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for (var i = 0; i &lt; list.length; i++) {&#xA;&#x9;&#x9;&#x9;var candidate = list[i];&#xA;&#x9;&#x9;&#x9;var xpath = jsUtil.getXPath(candidate);&#xA;&#x9;&#x9;&#x9;candidate.setAttribute(&apos;wgXpath&apos;, xpath);&#xA;&#x9;&#x9;&#x9;candidates.push(JSON.stringify({ xpath: xpath, bounds: getElementCoordinates(candidate) }));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;theReturnObject.add(&quot;imageCandidates&quot;, candidates);&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;theReturnObject.setException(e);&#xA;&#x9;}&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function setImageCandidate(input) {&#xA;&#x9;&#xA;&#x9;var inputObj = JSON.parse(input);&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#x9;&#xA;&#x9;if (inputObj.wgXpath != null &amp;&amp;  !jsUtil.contains(inputObj.wgXpath,&quot;elementIndex:&quot;)){&#xA;&#x9;&#x9;var candidate = findElementByWgXpath(inputObj.wgXpath);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Set image candidate:&quot;, candidate);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;collectRecorderData(inputObj, new Array(candidate));&#xA;&#x9;&#x9;setElementInMainDocument(candidate);&#xA;&#x9;&#x9;addFoundObjectProperties(candidate, 1);&#xA;&#x9;&#x9;highlightElement(candidate, inputObj.revealDuration);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return theReturnObject.getObject();&#xA;}&#xA;&#xA;function findElementByWgXpath(wgXp</values>
		<values>ath) {&#xA;&#x9;return jsUtil.querySelector(document, &quot;[wgXpath=\&quot;&quot; + wgXpath + &quot;\&quot;]&quot;);&#xA;}&#xA;&#xA;function isInViewPort(element) {&#xA;&#xA;&#x9;var rect = element.getBoundingClientRect();&#xA;&#x9;return (rect &amp;&amp; jsUtil.isInViewPort(element, rect));&#xA;}&#xA;&#xA;function findAndHighlight(inputObj) {&#xA;&#xA;&#x9;var uiobject = inputObj.object;&#xA;&#x9;var reveal = inputObj.reveal;&#xA;&#x9;var revealDuration = inputObj.revealDuration;&#xA;&#x9;setGlobalConfigs(inputObj);&#xA;&#xA;&#x9;var views = null;&#xA;&#x9;if (inputObj.guidedHealing == true) {&#xA;&#x9;&#x9;var elemProps = eval(&apos;(&apos; + uiobject.propList + &apos;)&apos;);&#xA;&#x9;&#x9;views = RMoTfindSimilarElement(uiobject, elemProps);&#xA;&#x9;} else {&#xA;&#x9;&#x9;views = RMoTfindElement(uiobject);&#xA;&#x9;}&#xA;&#x9;if(inputObj.wgXpath != null){&#xA;&#x9;&#x9;var preText=&quot;elementIndex:&quot;;&#xA;&#x9;&#x9;var elemIndexInPath =  inputObj.wgXpath;&#xA;&#x9;&#x9;if(views != null &amp;&amp; views.length &gt; 1 &amp;&amp; jsUtil.contains(elemIndexInPath,preText) &amp;&amp; elemIndexInPath.substring(preText.length) != null &amp;&amp; elemIndexInPath.substring(preText.length) &gt;= 0){&#xA;&#x9;&#x9;&#x9;views.splice(0, 0, views[elemIndexInPath.substring(preText.length)]);&#xA;&#x9;&#x9;} &#xA;&#x9;}&#xA;&#xA;&#x9;if (!isEmpty(views)) {&#xA;&#x9;&#x9;var fi</values>
		<values>rstElement = views[0];&#xA;&#x9;&#x9;if ((firstElement != null) &amp;&amp; (typeof firstElement.getBoundingClientRect === &apos;function&apos;)) {&#xA;&#x9;&#x9;&#x9;theReturnObject.add(&quot;scrolled&quot;, !isInViewPort(firstElement));&#xA;&#x9;&#x9;&#x9;if (reveal == true) {&#xA;&#x9;&#x9;&#x9;&#x9;highlightElement(firstElement, revealDuration);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;views = null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;collectRecorderData(inputObj, views);&#xA;&#x9;&#xA;&#x9;LoggerService.logMsg(&quot;Find and Highlight returning:&quot;, (views != null ? views.length : views));&#xA;&#x9;return views;&#xA;}&#xA;&#xA;function collectRecorderData(inputObj, views) {&#xA;&#x9;&#xA;&#x9;if (inputObj.recordMode) {&#xA;&#x9;&#x9;var action = (typeof inputObj.action !== &apos;undefined&apos;) ? inputObj.action.type : &quot;&quot;;&#xA;&#x9;&#x9;var hierarchy = rmotHierarchy.getHierarchy();&#xA;&#x9;&#x9;var targetElement = (!isEmpty(views)) ? views[0] : document;&#xA;&#x9;&#x9;var jsonString = rmotRecorder.buildJsonStringDesktop(false, action, inputObj.object.type, targetElement, hierarchy, null, (new Date()).getTime());&#xA;&#x9;&#x9;theReturnObject.add(&quot;pageDataJson&quot;, jsonString);//TODO:COMPRESS THIS STRING.&#xA;&#x9;}&#xA;}&#xA;&#xA;function isEmpty(obj) {&#xA;&#x9;return (obj === null || obj.length ==</values>
		<values>= 0);&#xA;}&#xA;&#xA;function overrideDialogs() {&#xA;&#x9;try {&#xA;&#x9;&#x9;if (!window.originalAlert) {&#xA;&#x9;&#x9;&#x9;window.originalAlert = window.alert;&#xA;&#x9;&#x9;&#x9;window.alert = function(message) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;Dialog alert&quot;, message);&#xA;&#x9;&#x9;&#x9;&#x9;theReturnObject.add(&quot;dialog&quot;, true);&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logStatus(RMOT_SUCCESS, &quot;block-dialog&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;var val = this.originalAlert(message);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return val;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.message);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.stack);&#xA;&#x9;}&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;if (!window.originalConfirm) {&#xA;&#x9;&#x9;&#x9;window.originalConfirm = window.confirm;&#xA;&#x9;&#x9;&#x9;window.confirm = function(message) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;Dialog confirm&quot;, message);&#xA;&#x9;&#x9;&#x9;&#x9;theReturnObject.add(&quot;dialog&quot;, true);&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logStatus(RMOT_SUCCESS, &quot;block-dialog&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;var ok = this.originalConfirm(message);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return ok;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.message);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.stack);&#xA;&#x9;}&#xA;&#xA;&#x9;try {&#xA;&#x9;&#x9;if (!window.originalPrompt) {&#xA;&#x9;&#x9;&#x9;window.originalPrompt = window.prompt;&#xA;&#x9;&#x9;&#x9;wi</values>
		<values>ndow.prompt = function(message, input) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logMsg(&quot;Dialog prompt&quot;, message);&#xA;&#x9;&#x9;&#x9;&#x9;theReturnObject.add(&quot;dialog&quot;, true);&#xA;&#x9;&#x9;&#x9;&#x9;LoggerService.logStatus(RMOT_SUCCESS, &quot;block-dialog&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;var newinput = this.originalPrompt(message, input);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return newinput;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch (e) {&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.message);&#xA;&#x9;&#x9;LoggerService.logMsg(&quot;Ex : &quot; + e.stack);&#xA;&#x9;}&#xA;}&#xA;&#xA;// Override LoggerService to suit desktop needs.&#xA;LoggerService.logFinderStatus = function(status, nbAttempts, nbObjs) {&#xA;&#x9;// called by repeatedfindelement only, as of now not used by desktop&#xA;&#x9;LoggerService.logMsg(&quot;Log Finder Status (this should not be printed):&quot;, status, nbAttempts, nbObjs);&#xA;&#x9;webDriverCallback();&#xA;}&#xA;&#xA;LoggerService.logStatus = function(status, msg) {&#xA;&#xA;&#x9;theReturnObject.setMessageResponse(status, msg);&#xA;&#x9;LoggerService.logMsg(&quot;Log Status:&quot;, status, msg);&#xA;&#x9;webDriverCallback();&#xA;}&#xA;&#xA;var consoleLogOverriden = false;&#xA;function overrideConsoleLog() {&#xA;&#xA;&#x9;if (!consoleLogOverriden) {&#xA;&#x9;&#x9;console.log = function() {&#xA;&#x9;&#x9;&#x9;theReturnObj</values>
		<values>ect.addTrace(Array.prototype.join.call(arguments, &quot; &quot;));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;consoleLogOverriden = true;&#xA;&#x9;}&#xA;}&#xA;&#xA;LoggerService.logMsg = function() {&#xA;&#xA;&#x9;if (wgdebug) {&#xA;&#x9;&#x9;overrideConsoleLog();&#xA;&#x9;&#x9;// Overriding console.log to add traces to the &apos;thereturnobject&apos;&#xA;&#x9;&#x9;// Our proxies are attached to the dom and when a call to this method is made from the proxies,&#xA;&#x9;&#x9;// they are not logged, because the reference of the &apos;thereturnobject&apos; that the proxy has is an&#xA;&#x9;&#x9;// old one from the first call, when the proxy was created.&#xA;&#x9;&#x9;// Looks like its not just the proxy that gets attached/saved in the dom but, all the objects&#xA;&#x9;&#x9;// associated with it !!&#xA;&#x9;&#x9;// setting disableProxyAttachToElement=true should solve this problem.&#xA;&#x9;&#x9;console.log.apply(console, arguments);&#xA;&#x9;&#x9;// theReturnObject.addTrace(Array.prototype.join.call(arguments, &quot; &quot;));&#xA;&#x9;}&#xA;}&#xA;&#xA;LoggerService.logE2EMsg = function(url, startTimeStamp, endTimeStamp) {&#xA;&#xA;&#x9;// Desktop does not use this E2E&#xA;&#x9;LoggerService.logMsg(&quot;Log E2E Message:&quot;, startTimeStamp, endTimeStamp, url);&#xA;}&#xA;&#xD;&#xA;return executeActio</values>
		<values>n(arguments[0],arguments[1]);, args=[{&quot;revealDuration&quot;:200,&quot;reveal&quot;:true,&quot;jsdebug&quot;:false,&quot;stepId&quot;:&quot;A1EF443A061E5DA4EDEAE13263306436&quot;,&quot;action&quot;:{&quot;id&quot;:&quot;0&quot;,&quot;declaredClass&quot;:&quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceAction&quot;,&quot;type&quot;:&quot;oninput&quot;,&quot;parameters&quot;:[{&quot;name&quot;:&quot;newtext&quot;,&quot;id&quot;:&quot;1&quot;,&quot;declaredClass&quot;:&quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceParameter&quot;,&quot;type&quot;:&quot;TString&quot;,&quot;value&quot;:&quot;Test@2024&quot;}]},&quot;recordMode&quot;:false,&quot;object&quot;:{&quot;identifier&quot;:{&quot;parameter&quot;:{&quot;name&quot;:&quot;label&quot;,&quot;id&quot;:&quot;2&quot;,&quot;declaredClass&quot;:&quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceParameter&quot;,&quot;type&quot;:&quot;TString&quot;,&quot;value&quot;:&quot;Password&quot;},&quot;name&quot;:&quot;label&quot;,&quot;id&quot;:&quot;1&quot;,&quot;declaredClass&quot;:&quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceId&quot;,&quot;operator&quot;:&quot;TEquals&quot;},&quot;propList&quot;:&quot;{ \&quot;Coordinates$array$\&quot;: \&quot;top:424;left:713;bottom:508;right:1136\&quot;, \&quot;Geometry\&quot;: { \&quot;height\&quot;: 84, \&quot;width\&quot;: 423, \&quot;x\&quot;: 713, \&quot;y\&quot;: 424 }, \&quot;Style$array$\&quot;: \&quot;background-color:rgba(0, 0, 0, 0);background-repeat:repeat;color:</values>
		<values>rgb(255, 255, 255);font-family:\\\&quot;Netflix Sans\\\&quot;, \\\&quot;Helvetica Neue\\\&quot;, \\\&quot;Segoe UI\\\&quot;, Roboto, Ubuntu, sans-serif;font-size:16px;font-style:normal;font-weight:400;line-height:24px;margin-bottom:0px;margin-left:0px;margin-right:32px;margin-top:0px;opacity:1;padding-bottom:8px;padding-left:16px;padding-right:16px;padding-top:24px;text-align:left;text-decoration:none solid rgb(255, 255, 255);visibility:visible;z-index:auto;\&quot;, \&quot;autocomplete\&quot;: \&quot;password\&quot;, \&quot;background-color\&quot;: \&quot;00000000\&quot;, \&quot;background-repeat\&quot;: \&quot;repeat\&quot;, \&quot;bottom\&quot;: 508, \&quot;color\&quot;: \&quot;FFFFFFFF\&quot;, \&quot;content\&quot;: \&quot;\&quot;, \&quot;data-uia\&quot;: \&quot;password-field\&quot;, \&quot;domainName\&quot;: \&quot;html\&quot;, \&quot;enabled\&quot;: true, \&quot;exist\&quot;: true, \&quot;font-family\&quot;: \&quot;\\\&quot;Netflix Sans\\\&quot;, \\\&quot;Helvetica Neue\\\&quot;, \\\&quot;Segoe UI\\\&quot;, Roboto, Ubuntu, sans-serif\&quot;, \&quot;font-size\&quot;: 16, \&quot;font-style\&quot;: \&quot;normal\&quot;, \&quot;font-weight\&quot;: \&quot;400\&quot;, \&quot;id\&quot;: \&quot;:r3:\&quot;, \&quot;label\&quot;: \&quot;Password\&quot;, \&quot;left\&quot;: 713, \&quot;line-height\&quot;: \&quot;24\&quot;, \&quot;margin-bottom\&quot;: 0, \&quot;margin-left\&quot;: 0, \&quot;margin-right\&quot;:</values>
		<values> 32, \&quot;margin-top\&quot;: 0, \&quot;name\&quot;: \&quot;password\&quot;, \&quot;opacity\&quot;: \&quot;1\&quot;, \&quot;padding-bottom\&quot;: 8, \&quot;padding-left\&quot;: 16, \&quot;padding-right\&quot;: 16, \&quot;padding-top\&quot;: 24, \&quot;proxyClass\&quot;: \&quot;HtmlTextInputProxy\&quot;, \&quot;proxyName\&quot;: \&quot;inputpassword\&quot;, \&quot;right\&quot;: 1136, \&quot;tagname\&quot;: \&quot;input\&quot;, \&quot;text-align\&quot;: \&quot;left\&quot;, \&quot;text-decoration\&quot;: \&quot;none solid rgb(255, 255, 255)\&quot;, \&quot;top\&quot;: 424, \&quot;type\&quot;: \&quot;password\&quot;, \&quot;visibility\&quot;: \&quot;visible\&quot;, \&quot;visible\&quot;: true, \&quot;xpath\&quot;: \&quot;244\&quot;, \&quot;xpathProp\&quot;: \&quot;\\\/\\\/input[@id=&apos;:r3:&apos;]\&quot;, \&quot;z-index\&quot;: \&quot;auto\&quot; }&quot;,&quot;id&quot;:&quot;0&quot;,&quot;declaredClass&quot;:&quot;com.ibm.rational.test.lt.core.moeb.model.transfer.testscript.DeviceUIObject&quot;,&quot;type&quot;:&quot;html.inputtext&quot;}}, null]}]&#xA;Capabilities {acceptInsecureCerts: true, browserName: chrome, browserVersion: 126.0.6478.127, chrome: {chromedriverVersion: 126.0.6424.0 (9918af0312144..., userDataDir: C:\Users\SANDHA~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:64841}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy:</values>
		<values> normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:64841/devtoo..., se:cdpVersion: 126.0.6478.127, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: ignore, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}&#xA;Session ID: 2558454f5b9928e2e6593518bb4c72b5</values>
		<values>sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</values>
		<values>sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</values>
		<values>sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</values>
		<values>java.lang.reflect.Constructor.newInstance(Constructor.java:423)</values>
		<values>org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)</values>
		<values>org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)</values>
		<values>org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)</values>
		<values>org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:184)</values>
		<values>org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:167)</values>
		<values>org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:142)</values>
		<values>org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:567)</values>
		<values>org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:501)</values>
		<values>sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)</values>
		<values>sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</values>
		<values>java.lang.reflect.Method.invoke(Method.java:498)</values>
		<values>org.openqa.selenium.support.events.EventFiringWebDriver.lambda$new$1(EventFiringWebDriver.java:115)</values>
		<values>com.sun.proxy.$Proxy9.executeScript(Unknown Source)</values>
		<values>org.openqa.selenium.support.events.EventFiringWebDriver.executeScript(EventFiringWebDriver.java:239)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.WebGuiDriver.executeScript(WebGuiDriver.java:729)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor$ScriptFunction.apply(WebDriverJavascriptExecutor.java:228)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor$ScriptFunction.apply(WebDriverJavascriptExecutor.java:1)</values>
		<values>org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:208)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.WebDriverJavascriptExecutor.executeAction(WebDriverJavascriptExecutor.java:129)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.actions.BaseWebDriverAction.execute(BaseWebDriverAction.java:177)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)</values>
		<values>com.ibm.rational.test.rtw.webgui.selenium.WebDriverPlayer.runScript(WebDriverPlayer.java:312)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:100)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.BaseJSAction.runScriptAndParseResponse(BaseJSAction.java:89)</values>
		<values>com.ibm.rational.test.rtw.webgui.playback.js.actions.JSDefaultAction.execute(JSDefaultAction.java:31)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeInternal(AbstractActions.java:104)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractActions.executeAction(AbstractActions.java:167)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeActionInternal(HybridPlayer.java:121)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.HybridPlayer.invokeAction(HybridPlayer.java:112)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.playback.AbstractWebPlayer.executeTestStep(AbstractWebPlayer.java:217)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestStep(PlaybackManager.java:347)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.PlaybackManager.executeTestSteps(PlaybackManager.java:250)</values>
		<values>com.ibm.rational.test.rtw.webgui.execution.DesktopBrowserExecution.executeSteps(DesktopBrowserExecution.java:122)</values>
		<values>com.ibm.rational.test.lt.execution.moeb.action.MoebStepBatchAction.execute(MoebStepBatchAction.java:300)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
		<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
		<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
		<values>java.lang.Thread.run(Thread.java:826)</values>
	</extendedDataElements>
	<sourceComponentId application="Test UI Web UI Tester" component="com.ibm.rational.test.rtw.webgui.execution" componentIdType="Functional test Execution" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.rtw.webgui.execution" componentType="Desktop Execution"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:13.177Z" globalInstanceId="A1EF443C816AEE90C25DE53738343236" msg="RPXE0039W User [DefaultUserGroup][000001] experienced exception com.ibm.rational.test.lt.kernel.services.RPTStopUserEvent: Playback of UI step has a fatal error, &apos;Exit User&apos; action taken&#xA;in Test Action:&#xA;&#x9;Enter value &apos;Test@2024&apos; in Edit text whose Label is Password - www.netflix.com&#xA;&#x9;Netflix_WebUI2&#xA;&#x9;DefaultScenario&#xA;&#x9;[DefaultUserGroup][000001]&#xA;&#x9;DefaultUserGroup&#xA;&#x9;DefaultSchedule&#xA;&#x9;Engine&#xA;com.ibm.rational.test.lt.kernel.services.RPTStopUserEvent: Playback of UI step has a fatal error, &apos;Exit User&apos; action taken&#xD;&#xA;&#x9;at test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:75)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)&#xD;&#xA;&#x9;at com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)&#xD;&#xA;&#x9;at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)&#xD;&#xA;&#x9;at java.lang.Thread.run(Thread.java:826)&#xD;&#xA;Caused by: com.ibm.rational.test.lt.kernel.services.RPTStopUserEvent: Playback of UI step has a fatal error&#xD;&#xA;&#x9;... 6 more&#xD;&#xA;" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>11</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:stackTrace" type="stringArray">
		<values>com.ibm.rational.test.lt.kernel.services.RPTStopUserEvent: Playback of UI step has a fatal error, &apos;Exit User&apos; action taken</values>
		<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:75)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
		<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
		<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
		<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
		<values>java.lang.Thread.run(Thread.java:826)</values>
		<children name="Cause" type="stringArray">
			<values>com.ibm.rational.test.lt.kernel.services.RPTStopUserEvent: Playback of UI step has a fatal error</values>
			<values>test.Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.execute(Netflix_WebUI2_Test_A1EF443A05F307E0EDEAE13263306436.java:75)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.executeAction(KAction.java:602)</values>
			<values>com.ibm.rational.test.lt.kernel.action.impl.KAction.run(KAction.java:2146)</values>
			<values>java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</values>
			<values>java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</values>
			<values>java.lang.Thread.run(Thread.java:826)</values>
		</children>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.213Z" globalInstanceId="A1EF443C83D2C6D0C25DE53738343236" msg="RPXE0001W 7.7.300 Engine STOP reason Unknown" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>14</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.213Z" globalInstanceId="A1EF443C83D2EDE0C25DE53738343236" msg="RPXE0001W Problem Determination Log Statistics" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>15</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.213Z" globalInstanceId="A1EF443C83D2EDE1C25DE53738343236" msg="RPXE0001W PDLog rejected=0" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>16</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.215Z" globalInstanceId="A1EF443C83D314F0C25DE53738343236" msg="RPXE0001W BREW actions completed = 19" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>17</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.215Z" globalInstanceId="A1EF443C83D33C00C25DE53738343236" msg="RPXE0001W BREW largest pool size = 10" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>18</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.215Z" globalInstanceId="A1EF443C83D33C01C25DE53738343236" msg="RPXE0001W Engine STOP commencing worker finalizers" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>19</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:17.316Z" globalInstanceId="A1EF443C83E27E40C25DE53738343236" msg="RPXE0001W Engine STOP wait for finalizers done  completed=10 poolsize=10" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>20</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:19.189Z" globalInstanceId="A1EF443C85004A50C25DE53738343236" msg="RPXE0001W Virtual User Stop Statistics" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>21</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:19.189Z" globalInstanceId="A1EF443C85007160C25DE53738343236" msg="RPXE0001W Stop reason Exception Encountered:  1 users" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>22</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:19.189Z" globalInstanceId="A1EF443C85007161C25DE53738343236" msg="RPXE0001W    [DefaultUserGroup][000001] stopped at 32698" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>23</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
<CommonBaseEvent creationTime="2024-07-17T13:00:27.706Z" globalInstanceId="A1EF443C8A13E1A0C25DE53738343236" msg="RPXE0001W *** Runner process finished normally ***   &lt;main&gt;" severity="50" version="1.0.1">
	<extendedDataElements name="CommonBaseEventLogRecord:level" type="noValue">
		<children name="CommonBaseEventLogRecord:name" type="string">
			<values>SEVERE</values>
		</children>
		<children name="CommonBaseEventLogRecord:value" type="int">
			<values>1000</values>
		</children>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:sequenceNumber" type="long">
		<values>24</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:threadID" type="int">
		<values>49</values>
	</extendedDataElements>
	<extendedDataElements name="CommonBaseEventLogRecord:loggerName" type="string">
		<values>com.ibm.rational.test.lt.core.logging.PDExecutionLog</values>
	</extendedDataElements>
	<sourceComponentId application="DevOps Test Performance" component="Performance Test Type" componentIdType="Application" executionEnvironment="Java" location="192.168.1.7" locationType="IPV4" subComponent="com.ibm.rational.test.lt.kernel_6.1.0" componentType="Hyades Data Collection Engine Application"/>
	<situation categoryName="ReportSituation">
		<situationType xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ReportSituation" reasoningScope="INTERNAL" reportCategory="LOG"/>
	</situation>
</CommonBaseEvent>
